{"version":3,"mappings":"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","names":["DEFAULT_THEME","withTailwindTheme","Story","context","theme","useEffect","preview","OnlineState","cov_2h9tmcy9c1","s","OnlineState2","f","b","MemberEvent","cov_tsatbyah4","memo","event","renderCorrectMessage","event2","jsxs","className","children","content","displayname","cov_qaqd6sg8q","path","hash","global","gcv","coverageData","coverage","actualCoverage","MatrixE2EE","constructor","client","user","olmMachine","outgoingRequestsBeingProcessed","missingSessionsBeingRequested","roomID","decryptRoomEvent","JSON","stringify","RoomId","receiveSyncData","to_device_events","changed_devices","one_time_key_counts","unused_fallback_keys","receiveSyncChanges","encryptRoomEvent","type","isLoggedIn","Error","initOlmMachine","userID","deviceID","storePassphrase","OlmMachine","initialize","console","warn","updateTrackedUsers","users","hostname","outgoing_requests","outgoingRequests","request","processRequest","getMissingSessions","shareKeysForRoom","room","encryptionSettings","getEncryptionSettings","shareRoomKey","getJoinedMemberIDs","map","id","UserId","requests","getRooms","filter","isEncrypted","flat","RequestType","KeysUpload","request_typed","response","fetch","method","headers","body","ok","status","logout","error","markRequestAsSent","text","KeysQuery","KeysClaim","access_token","ToDevice","event_type","txn_id","SignatureUpload","RoomMessage","room_id","cov_2k4zk3r6v6","OwnUser","e2ee","device_id","mxid","slidingSyncHostname","log","resp","setHostname","startsWith","createDatabase","tx","database","transaction","store","put","userId","getLoginFlows","json","getWellKnown","passwordLogin","username","password","triesLeft","split","well_known","base_url","url","done","e","loginFlows","flows","flow","length","identifier","errcode","isRateLimitError","retry_after_ms","isLoginResponse","cov_nhxg2s3iu","Room","events","pendingEvents","stateEvents","name","notification_count","joined_count","invited_count","windowPos","addEvents","forEach","newEvent","unsigned","transaction_id","push","emit","getEvents","addStateEvents","state","index","findIndex","oldEvent","state_key","getStateEvents","isTombstoned","getAvatarURL","avatarURL","isRoomAvatarEvent","rawAvatarURL","convertMXC","isSpace","isRoomCreateEvent","setName","getName","getTopic","topic","isRoomTopicEvent","setNotificationCount","count","getNotificationCount","setNotificationHighlightCount","notification_highlight_count","getNotificationHighlightCount","setJoinedCount","getJoinedCount","setInvitedCount","getInvitedCount","getSpaceChildrenIDs","isSpaceChildEvent","getSpaceParentIDs","parents","isSpaceParentEvent","canonical","setDM","isDM","is_dm","presence","Unknown","getPureEvents","getMemberName","membership","getMemberAvatar","size","avatar_url","algorithm","deletePendingByEventID","eventID","sendHtmlMessage","html","plainText","callbackLocalEcho","Date","now","toString","origin_server_ts","sender","event_id","accessToken","encrypted","statusText","sendTextMessage","members","EventEmitter","cov_9m32qc2oj","syncPos","initialSync","lastRanges","to_device_since","mustUpdateTxnID","rooms","Set","abortController","AbortController","applyStoredSyncInfo","syncInfo","lastTxnID","stopSync","abort","resetAbortController","startSync","globalThis","IS_STORYBOOK","Promise","r","setTimeout","syncing","retries","sync","resolve","isIndexInRange","ranges","shiftRight","listKey","hi","low","i","roomObj","find","shiftLeft","removeEntry","max","indexes","n","Number","addEntry","all","sendIdentifyAndOneTimeKeys","catch","lists_ranges","spaceOpen","space","timeline_limit","subscription_limit","rawRangeInView","roomsInView","includes","list","sort","x","getSpaces","spacesInView","minimum","Math","min","maximum","Object","entries","lists","required_state","room_types","filters","not_room_types","is_encrypted","bump_event_types","extensions","enabled","to_device","since","typing","syncInfoTX","slow_get_all_rooms","currentRoom","room_subscriptions","signal","syncInfoTX2","pos","DeviceLists","changed","user_id","device_lists","left","Map","device_one_time_keys_count","device_unused_fallback_key_types","next_batch","gapIndex","ops","op","isSyncOp","range","room_ids","newRoom","add","highlight_count","avatarUrl","isInsertOp","foundRoom","roomFromDB","get","roomIDs2","duplicates","item","indexOf","isDeleteOp","cov_2akwlcw6ql","MatrixClient","_instance","profileInfo","MatrixSlidingSync","onSyncRooms","on","substring","setCurrentRoom","Instance","instance","loginInfo","displayName","DeviceId","syncTx","roomTx","getAll","setMaxListeners","openDB","upgrade","db","oldVersion","objectStoreNames","contains","deleteObjectStore","createObjectStore","keyPath","decryptedEvent","off","logoutE2ee","delete","loginInfoTX","roomTX","clear","deleteDB","blocked","location","reload","removeInViewRoom","removeInViewSpace","addSpaceOpen","removeSpaceOpen","a","getSpacesWithRooms","spaces","result","childrenIDs","spaceRoom","parent","cov_1wgdfa6rma","linkifyOptions","defaultProtocol","rel","target","UnknownEvent","hasPreviousEvent","jsx","Avatar","online","dm","Linkify","options","as","UndecryptableEvent","cov_fwgyzoaws","Waveform","src_url","playing","setPlaying","useState","duration","setDuration","waveform","setWaveform","waveformRef","useRef","current","prev","destroy","child","remove","WaveSurfer","create","barWidth","cursorWidth","container","backend","height","progressColor","responsive","waveColor","cursorColor","barRadius","hideScrollbar","normalize","load","getDuration","handlePlay","playPause","onClick","Pause","Play","viewBox","ref","secondsToHms","d","cov_a8imwxeoo","decryptMedia","decryptedCallback","failureCallback","file","Authorization","then","arrayBuffer","responseData","decryptAttachment","dataArray","mimetype","info","trim","getBlobSafeMimeType","blob","Blob","URL","createObjectURL","MessageEvent","reactions","useContext","MatrixContext","isRoomMessageTextEvent","TextMessage","isRoomMessageNoticeEvent","message_type","isRoomMessageImageEvent","setUrl","unableToDecrypt","setUnableToDecrypt","url2","_error","src","alt","title","isRoomMessageAudioEvent","MessageType","MessageType2","text_color","format","sanitized","DOMPurify","sanitize","formatted_body","ADD_TAGS","codeRegex","code","exec","groups","highlighted","hljs","highlight","language","value","replace","highlightAuto","linkified","linkifyHtml","cov_dnfx9l1ti","URL_MATCHER","EMAIL_MATCHER","MATCHERS","match","cov_2i9nddrwr","CustomParagraphNode","ParagraphNode","getType","clone","node","__key","exportDOM","element","editor","root","$getRoot","foundFurtherText","getChildren","isEmpty","exportJSON","cov_2ksyvvqc1d","LowPriority","supportedBlockTypes","blockTypeToBlockName","h1","h2","h3","h4","h5","ol","quote","ul","Divider","positionEditorElement","rect","style","opacity","top","window","pageYOffset","pageXOffset","offsetWidth","width","FloatingLinkEditor","editorRef","inputRef","mouseDownRef","linkUrl","setLinkUrl","isEditMode","setEditMode","lastSelection","setLastSelection","updateLinkEditor","useCallback","selection","$getSelection","$isRangeSelection","getSelectedNode","getParent","$isLinkNode","getURL","editorElem","nativeSelection","getSelection","activeElement","document","rootElement","getRootElement","isCollapsed","anchorNode","domRange","getRangeAt","inner","firstElementChild","getBoundingClientRect","mergeRegister","registerUpdateListener","editorState","read","registerCommand","SELECTION_CHANGE_COMMAND","getEditorState","focus","safeLink","createElement","href","onChange","onKeyDown","key","preventDefault","dispatchCommand","TOGGLE_LINK_COMMAND","Fragment","role","tabIndex","onMouseDown","Select","hidden","option","anchor","getNode","focusNode","isBackward","$isAtNodeEnd","BlockOptionsDropdownList","blockType","toolbarRef","setShowBlockOptionsDropDown","dropDownRef","dropDown","toolbar","editorContainer","getElementsByClassName","bottom","clientHeight","handle","addEventListener","removeEventListener","formatParagraph","update","$wrapNodes","$createCustomParagraphNode","formatLargeHeading","$createHeadingNode","formatSmallHeading","formatBulletList","INSERT_UNORDERED_LIST_COMMAND","REMOVE_LIST_COMMAND","formatNumberedList","INSERT_ORDERED_LIST_COMMAND","formatQuote","$createQuoteNode","formatCode","$createCodeNode","Text","Heading1","Heading2","List","ListOrdered","Quote","Code","ToolbarPlugin","useLexicalComposerContext","canUndo","setCanUndo","canRedo","setCanRedo","setBlockType","selectedElementKey","setSelectedElementKey","showBlockOptionsDropDown","codeLanguage","setCodeLanguage","_isRTL","setIsRTL","isLink","setIsLink","isBold","setIsBold","isItalic","setIsItalic","isUnderline","setIsUnderline","isStrikethrough","setIsStrikethrough","isCode","setIsCode","updateToolbar","getKey","getTopLevelElementOrThrow","elementKey","elementDOM","getElementByKey","$isListNode","parentList","$getNearestNodeOfType","ListNode","getTag","$isHeadingNode","$isCodeNode","getLanguage","getDefaultCodeLanguage","hasFormat","$isParentElementRTL","_payload","_newEditor","CAN_UNDO_COMMAND","payload","CAN_REDO_COMMAND","codeLanguges","useMemo","getCodeLanguages","onCodeLanguageSelect","$getNodeByKey","setLanguage","insertLink","portalContainer","setPortalContainer","getElementById","portalContainer2","prepend","removeChild","disabled","UNDO_COMMAND","Undo","REDO_COMMAND","Redo","has","Heading3","Heading4","Heading5","cov_1ae3ryyub7","CodeHighlightPlugin","registerCodeHighlighting","cov_ssy30kwns","editorTheme","ltr","rtl","placeholder","paragraph","heading","nested","listitem","image","link","bold","italic","overflowed","hashtag","underline","strikethrough","underlineStrikethrough","codeHighlight","atrule","attr","boolean","builtin","cdata","char","class","comment","constant","deleted","doctype","entity","function","important","inserted","keyword","namespace","number","operator","prolog","property","punctuation","regex","selector","string","symbol","tag","variable","cov_11uzlgodth","CAN_USE_DOM","documentMode","CAN_USE_BEFORE_INPUT","InputEvent","IS_SAFARI","test","navigator","userAgent","IS_IOS","MSStream","IS_CHROME","IS_APPLE_WEBKIT","Placeholder","SendButton","onStartSending","onStopSending","sendMessage","room2","htmlMessage","$generateHtmlFromNodes","matched","spanRegex","matchedspans","groups2","replaceAll","plainMessage","$convertToMarkdownString","TRANSFORMERS","CLEAR_EDITOR_COMMAND","CLEAR_HISTORY_COMMAND","localStorage","removeItem","removeCommand","KEY_ENTER_COMMAND","shiftKey","INSERT_PARAGRAPH_COMMAND","COMMAND_PRIORITY_CRITICAL","Send","stroke","cov_4xi5mbt9d","RoomListRooms","sectionID","activeRoom","roomsRendered","RoomListItem","roomId","active","RoomSection","section","onRoomClick","setHidden","matrixClient","inView","useInView","triggerOnce","threshold","inView2","addInViewRoom","MDXContent","props","MDXLayout","_provideComponents","_jsx","_createMdxContent","_components","_jsxs","_Fragment","Meta","__page","componentMeta","__namedExportsOrder","cov_1g7vba13nc","Login","loginPending","setLoginPending","loginError","setLoginError","setUsername","setPassword","Navigate","to","startLogin","onSubmit","Header","Input","readonly","Button","__docgenInfo","cov_11tf8u5he","LoginPage","loading","setLoading","cov_nkv5i4emb","ChatView","setEvents","eventsFull","setEventsFull","pathname","useLocation","previousPathname","setPreviousPathname","firstItemIndex","setFirstItemIndex","decryptEvents","eventsFull2","previousEvent","previousEventIsFromSameSender","redaction","redacts","redacted","redacted_because","redaction_id","reason","decrypted_event","parse","undecryptable","eventsAll","self","reverse","eventsRaw","no_relations","events2","listenForEvents","eventsListened","newEvents","renderEventPure","_index","RedactedEvent","previousEventType","edit","rel_type","renderEvent","Virtuoso","alignToBottom","data","initialTopMostItemIndex","overscan","itemContent","components","followOutput","isAtBottom","padding","display","justifyContent","MainPage","profile","useProfile","spacesWithRooms","useSpaces","useRooms","params","useParams","useRoom","decodeURIComponent","roomIdOrAlias","toplevelSpaces","not_tombstoned","not_a_child","some","otherChildren","no_parents","leftOverRooms","otherRoom","not_a_space","a_index","b_index","sections","rooms2","loadable","story_0","story_1","story_2","story_3","story_4","story_5","story_6","story_7","story_8","story_9","story_10","story_11","story_12","story_13","story_14","configStories","configure","previewApi","addDecorator","addParameters","addLoader","addArgs","addArgTypes","addStepRunner","addArgTypesEnhancer","addArgsEnhancer","setGlobalRender","configs","config_0","config_1","config_2","config_3","config_4","config_5","config_6","config_7","config_8","config_9","preview.default","config","decorator","loader","enhancer","v"],"sources":["../../../.storybook/withTailwindTheme.decorator.tsx","../../../.storybook/preview.tsx","../../../src/app/sdk/api/otherEnums.ts","../../../src/components/events/memberEvent.tsx","../../../src/app/sdk/e2ee.ts","../../../src/app/sdk/ownUser.ts","../../../src/app/sdk/room.ts","../../../src/app/sdk/slidingSync.ts","../../../src/app/sdk/client.ts","../../../src/components/events/unknownEvent.tsx","../../../src/components/events/helpers/Waveform.tsx","../../../src/components/events/messageEvent.tsx","../../../src/components/input/chat/plugins/AutoLinkPlugin.tsx","../../../src/components/input/chat/customNodes/CustomParagraphNode.ts","../../../src/components/input/chat/plugins/ToolbarPlugin.tsx","../../../src/components/input/chat/plugins/CodeHighlightPlugin.ts","../../../src/components/input/chat/theme.ts","../../../src/components/input/chat/input.tsx","../../../src/components/roomList/roomList.tsx","../../../src/documentation/Welcome.stories.mdx","../../../src/components/login/login.tsx","../../../src/pages/LoginPage.tsx","../../../src/pages/MainPage.tsx","../../../../../../../../virtual:/@storybook/builder-vite/storybook-stories.js","../../../../../../../../virtual:/@storybook/builder-vite/vite-app.js"],"sourcesContent":["\nimport { useEffect } from \"react\";\n\nexport const DEFAULT_THEME = \"light\";\n\nexport const withTailwindTheme = (Story: any, context) => {\n    const { theme } = context.globals;\n\n    useEffect(() => {\n        const htmlTag = document.documentElement;\n\n        // Set the \"data-mode\" attribute on the iFrame html tag\n        htmlTag.setAttribute(\"data-mode\", theme || DEFAULT_THEME);\n    }, [theme]);\n\n    // @ts-ignore\n    return <Story />;\n};","import type { Preview } from \"@storybook/react\";\nimport \"../src/index.scss\";\nimport \"./tailwindcss.scss\";\nimport { DEFAULT_THEME, withTailwindTheme } from \"./withTailwindTheme.decorator\";\nimport { initAsync, start } from \"@mtrnord/matrix-sdk-crypto-js\";\n\nconst preview: Preview = {\n  parameters: {\n    actions: { argTypesRegex: \"^on[A-Z].*\" },\n    controls: {\n      matchers: {\n        color: /(background|color)$/i,\n        date: /Date$/,\n      },\n    },\n    options: {\n      storySort: {\n        order: ['Introduction', 'Fundamentals', '*'],\n      },\n    },\n  },\n  globalTypes: {\n    theme: {\n      name: \"Theme\",\n      description: \"Global theme for components\",\n      defaultValue: DEFAULT_THEME,\n      toolbar: {\n        icon: \"paintbrush\",\n        // Array of plain string values or MenuItem shape (see below)\n        items: [\n          { value: \"light\", title: \"Light\", left: \"🌞\" },\n          { value: \"dark\", title: \"Dark\", left: \"🌛\" },\n        ],\n        // Change title based on selected value\n        dynamicTitle: true,\n      },\n    },\n  },\n  decorators: [\n    withTailwindTheme,\n  ],\n};\n\nexport default preview;\n","export enum OnlineState {\n    Online,\n    Offline,\n    Unknown\n}\n","import { memo } from \"react\";\nimport { IRoomMemberEvent } from \"../../app/sdk/api/events\";\nimport { FC } from \"react\";\n\ntype MemberEventProps = {\n    /**\n     * The event to render\n     */\n    event: IRoomMemberEvent;\n};\n\nconst MemberEvent: FC<MemberEventProps> = memo(({ event }) => {\n    const renderCorrectMessage = (event: IRoomMemberEvent) => {\n        // TODO: Make sure we render avatar and name changes correctly\n\n        return <p className=\"p-2 hover:bg-gray-200 rounded-md duration-200 ease-in-out\">\n            {\n                event.content.displayname ?\n                    event.content.displayname :\n                    event.state_key\n            } {\n                event.content.membership === \"join\" ?\n                    \"joined the room\" :\n                    (\n                        event.content.membership === \"leave\" ?\n                            // TODO: Handle kick\n                            \"left the room\" :\n                            (\n                                event.content.membership === \"ban\" ?\n                                    \"was banned from the room by \" + event.sender :\n                                    (\n                                        event.content.membership === \"invite\" ?\n                                            \"was invited to the room by \" + event.sender :\n                                            (\n                                                event.content.membership === \"knock\" ?\n                                                    \"knocked on the room\" :\n                                                    \"changed their membership status to \" + event.content.membership\n                                            )\n                                    )\n                            )\n                    )\n            }\n        </p>\n    }\n\n    return renderCorrectMessage(event);\n});\n\nexport default MemberEvent;","import {\n    DeviceId,\n    DeviceLists,\n    KeysBackupRequest,\n    KeysClaimRequest,\n    KeysQueryRequest,\n    KeysUploadRequest,\n    OlmMachine,\n    RequestType,\n    RoomId,\n    RoomMessageRequest,\n    SignatureUploadRequest,\n    ToDeviceRequest,\n    UserId\n} from \"@mtrnord/matrix-sdk-crypto-js\";\nimport { MatrixClient } from \"./client\";\nimport { OwnUser } from \"./ownUser\";\nimport { Room } from \"./room\";\nimport { IRoomEvent } from \"./api/events\";\n\nexport class MatrixE2EE {\n    private olmMachine?: OlmMachine;\n    private outgoingRequestsBeingProcessed = false;\n    private missingSessionsBeingRequested = false;\n\n    constructor(private client: MatrixClient, private user: OwnUser) { }\n\n    public async decryptRoomEvent(roomID: string, event: IRoomEvent<any>): Promise<any> {\n        return await this.olmMachine?.decryptRoomEvent(JSON.stringify(event), new RoomId(roomID));\n    }\n\n    public async receiveSyncData(\n        to_device_events: string,\n        changed_devices: DeviceLists,\n        one_time_key_counts: Map<any, any>,\n        unused_fallback_keys?: Set<any>\n    ): Promise<any> {\n        return await this.olmMachine?.receiveSyncChanges(\n            to_device_events,\n            changed_devices,\n            one_time_key_counts,\n            unused_fallback_keys\n        );\n    }\n\n    public async encryptRoomEvent(roomID: RoomId, type: string, content: string): Promise<any> {\n        if (!this.client.isLoggedIn) {\n            throw Error(\"Not logged in\");\n        }\n        if (!this.olmMachine) {\n            throw Error(\"Olm machine must be set first\");\n        }\n        return await this.olmMachine?.encryptRoomEvent(roomID, type, content);\n    }\n\n    public async initOlmMachine(userID: UserId, deviceID: DeviceId, storePassphrase?: string): Promise<void> {\n        this.olmMachine = await OlmMachine.initialize(userID, deviceID, \"cetirizine-crypto\", storePassphrase);\n        console.warn(\"Init olm done\")\n    }\n\n    public async updateTrackedUsers(users: any[]): Promise<void> {\n        await this.olmMachine?.updateTrackedUsers(users);\n    }\n\n    public async sendIdentifyAndOneTimeKeys(): Promise<void> {\n        if (!this.client.isLoggedIn) {\n            throw Error(\"Not logged in\");\n        }\n        if (!this.user.hostname) {\n            throw Error(\"Hostname must be set first\");\n        }\n        if (!this.olmMachine) {\n            throw Error(\"Olm machine must be set first\");\n        }\n\n        if (this.outgoingRequestsBeingProcessed) {\n            return;\n        }\n        this.outgoingRequestsBeingProcessed = true;\n\n        const outgoing_requests = await this.olmMachine.outgoingRequests();\n\n        for (const request of outgoing_requests) {\n            await this.processRequest(request);\n        }\n\n        await this.getMissingSessions();\n        this.outgoingRequestsBeingProcessed = false;\n    }\n\n    public async shareKeysForRoom(room: Room): Promise<void> {\n        if (!this.client.isLoggedIn) {\n            throw Error(\"Not logged in\");\n        }\n        if (!this.user.hostname) {\n            throw Error(\"Hostname must be set first\");\n        }\n        if (!this.olmMachine) {\n            throw Error(\"Olm machine must be set first\");\n        }\n        const encryptionSettings = room.getEncryptionSettings();\n        if (encryptionSettings) {\n            const requests = await this.olmMachine.shareRoomKey(new RoomId(room.roomID), room.getJoinedMemberIDs().map(id => new UserId(id)), encryptionSettings);\n            for (const request of requests) {\n                await this.processRequest(request);\n            }\n        }\n    }\n\n    public async getMissingSessions(): Promise<void> {\n        if (!this.client.isLoggedIn) {\n            throw Error(\"Not logged in\");\n        }\n        if (!this.user.hostname) {\n            throw Error(\"Hostname must be set first\");\n        }\n        if (!this.olmMachine) {\n            throw Error(\"Olm machine must be set first\");\n        }\n\n        if (this.missingSessionsBeingRequested) {\n            return;\n        }\n        this.missingSessionsBeingRequested = true;\n\n        const encryptedRooms = [...this.client.getRooms()].filter(room => room.isEncrypted());\n        const users = encryptedRooms.map(room => room.getJoinedMemberIDs().map(id => new UserId(id))).flat();\n        const request = await this.olmMachine?.getMissingSessions(users);\n        if (request) {\n            await this.processRequest(request);\n        }\n\n        this.missingSessionsBeingRequested = false;\n    }\n\n    private async processRequest(request: any): Promise<void> {\n        if (!this.client.isLoggedIn) {\n            throw Error(\"Not logged in\");\n        }\n        if (!this.user.hostname) {\n            throw Error(\"Hostname must be set first\");\n        }\n        if (!this.olmMachine) {\n            throw Error(\"Olm machine must be set first\");\n        }\n        // Check which type the request is\n        if (request.type === RequestType.KeysUpload) {\n            // Send the key\n            const request_typed = request as KeysUploadRequest;\n            const response = await fetch(\n                `${this.user.hostname}/_matrix/client/v3/keys/upload`,\n                {\n                    method: \"POST\",\n                    headers: {\n                        \"Content-Type\": \"application/json\",\n                        \"Authorization\": `Bearer ${this.user.access_token}`\n                    },\n                    body: request_typed.body\n                }\n            )\n            if (!response.ok) {\n                if (response.status === 401) {\n                    await this.client.logout();\n                    console.error(response);\n                }\n                console.error(\"Failed to upload keys\", response);\n                return;\n            }\n            this.olmMachine.markRequestAsSent(request_typed.id!, request_typed.type, await response.text());\n        } else if (request.type === RequestType.KeysQuery) {\n            const request_typed = request as KeysQueryRequest;\n            const response = await fetch(\n                `${this.user.hostname}/_matrix/client/v3/keys/query`,\n                {\n                    method: \"POST\",\n                    headers: {\n                        \"Content-Type\": \"application/json\",\n                        \"Authorization\": `Bearer ${this.user.access_token}`\n                    },\n                    body: request_typed.body\n                }\n            )\n            if (!response.ok) {\n                if (response.status === 401) {\n                    await this.client.logout();\n                    console.error(response);\n                }\n                console.error(\"Failed to query keys\", response);\n                return;\n            }\n            this.olmMachine.markRequestAsSent(request_typed.id!, request_typed.type, await response.text());\n        } else if (request.type === RequestType.KeysClaim) {\n            const request_typed = request as KeysClaimRequest;\n            const response = await fetch(\n                `${this.user.hostname}/_matrix/client/v3/keys/claim`,\n                {\n                    method: \"POST\",\n                    headers: {\n                        \"Content-Type\": \"application/json\",\n                        \"Authorization\": `Bearer ${this.user.access_token}`\n                    },\n                    body: request_typed.body\n                }\n            )\n            if (!response.ok) {\n                if (response.status === 401) {\n                    await this.client.logout();\n                    console.error(response);\n                }\n                console.error(\"Failed to claim keys\", response);\n                return;\n            }\n            this.olmMachine.markRequestAsSent(request_typed.id!, request_typed.type, await response.text());\n        } else if (request.type === RequestType.ToDevice) {\n            const request_typed = request as ToDeviceRequest;\n            const response = await fetch(\n                `${this.user.hostname}/_matrix/client/v3/sendToDevice/${request_typed.event_type}/${request_typed.txn_id}`,\n                {\n                    method: \"PUT\",\n                    headers: {\n                        \"Content-Type\": \"application/json\",\n                        \"Authorization\": `Bearer ${this.user.access_token}`\n                    },\n                    body: request_typed.body\n                }\n            )\n            if (!response.ok) {\n                if (response.status === 401) {\n                    await this.client.logout();\n                    console.error(response);\n                }\n                console.error(\"Failed to send to device\", response);\n                return;\n            }\n            this.olmMachine.markRequestAsSent(request_typed.id ?? request_typed.txn_id, request_typed.type, await response.text());\n        } else if (request.type === RequestType.SignatureUpload) {\n            const request_typed = request as SignatureUploadRequest;\n            const response = await fetch(\n                `${this.user.hostname}/_matrix/client/v3/keys/signatures/upload`,\n                {\n                    method: \"POST\",\n                    headers: {\n                        \"Content-Type\": \"application/json\",\n                        \"Authorization\": `Bearer ${this.user.access_token}`\n                    },\n                    body: request_typed.body\n                }\n            )\n            if (!response.ok) {\n                if (response.status === 401) {\n                    await this.client.logout();\n                    console.error(response);\n                }\n                console.error(\"Failed to upload signatures\", response);\n                return;\n            }\n            this.olmMachine.markRequestAsSent(request_typed.id!, request_typed.type, await response.text());\n        } else if (request.type === RequestType.RoomMessage) {\n            const request_typed = request as RoomMessageRequest;\n            const response = await fetch(\n                `${this.user.hostname}/_matrix/client/v3/rooms/${request_typed.room_id}/send/${request_typed.event_type}/${request_typed.txn_id}`,\n                {\n                    method: \"PUT\",\n                    headers: {\n                        \"Content-Type\": \"application/json\",\n                        \"Authorization\": `Bearer ${this.user.access_token}`\n                    },\n                    body: request_typed.body\n                }\n            )\n            if (!response.ok) {\n                if (response.status === 401) {\n                    await this.client.logout();\n                    console.error(response);\n                }\n                console.error(\"Failed to send message\", response);\n                return;\n            }\n            this.olmMachine.markRequestAsSent(request_typed.id!, request_typed.type, await response.text());\n        } else if (request.type === RequestType.KeysBackup) {\n            const request_typed = request as KeysBackupRequest;\n            const response = await fetch(\n                `${this.user.hostname}/_matrix/client/v3/room_keys/keys`,\n                {\n                    method: \"PUT\",\n                    headers: {\n                        \"Content-Type\": \"application/json\",\n                        \"Authorization\": `Bearer ${this.user.access_token}`\n                    },\n                    body: request_typed.body\n                }\n            )\n            if (!response.ok) {\n                if (response.status === 401) {\n                    await this.client.logout();\n                    console.error(response);\n                }\n                console.error(\"Failed to backup keys\", response);\n                return;\n            }\n            this.olmMachine.markRequestAsSent(request_typed.id!, request_typed.type, await response.text());\n        }\n    }\n\n    public logoutE2ee(): void {\n        this.missingSessionsBeingRequested = false;\n        this.outgoingRequestsBeingProcessed = false;\n    }\n}","import { DeviceId, UserId } from \"@mtrnord/matrix-sdk-crypto-js\";\nimport { IErrorResp, ILoginFlows, ILoginResponse, IWellKnown } from \"./api/apiTypes\";\nimport { MatrixClient, isRateLimitError } from \"./client\";\nimport { MatrixE2EE } from \"./e2ee\";\n\nexport class OwnUser {\n    public access_token?: string;\n    public device_id?: string;\n    public mxid?: string;\n    // Hostname including \"https://\"\n    public hostname?: string;\n    public slidingSyncHostname?: string;\n    public e2ee: MatrixE2EE;\n\n    constructor(private client: MatrixClient) {\n        this.e2ee = new MatrixE2EE(this.client, this);\n    }\n\n    // TODO: call logout endpoint on logout\n    public async logout() {\n        if (!this.mxid) {\n            console.log(\"Not logged in\");\n            return;\n        }\n        if (!this.access_token) {\n            throw Error(\"Not logged in\");\n        }\n        if (!this.hostname) {\n            throw Error(\"Hostname must be set first\");\n        }\n        const resp = await fetch(`${this.hostname}/_matrix/client/v3/logout`, {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"Authorization\": `Bearer ${this.access_token}`\n            },\n        });\n        if (!resp.ok) {\n            console.error(resp);\n            throw Error(\"Error logging out. See console for error.\");\n        }\n\n        this.access_token = undefined;\n        this.device_id = undefined;\n        this.slidingSyncHostname = undefined;\n    }\n\n\n\n    public async setHostname(hostname: string) {\n        if (!hostname.startsWith(\"https://\")) {\n            throw Error(\"Hostname must start with 'https://'\");\n        }\n        if (!this.client.database) {\n            await this.client.createDatabase();\n        }\n\n        // Write to database\n        const tx = this.client.database?.transaction('loginInfo', 'readwrite');\n        await tx?.store.put({\n            userId: this.mxid!,\n            hostname: hostname,\n            slidingSyncHostname: this.slidingSyncHostname,\n            access_token: this.access_token,\n            device_id: this.device_id,\n        });\n        await tx?.done\n\n        // Set in memory\n        this.hostname = hostname;\n    }\n\n    private async getLoginFlows(): Promise<ILoginFlows> {\n        if (!this.hostname) {\n            throw Error(\"Hostname must be set first\");\n        }\n        const resp = await fetch(`${this.hostname}/_matrix/client/v3/login`);\n        if (!resp.ok) {\n            console.error(resp);\n            throw Error(\"Error requesting login flows. See console for error.\");\n        }\n        const json = await resp.json() as ILoginFlows;\n        return json;\n    }\n\n    private async getWellKnown(): Promise<IWellKnown> {\n        if (!this.hostname) {\n            throw Error(\"Hostname must be set first\");\n        }\n        const resp = await fetch(`${this.hostname}/.well-known/matrix/client`);\n        if (!resp.ok) {\n            console.error(resp);\n            throw Error(\"Error requesting login flows. See console for error.\");\n        }\n        const json = await resp.json() as IWellKnown;\n        return json;\n    }\n\n    public async passwordLogin(username: string, password: string, triesLeft = 5) {\n        if (!this.client.database) {\n            await this.client.createDatabase();\n        }\n        if (!username) {\n            throw Error(\"Username must be set\");\n        }\n        if (!password) {\n            throw Error(\"Password must be set\");\n        }\n        this.mxid = username;\n        await this.setHostname(`https://${username.split(':')[1]}`);\n\n        try {\n            const well_known = await this.getWellKnown();\n            if (well_known[\"m.homeserver\"]?.base_url) {\n                await this.setHostname(well_known[\"m.homeserver\"].base_url);\n            }\n            if (well_known[\"org.matrix.msc3575.proxy\"]?.url) {\n                // Write to database\n                const tx = this.client.database?.transaction('loginInfo', 'readwrite');\n                await tx?.store.put({\n                    userId: this.mxid!,\n                    hostname: this.hostname,\n                    slidingSyncHostname: well_known[\"org.matrix.msc3575.proxy\"].url,\n                    access_token: this.access_token,\n                    device_id: this.device_id,\n                });\n                await tx?.done\n\n                // Set the sliding sync proxy\n                this.slidingSyncHostname = well_known[\"org.matrix.msc3575.proxy\"].url;\n            } else {\n                throw Error(\"No sliding sync proxy found\");\n            }\n        } catch (e: any) {\n            console.warn(`No well-known found for ${this.hostname}:\\n${e}`);\n        }\n\n        const loginFlows = await this.getLoginFlows();\n        if ((loginFlows.flows.filter((flow) => flow.type === 'm.login.password')?.length || 0) == 0) {\n            throw Error(\"Password login is not supported by this homeserver\");\n        }\n\n        const resp = await fetch(`${this.hostname}/_matrix/client/v3/login`, {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify({\n                type: \"m.login.password\",\n                identifier: {\n                    type: 'm.id.user',\n                    user: username,\n                },\n                user: username,\n                password: password\n            })\n        });\n        if (!resp.ok) {\n            console.error(resp);\n            throw Error(\"Error logging in. See console for error.\");\n        }\n        const json = await resp.json();\n        if (isErrorResp(json)) {\n            throw Error(`Error logging in: ${json.errcode}: ${json.error}`);\n        }\n        if (isRateLimitError(json)) {\n            console.error(`Rate limited. Retrying in ${json.retry_after_ms}ms. ${triesLeft} tries left.`);\n            await this.passwordLogin(username, password, triesLeft - 1);\n        }\n        if (isLoginResponse(json)) {\n            // Write to database\n            const tx = this.client.database?.transaction('loginInfo', 'readwrite');\n            await tx?.store.put({\n                userId: json.user_id!,\n                hostname: this.hostname,\n                slidingSyncHostname: this.slidingSyncHostname,\n                access_token: json.access_token,\n                device_id: json.device_id,\n            });\n            await tx?.done\n            this.access_token = json.access_token;\n            this.device_id = json.device_id;\n            this.mxid = json.user_id;\n\n            await this.e2ee.initOlmMachine(new UserId(this.mxid), new DeviceId(this.device_id));\n        }\n    }\n}\n\nfunction isLoginResponse(arg: any): arg is ILoginResponse {\n    return arg.access_token !== undefined;\n}\n\nfunction isErrorResp(arg: any): arg is IErrorResp {\n    return arg.errcode !== undefined;\n}","import EventEmitter from \"events\";\nimport {\n    IRoomEvent,\n    IRoomStateEvent,\n    isRoomAvatarEvent,\n    isRoomCreateEvent,\n    isRoomTopicEvent,\n    isSpaceChildEvent,\n    isSpaceParentEvent\n} from \"./api/events\";\nimport { MatrixClient } from \"./client\";\nimport { useEffect, useState } from \"react\";\nimport { EncryptionAlgorithm, EncryptionSettings, RoomId } from \"@mtrnord/matrix-sdk-crypto-js\";\nimport { OnlineState } from \"./api/otherEnums\";\nimport { MatrixE2EE } from \"./e2ee\";\n\nexport interface RoomEvents {\n    // Used to notify about changes to the event list\n    'events': (events: IRoomEvent[]) => void;\n    'state_events': (stateEvents: IRoomStateEvent[]) => void;\n}\n\nexport declare interface Room {\n    on<U extends keyof RoomEvents>(\n        event: U, listener: RoomEvents[U]\n    ): this;\n\n    emit<U extends keyof RoomEvents>(\n        event: U, ...args: Parameters<RoomEvents[U]>\n    ): boolean;\n}\n\nexport class Room extends EventEmitter {\n    private events: IRoomEvent[] = [];\n    private pendingEvents: IRoomEvent[] = [];\n    private stateEvents: IRoomStateEvent[] = [];\n    private name?: string;\n\n    private notification_count: number = 0;\n    private notification_highlight_count: number = 0;\n    private joined_count: number = 0;\n    private invited_count: number = 0;\n    private is_dm: boolean = false;\n\n    public windowPos: {\n        [list: string]: number\n    } = {}\n\n\n    constructor(public roomID: string, private hostname: string, private client: MatrixClient, private e2ee: MatrixE2EE) {\n        super();\n    }\n\n    public addEvents(events: IRoomEvent[]): void {\n        console.log(\"Adding events\")\n        events.forEach((newEvent) => {\n            if (newEvent.unsigned?.transaction_id) {\n                this.pendingEvents = this.pendingEvents.filter((event) => event.unsigned?.transaction_id !== newEvent.unsigned?.transaction_id);\n            }\n\n            this.events.push(newEvent);\n        });\n\n        this.emit(\"events\", this.getEvents());\n    }\n\n    public addStateEvents(state: IRoomStateEvent[]): void {\n        // if the state event id is already known then we update the event instead of pushing it on to the Array\n        state.forEach((newEvent) => {\n            const index = this.stateEvents.findIndex((oldEvent) => oldEvent.state_key === newEvent.state_key && oldEvent.type === newEvent.type);\n            if (index !== -1) {\n                this.stateEvents[index] = newEvent;\n            } else {\n                this.stateEvents.push(newEvent);\n            }\n        });\n        this.emit(\"state_events\", this.stateEvents);\n    }\n\n    public getStateEvents(): IRoomStateEvent[] {\n        return this.stateEvents;\n    }\n\n    public isTombstoned(): boolean {\n        let isTombstoned: boolean = false;\n        this.stateEvents.forEach((event) => {\n            if (event.type === \"m.room.tombstone\") {\n                isTombstoned = true;\n            }\n        });\n        return isTombstoned;\n    }\n\n    public getAvatarURL(): string | undefined {\n        let avatarURL: string | undefined = undefined;\n        this.stateEvents.forEach((event) => {\n            if (isRoomAvatarEvent(event)) {\n                const rawAvatarURL = event.content.url;\n                if (rawAvatarURL?.startsWith(\"mxc://\")) {\n                    avatarURL = this.client.convertMXC(rawAvatarURL);\n                }\n            }\n        });\n        return avatarURL;\n    }\n\n    public isSpace(): boolean {\n        let isSpace: boolean = false;\n        this.stateEvents.forEach((event) => {\n            if (isRoomCreateEvent(event)) {\n                isSpace = event.content.type === \"m.space\";\n            }\n        });\n        return isSpace;\n    }\n\n    public setName(name: string): void {\n        this.name = name;\n    }\n\n    public getName(): string {\n        if (!this.name) {\n            return this.roomID;\n        }\n        return this.name;\n    }\n\n    public getTopic(): string | undefined {\n        let topic: string | undefined = undefined;\n        this.stateEvents.forEach((event) => {\n            if (isRoomTopicEvent(event)) {\n                topic = event.content.topic;\n            }\n        });\n        return topic;\n    }\n\n    public setNotificationCount(count: number): void {\n        this.notification_count = count;\n    }\n\n    public getNotificationCount(): number {\n        return this.notification_count;\n    }\n\n    public setNotificationHighlightCount(count: number): void {\n        this.notification_highlight_count = count;\n    }\n\n    public getNotificationHighlightCount(): number {\n        return this.notification_highlight_count;\n    }\n\n    public setJoinedCount(count: number): void {\n        this.joined_count = count;\n    }\n\n    public getJoinedCount(): number {\n        return this.joined_count;\n    }\n\n    public setInvitedCount(count: number): void {\n        this.invited_count = count;\n    }\n\n    public getInvitedCount(): number {\n        return this.invited_count;\n    }\n\n    public getSpaceChildrenIDs(): string[] {\n        const children: string[] = [];\n        this.stateEvents.forEach((event) => {\n            if (isSpaceChildEvent(event)) {\n                children.push(event.state_key);\n            }\n        });\n        return children;\n    }\n\n    public getSpaceParentIDs(): { roomID: string, canonical: boolean }[] {\n        const parents: { roomID: string, canonical: boolean }[] = [];\n        this.stateEvents.forEach((event) => {\n            if (isSpaceParentEvent(event)) {\n                parents.push({ roomID: event.state_key, canonical: event.content.canonical || false });\n            }\n        });\n        return parents;\n    }\n\n    public setDM(isDM: boolean): void {\n        this.is_dm = isDM;\n    }\n\n    public isDM(): boolean {\n        return this.is_dm;\n    }\n\n    public get presence(): OnlineState {\n        // TODO: Implement this\n        return OnlineState.Unknown;\n    }\n\n    public getEvents(): IRoomEvent[] {\n        return [...this.events, ...this.pendingEvents];\n    }\n\n    public getPureEvents(): IRoomEvent[] {\n        return this.events;\n    }\n\n    public getMemberName(userID: string): string {\n        let name: string = userID;\n        this.stateEvents.forEach((event) => {\n            if (event.type === \"m.room.member\") {\n                if (event.state_key === userID && event.content.membership == \"join\") {\n                    name = event.content.displayname;\n                }\n            }\n        });\n        return name;\n    }\n\n    public getMemberAvatar(userID: string, size: number = 32): string | undefined {\n        let avatarURL: string | undefined = undefined;\n        this.stateEvents.forEach((event) => {\n            if (event.type === \"m.room.member\") {\n                if (event.state_key === userID && event.content.membership == \"join\") {\n                    const rawAvatarURL = event.content.avatar_url;\n                    if (rawAvatarURL?.startsWith(\"mxc://\")) {\n                        avatarURL = this.client.convertMXC(rawAvatarURL, size);\n                    }\n                }\n            }\n        });\n        return avatarURL;\n    }\n\n    public isEncrypted(): boolean {\n        let isEncrypted: boolean = false;\n        this.stateEvents.forEach((event) => {\n            if (event.type === \"m.room.encryption\" && event.content.algorithm === \"m.megolm.v1.aes-sha2\" && event.state_key === \"\") {\n                isEncrypted = true;\n            }\n        });\n        return isEncrypted;\n    }\n\n    // TODO: Workaround since txn id doesnt come down sync\n    private deletePendingByEventID(eventID: string): void {\n        this.pendingEvents = this.pendingEvents.filter((event) => event.eventID !== eventID);\n        this.emit(\"events\", this.getEvents());\n    }\n\n    public async sendHtmlMessage(html: string, plainText: string, callbackLocalEcho: () => void): Promise<string> {\n        const txn_id = Date.now().toString();\n        // @ts-ignore: Intentionally incomplete\n        const event = {\n            type: \"m.room.message\",\n            unsigned: {\n                transaction_id: txn_id\n            },\n            origin_server_ts: txn_id,\n            sender: this.client.mxid,\n            event_id: txn_id,\n            content: {\n                \"msgtype\": \"m.text\",\n                \"body\": plainText,\n                \"format\": \"org.matrix.custom.html\",\n                \"formatted_body\": html\n            }\n        } as IRoomEvent;\n        this.pendingEvents.push(event);\n        this.emit(\"events\", this.getEvents());\n        callbackLocalEcho();\n\n        if (!this.isEncrypted()) {\n            const resp = await fetch(`${this.hostname}/_matrix/client/v3/rooms/${this.roomID}/send/m.room.message/${event.unsigned?.transaction_id}`, {\n                method: \"PUT\",\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                    \"Authorization\": `Bearer ${this.client.accessToken}`\n                },\n                body: JSON.stringify(event.content)\n            });\n            if (!resp.ok) {\n                this.deletePendingByEventID(event.event_id);\n                throw new Error(`Failed to send message: ${resp.status} ${resp.statusText}`);\n            }\n            const json = await resp.json();\n            this.deletePendingByEventID(event.event_id);\n            return json.event_id;\n        } else {\n            console.log(\"Sending encrypted message\");\n            await this.e2ee.getMissingSessions();\n            await this.e2ee.shareKeysForRoom(this);\n            const encrypted = await this.e2ee.encryptRoomEvent(\n                new RoomId(this.roomID),\n                \"m.room.message\",\n                JSON.stringify(event.content)\n            );\n            const resp = await fetch(`${this.hostname}/_matrix/client/v3/rooms/${this.roomID}/send/m.room.encrypted/${event.unsigned?.transaction_id}`, {\n                method: \"PUT\",\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                    \"Authorization\": `Bearer ${this.client.accessToken}`\n                },\n                body: encrypted\n            });\n            if (!resp.ok) {\n                this.deletePendingByEventID(event.event_id);\n                throw new Error(`Failed to send message: ${resp.status} ${resp.statusText}`);\n            }\n            const json = await resp.json();\n            this.deletePendingByEventID(event.event_id);\n            return json.event_id;\n        }\n    }\n\n    public async sendTextMessage(text: string, callbackLocalEcho: () => void): Promise<string> {\n        const txn_id = Date.now().toString();\n        // @ts-ignore: Intentionally incomplete\n        const event = {\n            type: \"m.room.message\",\n            unsigned: {\n                transaction_id: txn_id\n            },\n            origin_server_ts: txn_id,\n            event_id: txn_id,\n            sender: this.client.mxid,\n            content: {\n                \"msgtype\": \"m.text\",\n                \"body\": text,\n            }\n        } as IRoomEvent;\n        this.pendingEvents.push(event);\n        this.emit(\"events\", this.getEvents());\n        callbackLocalEcho();\n\n        if (!this.isEncrypted()) {\n            const resp = await fetch(`${this.hostname}/_matrix/client/v3/rooms/${this.roomID}/send/m.room.message/${event.unsigned?.transaction_id}`, {\n                method: \"PUT\",\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                    \"Authorization\": `Bearer ${this.client.accessToken}`\n                },\n                body: JSON.stringify(event.content)\n            });\n            if (!resp.ok) {\n                this.deletePendingByEventID(event.event_id);\n                throw new Error(`Failed to send message: ${resp.status} ${resp.statusText}`);\n            }\n            const json = await resp.json();\n            this.deletePendingByEventID(event.event_id);\n            return json.event_id;\n        } else {\n            console.log(\"Sending encrypted message2\");\n            await this.e2ee.getMissingSessions();\n            await this.e2ee.shareKeysForRoom(this);\n            const encrypted = await this.e2ee.encryptRoomEvent(\n                new RoomId(this.roomID),\n                \"m.room.message\",\n                JSON.stringify(event.content)\n            );\n            const resp = await fetch(`${this.hostname}/_matrix/client/v3/rooms/${this.roomID}/send/m.room.encrypted/${event.unsigned?.transaction_id}`, {\n                method: \"PUT\",\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                    \"Authorization\": `Bearer ${this.client.accessToken}`\n                },\n                body: encrypted\n            });\n            if (!resp.ok) {\n                this.deletePendingByEventID(event.event_id);\n                throw new Error(`Failed to send message: ${resp.status} ${resp.statusText}`);\n            }\n            const json = await resp.json();\n            this.deletePendingByEventID(event.event_id);\n            return json.event_id;\n        }\n    }\n\n    public getJoinedMemberIDs(): string[] {\n        const members: string[] = [];\n        this.stateEvents.forEach((event) => {\n            if (event.type === \"m.room.member\" && event.content.membership === \"join\") {\n                members.push(event.state_key);\n            }\n        });\n        return members;\n    }\n\n    public getEncryptionSettings(): EncryptionSettings | undefined {\n        let settings: EncryptionSettings | undefined = undefined;\n        this.stateEvents.forEach((event) => {\n            if (event.type === \"m.room.encryption\" && event.state_key === \"\") {\n                if (!settings) {\n                    settings = new EncryptionSettings();\n                }\n                settings.algorithm = event.content.algorithm === \"m.megolm.v1.aes-sha2\" ? EncryptionAlgorithm.MegolmV1AesSha2 : EncryptionAlgorithm.OlmV1Curve25519AesSha2;\n                if (event.content.rotation_period_ms) {\n                    settings.rotationPeriod = BigInt(event.content.rotation_period_ms);\n                }\n                if (event.content.rotation_period_msgs) {\n                    settings.rotationPeriodMessages = BigInt(event.content.rotation_period_msgs);\n                }\n            }\n            if (event.type === \"m.room.history_visibility\" && event.state_key === \"\") {\n                if (!settings) {\n                    settings = new EncryptionSettings();\n                }\n                settings.historyVisibility = event.content.history_visibility;\n            }\n        });\n        if (settings) {\n            (settings as EncryptionSettings).onlyAllowTrustedDevices = false;\n        }\n        return settings;\n    }\n\n    public isJoined(): boolean {\n        let isJoined: boolean = false;\n        this.stateEvents.forEach((event) => {\n            if (event.type === \"m.room.member\" && event.state_key === this.client.mxid) {\n                isJoined = event.content.membership === \"join\";\n            }\n        });\n        return isJoined;\n    }\n}\n\nexport function useStateEvents(room?: Room) {\n    const [events, setEvents] = useState<IRoomStateEvent[]>(room?.getStateEvents() || []);\n\n    useEffect(() => {\n        if (room) {\n            setEvents(room?.getStateEvents() || []);\n            // Listen for event updates\n            const listenForStateEvents = (events: IRoomStateEvent[]) => {\n                setEvents(events);\n            };\n            room.on(\"state_events\", listenForStateEvents);\n            return () => {\n                room.off(\"state_events\", listenForStateEvents);\n            }\n        } else {\n            setEvents([]);\n        }\n    }, [room])\n    return events;\n}","import { MatrixClient } from \"./client\";\nimport { ISlidingSyncReq, ISlidingSyncResp, isDeleteOp, isInsertOp, isInvalidateOp, isSyncOp } from './api/slidingSync';\nimport EventEmitter from \"events\";\nimport { Room } from \"./room\";\nimport { OwnUser } from \"./ownUser\";\nimport { DeviceLists, UserId } from \"@mtrnord/matrix-sdk-crypto-js\";\nimport { IRoomEvent, IRoomStateEvent, isRoomStateEvent } from \"./api/events\";\n\nexport interface MatrixSlidingSyncEvents {\n    // Used to notify about changes to the room list\n    'rooms': (rooms: Set<Room>) => void;\n    //'delete': (changedCount: number) => void;\n}\n\nexport declare interface MatrixSlidingSync {\n    on<U extends keyof MatrixSlidingSyncEvents>(\n        event: U, listener: MatrixSlidingSyncEvents[U]\n    ): this;\n\n    emit<U extends keyof MatrixSlidingSyncEvents>(\n        event: U, ...args: Parameters<MatrixSlidingSyncEvents[U]>\n    ): boolean;\n}\n\nexport class MatrixSlidingSync extends EventEmitter {\n    private syncing = false;\n    private syncPos?: string;\n    private initialSync = true;\n    private lastRanges?: { [key: string]: number[][] };\n    private lastTxnID?: string;\n    private to_device_since?: string;\n    public mustUpdateTxnID = true;\n    public rooms: Set<Room> = new Set();\n    private abortController = new AbortController();\n\n    constructor(private client: MatrixClient, private user: OwnUser) { super() }\n\n    public applyStoredSyncInfo(syncInfo: {\n        userId: string;\n        syncPos?: string;\n        initialSync: boolean;\n        lastRanges?: {\n            [key: string]: number[][];\n        };\n        lastTxnID?: string;\n        to_device_since?: string;\n    }) {\n        this.syncPos = syncInfo.syncPos;\n        this.initialSync = syncInfo.initialSync;\n        this.lastRanges = syncInfo.lastRanges;\n        this.lastTxnID = syncInfo.lastTxnID;\n        this.to_device_since = syncInfo.to_device_since;\n    }\n\n    public logout() {\n        this.stopSync();\n        this.abortController.abort();\n        this.rooms = new Set();\n        this.initialSync = true;\n        this.syncPos = undefined;\n        this.to_device_since = undefined;\n    }\n\n    public resetAbortController() {\n        this.abortController = new AbortController();\n    }\n\n    public async startSync() {\n        // @ts-ignore\n        if (globalThis.IS_STORYBOOK) {\n            await new Promise(r => setTimeout(r, 5000));\n        }\n        if (!this.client.isLoggedIn) {\n            throw Error(\"Not logged in\");\n        }\n        if (!this.client.database) {\n            await this.client.createDatabase();\n        }\n        if (this.syncing) {\n            return;\n        }\n        this.syncing = true;\n        let retries = 0;\n        while (this.syncing) {\n            try {\n                await this.sync();\n            } catch (e) {\n                console.error(`Error: ${e}`);\n                if (retries > 5) {\n                    console.error(\"Too many retries, giving up\");\n                    this.stopSync();\n                    return;\n                }\n                // Sleep for 30 seconds\n                await new Promise(resolve => setTimeout(resolve, 30000));\n                console.warn(\"Retrying sync\");\n                retries++;\n            }\n        }\n    }\n\n    public stopSync() {\n        this.syncing = false;\n    }\n\n    private isIndexInRange(index: number, ranges: number[][]): boolean {\n        for (const r of ranges) {\n            if (r[0] < index && index <= r[1]) {\n                return true\n            }\n        }\n        return false\n    }\n\n    private shiftRight(listKey: string, ranges: number[][], hi: number, low: number) {\n        //     l   h\n        // 0,1,2,3,4 <- before\n        // 0,1,2,2,3 <- after, hi is deleted and low is duplicated\n        for (let i = hi - 1; i > low - 1; i--) {\n            if (this.isIndexInRange(i, ranges)) {\n                const roomObj = [...this.rooms].find(room => room.windowPos[listKey] === i + 1);\n                if (roomObj) {\n                    roomObj.windowPos[listKey] = (i);\n                }\n            }\n        }\n    }\n\n    private shiftLeft(listKey: string, ranges: number[][], hi: number, low: number) {\n        //     l   h\n        // 0,1,2,3,4 <- before\n        // 0,1,3,4,4 <- after, low is deleted and hi is duplicated\n        for (let i = low + 1; i < hi + 1; i++) {\n            if (this.isIndexInRange(i, ranges)) {\n                const roomObj = [...this.rooms].find(room => room.windowPos[listKey] === i - 1);\n                if (roomObj) {\n                    roomObj.windowPos[listKey] = (i);\n                }\n            }\n        }\n\n    }\n\n    private async removeEntry(listKey: string, ranges: number[][], index: number) {\n        // work out the max index\n        let max = -1;\n        const indexes = [...this.rooms].map(room => room.windowPos[listKey]);\n        for (const n in indexes) {\n            if (Number(n) > max) {\n                max = Number(n);\n            }\n        }\n        // TODO: Unclear if this is needed or working. Probably wrong?\n        // const roomObj = [...this.rooms].find(room => room.windowPos[listKey] === index);\n        // if (roomObj) {\n        //     const tx = this.database?.transaction('rooms', 'readwrite');\n        //     await tx?.store.delete(roomObj.roomID);\n        //     await tx?.done;\n        //     this.rooms.delete(roomObj)\n        // }\n        if (max < 0 || index > max) {\n            return;\n        }\n        // Everything higher than the gap needs to be shifted left.\n        this.shiftLeft(listKey, ranges, max, index);\n    }\n\n    private addEntry(listKey: string, ranges: number[][], index: number): void {\n        // work out the max index\n        let max = -1;\n        const indexes = [...this.rooms].map(room => room.windowPos[listKey]);\n        for (const n in indexes) {\n            if (Number(n) > max) {\n                max = Number(n);\n            }\n        }\n        if (max < 0 || index > max) {\n            return;\n        }\n        // Everything higher than the gap needs to be shifted right, +1 so we don't delete the highest element\n        this.shiftRight(listKey, ranges, max + 1, index);\n    }\n\n    private async sync() {\n        if (!this.client.isLoggedIn) {\n            throw Error(\"Not logged in\");\n        }\n        if (!this.user.slidingSyncHostname) {\n            throw Error(\"Hostname must be set first\");\n        }\n\n        // TODO: This might cause future issues\n        Promise.all([this.user.e2ee.sendIdentifyAndOneTimeKeys()]).catch(e => {\n            console.error(\"Error sending identify and one time keys\", e);\n        });\n\n        // This is the initial sync case for each list\n        const lists_ranges: {\n            \"overview\": number[][];\n            \"spaces\": number[][];\n            [key: string]: number[][];\n        } = {\n            \"overview\": [[0, 20]],\n            \"spaces\": [[0, 20]]\n        };\n        for (const space of this.client.spaceOpen) {\n            if (space === \"other\") { continue }\n            if (space === \"dm\") { continue }\n            lists_ranges[space] = [[0, 20]];\n        }\n\n        let timeline_limit = 1;\n        let subscription_limit = 10;\n        if (!this.initialSync) {\n            for (const list in lists_ranges) {\n                // Set higher timeline limit for subsequent syncs\n                timeline_limit = 10;\n                subscription_limit = 50;\n                // Calculate overlap between this.roomsInView and this.roomToRoomID and then\n                // calculate the ranges for each list\n                let rawRangeInView = new Set([...this.rooms]\n                    .filter(room => this.client.roomsInView.includes(room.roomID))\n                    .map(room => room.windowPos[list]).sort().filter(x => x !== undefined && x !== null))\n\n                if (this.client.getSpaces().find(r => r.roomID === list)) {\n                    // If we are syncing the spaces list, we need to use the spaceInView list instead\n                    rawRangeInView = new Set([...this.rooms]\n                        .filter(room => this.client.spacesInView.includes(room.roomID))\n                        .map(room => room.windowPos[list]).sort().filter(x => x !== undefined && x !== null))\n                }\n\n                if (rawRangeInView.size !== 0) {\n                    const minimum = Math.min(...rawRangeInView);\n                    const maximum = Math.max(...rawRangeInView);\n\n                    lists_ranges[list] = [[Math.max(minimum - 10, 0), maximum + 10]];\n                }\n            }\n            lists_ranges[\"e2ee\"] = lists_ranges[\"overview\"];\n        }\n\n\n        if (this.lastRanges && Object.entries(lists_ranges).toString() !== Object.entries(this.lastRanges).toString()) {\n            console.log(\"Ranges changed, resetting sync txn_id\", lists_ranges)\n            this.lastRanges = lists_ranges;\n            this.lastTxnID = Date.now().toString();\n        }\n\n        if (!this.lastRanges) {\n            this.lastRanges = lists_ranges;\n            this.lastTxnID = Date.now().toString();\n        }\n\n        if (this.mustUpdateTxnID) {\n            this.lastTxnID = Date.now().toString();\n            this.mustUpdateTxnID = false;\n        }\n\n\n        let url = `${this.user.slidingSyncHostname}/_matrix/client/unstable/org.matrix.msc3575/sync?timeout=5000`;\n        if (this.syncPos) {\n            url = `${this.user.slidingSyncHostname}/_matrix/client/unstable/org.matrix.msc3575/sync?timeout=5000&pos=${this.syncPos}`\n        }\n\n        const body: ISlidingSyncReq = {\n            // allows clients to know what request params reached the server,\n            // functionally similar to txn IDs on /send for events.\n            txn_id: this.lastTxnID,\n\n            // a delta token to remember information between sessions.\n            // See \"Bandwidth optimisations for persistent clients\" for more information.\n            // TODO: This isnt implemented anywhere yet\n            //delta_token: \"opaque-server-provided-string\",\n\n            // Sliding Window API\n            lists: {\n                \"spaces\": {\n                    ranges: this.lastRanges[\"spaces\"],\n                    // slow_get_all_rooms: true,\n                    sort: [\"by_name\"],\n                    required_state: [\n                        // needed to build sections\n                        [\"m.space.child\", \"*\"],\n                        [\"m.space.parent\", \"*\"],\n                        [\"m.room.create\", \"\"],\n                        [\"m.room.tombstone\", \"\"],\n                        // Room Avatar\n                        [\"m.room.avatar\", \"*\"],\n                        // Room Topic\n                        [\"m.room.topic\", \"*\"],\n                        // Request only the m.room.member events required to render events in the timeline.\n                        // The \"$LAZY\" value is a special sentinel value meaning \"lazy loading\" and is only valid for\n                        // the \"m.room.member\" event type. For more information on the semantics, see \"Lazy-Loading Room Members\".\n                        [\"m.room.member\", \"$LAZY\"],\n                        // E2EE\n                        [\"m.room.encryption\", \"\"],\n                        [\"m.room.history_visibility\", \"\"],\n                    ],\n                    timeline_limit: 0,\n                    filters: {\n                        room_types: [\"m.space\"]\n                    }\n                },\n                \"overview\": {\n                    ranges: this.lastRanges[\"overview\"],\n                    sort: [\"by_notification_level\", \"by_recency\", \"by_name\"],\n                    required_state: [\n                        // needed to build sections\n                        [\"m.space.child\", \"*\"],\n                        [\"m.space.parent\", \"*\"],\n                        [\"m.room.create\", \"\"],\n                        [\"m.room.tombstone\", \"\"],\n                        // Room Avatar\n                        [\"m.room.avatar\", \"*\"],\n                        // Room Topic\n                        [\"m.room.topic\", \"*\"],\n                        // Request only the m.room.member events required to render events in the timeline.\n                        // The \"$LAZY\" value is a special sentinel value meaning \"lazy loading\" and is only valid for\n                        // the \"m.room.member\" event type. For more information on the semantics, see \"Lazy-Loading Room Members\".\n                        [\"m.room.member\", \"$LAZY\"],\n                        // E2EE\n                        [\"m.room.encryption\", \"\"],\n                        [\"m.room.history_visibility\", \"\"],\n                    ],\n                    timeline_limit: timeline_limit,\n                    filters: {\n                        not_room_types: [\"m.space\"],\n                    }\n                },\n                \"e2ee\": {\n                    ranges: this.lastRanges[\"overview\"],\n                    sort: [\"by_notification_level\", \"by_recency\", \"by_name\"],\n                    required_state: [\n                        // needed to build sections\n                        [\"m.space.child\", \"*\"],\n                        [\"m.space.parent\", \"*\"],\n                        [\"m.room.create\", \"\"],\n                        [\"m.room.tombstone\", \"\"],\n                        // Room Avatar\n                        [\"m.room.avatar\", \"*\"],\n                        // Room Topic\n                        [\"m.room.topic\", \"*\"],\n                        [\"m.room.member\", \"*\"],\n                        // E2EE\n                        [\"m.room.encryption\", \"\"],\n                        [\"m.room.history_visibility\", \"\"],\n                    ],\n                    timeline_limit: timeline_limit,\n                    filters: {\n                        not_room_types: [\"m.space\"],\n                        is_encrypted: true,\n                    }\n                },\n            },\n            bump_event_types: [\"m.room.message\", \"m.room.encrypted\"],\n\n            extensions: {\n                e2ee: {\n                    enabled: true,\n                },\n                to_device: {\n                    enabled: true,\n                    since: this.to_device_since\n                },\n                typing: {\n                    enabled: true,\n                    lists: [\"overview\", \"e2ee\"],\n                },\n                receipts: {\n                    enabled: true,\n                    lists: [\"overview\", \"e2ee\"],\n                }\n            },\n        };\n\n        for (const space of this.client.spaceOpen) {\n            if (space === \"other\") { continue }\n            if (space === \"dm\") { continue }\n            if (!body.lists) {\n                body.lists = {};\n            }\n            body.lists[space] = {\n                slow_get_all_rooms: true,\n                ranges: this.lastRanges[space],\n                sort: [\"by_notification_level\", \"by_recency\", \"by_name\"],\n                required_state: [\n                    // needed to build sections\n                    [\"m.space.child\", \"*\"],\n                    [\"m.space.parent\", \"*\"],\n                    [\"m.room.create\", \"\"],\n                    [\"m.room.tombstone\", \"\"],\n                    // Room Avatar\n                    [\"m.room.avatar\", \"*\"],\n                    // Room Topic\n                    [\"m.room.topic\", \"*\"],\n                    // Request only the m.room.member events required to render events in the timeline.\n                    // The \"$LAZY\" value is a special sentinel value meaning \"lazy loading\" and is only valid for\n                    // the \"m.room.member\" event type. For more information on the semantics, see \"Lazy-Loading Room Members\".\n                    [\"m.room.member\", \"$LAZY\"],\n                    // E2EE\n                    [\"m.room.encryption\", \"\"],\n                    [\"m.room.history_visibility\", \"\"],\n                ],\n                timeline_limit: timeline_limit,\n                filters: {\n                    \"spaces\": [space]\n                }\n            }\n        }\n\n        if (this.client.currentRoom) {\n            body.room_subscriptions = {};\n            body.room_subscriptions[this.client.currentRoom] = {\n                sort: [\"by_notification_level\", \"by_recency\", \"by_name\"],\n                required_state: [\n                    // needed to build sections\n                    [\"m.space.child\", \"*\"],\n                    [\"m.space.parent\", \"*\"],\n                    [\"m.room.create\", \"\"],\n                    [\"m.room.tombstone\", \"\"],\n                    // Room Avatar\n                    [\"m.room.avatar\", \"*\"],\n                    // Room Topic\n                    [\"m.room.topic\", \"*\"],\n                    // Request only the m.room.member events required to render events in the timeline.\n                    // The \"$LAZY\" value is a special sentinel value meaning \"lazy loading\" and is only valid for\n                    // the \"m.room.member\" event type. For more information on the semantics, see \"Lazy-Loading Room Members\".\n                    [\"m.room.member\", \"$LAZY\"],\n                    // E2EE\n                    [\"m.room.encryption\", \"\"],\n                    [\"m.room.history_visibility\", \"\"],\n                ],\n                timeline_limit: subscription_limit,\n                filters: {}\n            }\n        }\n\n        const resp = await fetch(url, {\n            method: \"POST\",\n            signal: this.abortController.signal,\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"Authorization\": `Bearer ${this.user.access_token}`\n            },\n            body: JSON.stringify(body)\n        });\n        if (!resp.ok) {\n            if (resp.status === 400) {\n                if ((await resp.json()).errcode === \"M_UNKNOWN_POS\") {\n                    this.syncPos = undefined;\n                    const syncInfoTX = this.client.database?.transaction('syncInfo', 'readwrite');\n                    await syncInfoTX?.store.put({\n                        userId: this.user.mxid!,\n                        syncPos: this.syncPos,\n                        initialSync: this.initialSync,\n                        lastRanges: this.lastRanges,\n                        lastTxnID: this.lastTxnID,\n                    });\n                    await syncInfoTX?.done;\n                }\n                return;\n            } else if (resp.status === 401) {\n                await this.logout();\n                console.error(resp);\n                console.error(\"Error syncing. See console for error.\");\n            } else {\n                throw new Error(`Error syncing. See console for error:\\n\\n${await resp.text()}`);\n            }\n        }\n        const json = await resp.json() as ISlidingSyncResp;\n        this.syncPos = json.pos;\n\n        if (json.extensions?.to_device) {\n            await this.user.e2ee.receiveSyncData(\n                JSON.stringify(json.extensions.to_device.events || []),\n                new DeviceLists(\n                    json.extensions.e2ee?.device_lists?.changed?.map(\n                        user_id => new UserId(user_id)\n                    ),\n                    json.extensions.e2ee?.device_lists?.left?.map(\n                        user_id => new UserId(user_id)\n                    )\n                ),\n                new Map(Object.entries(json.extensions.e2ee?.device_one_time_keys_count || [])),\n                new Set(json.extensions.e2ee?.device_unused_fallback_key_types)\n            )\n            this.to_device_since = json.extensions.to_device.next_batch;\n        }\n\n        await this.user.e2ee.sendIdentifyAndOneTimeKeys();\n\n\n        const syncInfoTX = this.client.database?.transaction('syncInfo', 'readwrite');\n        await syncInfoTX?.store.put({\n            userId: this.user.mxid!,\n            syncPos: this.syncPos,\n            initialSync: this.initialSync,\n            lastRanges: this.lastRanges,\n            lastTxnID: this.lastTxnID,\n            to_device_since: this.to_device_since,\n        });\n        await syncInfoTX?.done;\n\n        let gapIndex = -1;\n        for (const listKey in json.lists) {\n            const list = json.lists[listKey];\n            if (list.ops) {\n                for (const op of list.ops) {\n                    if (isSyncOp(op)) {\n                        const tx = this.client.database?.transaction('rooms', 'readwrite');\n                        for (let i = op.range[0]; i <= op.range[1]; i++) {\n                            const roomID = op.room_ids[i - op.range[0]];\n                            if (!roomID) {\n                                break; // we are at the end of list\n                            }\n\n                            // Check if we already know this room and skip if we do. This is needed since we have 2 lists.\n                            // The db would already do this but the obj list doesn't (even though its a Set. Thats a mystery yet to solve)\n                            const roomObj = [...this.rooms].find(room => room.roomID === roomID);\n                            if (roomObj) {\n                                roomObj.windowPos[listKey] = i;\n                                continue;\n                            }\n\n                            const newRoom = new Room(roomID, this.user.hostname!, this.client, this.user.e2ee);\n                            // We start to remember the Room now.\n                            newRoom.setName(roomID);\n                            newRoom.windowPos[listKey] = i;\n\n                            this.rooms.add(newRoom);\n                            await tx?.store.put({\n                                windowPos: newRoom.windowPos,\n                                roomID: newRoom.roomID,\n                                name: newRoom.getName(),\n                                notification_count: newRoom.getNotificationCount(),\n                                highlight_count: newRoom.getNotificationHighlightCount(),\n                                joined_count: newRoom.getJoinedCount(),\n                                invited_count: newRoom.getInvitedCount(),\n                                avatarUrl: newRoom.getAvatarURL(),\n                                isSpace: newRoom.isSpace(),\n                                isDM: newRoom.isDM(),\n                                stateEvents: newRoom.getStateEvents(),\n                                events: newRoom.getEvents(),\n                            });\n                        }\n                        await tx?.done;\n                    } else if (isInsertOp(op)) {\n                        console.log(\"Got INSERT OP\", op);\n                        const roomObj = [...this.rooms].find(room => room.windowPos[listKey] === op.index);\n                        if (roomObj) {\n                            if (gapIndex < 0) {\n                                // we haven't been told where to shift from, so make way for a new room entry.\n                                this.addEntry(listKey, this.lastRanges[listKey], op.index);\n                            } else if (gapIndex > op.index) {\n                                // the gap is further down the list, shift every element to the right\n                                // starting at the gap so we can just shift each element in turn:\n                                // [A,B,C,_] gapIndex=3, op.index=0\n                                // [A,B,C,C] i=3\n                                // [A,B,B,C] i=2\n                                // [A,A,B,C] i=1\n                                // Terminate. We'll assign into op.index next.\n                                this.shiftRight(listKey, this.lastRanges[listKey], gapIndex, op.index);\n                            } else if (gapIndex < op.index) {\n                                // the gap is further up the list, shift every element to the left\n                                // starting at the gap so we can just shift each element in turn\n                                this.shiftLeft(listKey, this.lastRanges[listKey], op.index, gapIndex);\n                            }\n                        }\n                        gapIndex = -1;\n                        const tx = this.client.database?.transaction('rooms', 'readwrite');\n                        // We start to remember the Room now.\n                        const foundRoom = [...this.rooms].find(room => room.roomID === op.room_id);\n                        if (foundRoom) {\n                            foundRoom.windowPos[listKey] = op.index;\n                            await tx?.store.put({\n                                windowPos: foundRoom.windowPos,\n                                roomID: foundRoom.roomID,\n                                name: foundRoom.getName(),\n                                notification_count: foundRoom.getNotificationCount(),\n                                highlight_count: foundRoom.getNotificationHighlightCount(),\n                                joined_count: foundRoom.getJoinedCount(),\n                                invited_count: foundRoom.getInvitedCount(),\n                                avatarUrl: foundRoom.getAvatarURL(),\n                                isSpace: foundRoom.isSpace(),\n                                isDM: foundRoom.isDM(),\n                                stateEvents: foundRoom.getStateEvents(),\n                                events: foundRoom.getEvents(),\n                            });\n                        } else {\n                            const roomFromDB = await tx?.store.get(op.room_id);\n                            let newRoom = new Room(op.room_id, this.user.hostname!, this.client, this.user.e2ee);\n                            newRoom.setName(op.room_id);\n                            newRoom.windowPos[listKey] = op.index;\n                            if (roomFromDB) {\n                                console.warn(\"Room in db but not in obj list.\", op.room_id, \"Updating obj list.\");\n                                newRoom = new Room(op.room_id, this.user.hostname!, this.client, this.user.e2ee)\n                                newRoom.setName(roomFromDB.name);\n                                newRoom.setNotificationCount(roomFromDB.notification_count);\n                                newRoom.setNotificationHighlightCount(roomFromDB.highlight_count);\n                                newRoom.setJoinedCount(roomFromDB.joined_count);\n                                newRoom.setInvitedCount(roomFromDB.invited_count);\n                                newRoom.setDM(roomFromDB.isDM || false);\n                            }\n                            this.rooms.add(newRoom);\n                            await tx?.store.put({\n                                windowPos: newRoom.windowPos,\n                                roomID: newRoom.roomID,\n                                name: newRoom.getName(),\n                                notification_count: newRoom.getNotificationCount(),\n                                highlight_count: newRoom.getNotificationHighlightCount(),\n                                joined_count: newRoom.getJoinedCount(),\n                                invited_count: newRoom.getInvitedCount(),\n                                avatarUrl: newRoom.getAvatarURL(),\n                                isSpace: newRoom.isSpace(),\n                                isDM: newRoom.isDM(),\n                                stateEvents: newRoom.getStateEvents(),\n                                events: newRoom.getEvents(),\n                            });\n                        }\n\n                        const roomIDs2 = [...this.rooms].map(room => room.roomID);\n                        // Check if we generated any duplicates and log them.\n                        const duplicates = roomIDs2.filter((item, index) => roomIDs2.indexOf(item) != index);\n                        if (duplicates.length > 0) {\n                            console.error(\"Duplicates found\", duplicates);\n                        }\n                        await tx?.done;\n                    } else if (isDeleteOp(op)) {\n                        console.log(\"Got DELETE OP\", op);\n\n                        if (gapIndex !== -1) {\n                            // we already have a DELETE operation to process, so process it.\n                            await this.removeEntry(listKey, this.lastRanges[listKey], gapIndex);\n                        }\n                        gapIndex = op.index;\n                    } else if (isInvalidateOp(op)) {\n                        // TODO: Figure out if this is needed in reality\n                        // const tx = this.database?.transaction('rooms', 'readwrite');\n                        // for (let i = op.range[0]; i <= op.range[1]; i++) {\n                        //     // We shall first forget about these and \"startover\"\n                        //     const roomObj = [...this.rooms].find(room => room.windowPos[listKey] === i);\n                        //     if (roomObj) {\n                        //         await tx?.store.delete(roomObj.roomID);\n                        //         this.rooms.delete(roomObj)\n                        //     }\n                        // }\n                        // await tx?.done;\n                    }\n                }\n                if (gapIndex !== -1) {\n                    // we already have a DELETE operation to process, so process it\n                    // Everything higher than the gap needs to be shifted left.\n                    await this.removeEntry(listKey, this.lastRanges[listKey], gapIndex);\n                }\n            }\n        }\n        for (const roomID in json.rooms) {\n            const room = json.rooms[roomID];\n            const name = room.name;\n            const notification_count = room.notification_count;\n            const notification_highlight_count = room.highlight_count;\n            const joined_count = room.joined_count;\n            const invited_count = room.invited_count;\n            const events = room.timeline;\n            const state_events = events?.filter(event => isRoomStateEvent(event)).map(event => event as IRoomStateEvent);\n            const normal_events = events?.filter(event => !isRoomStateEvent(event)).map(event => event as IRoomEvent);\n            const required_state = room.required_state;\n            const is_dm = room.is_dm;\n\n            let roomObj = [...this.rooms].find(room => room.roomID === roomID);\n            if (!roomObj) {\n                // Warn, check in the db and if that fails, create a new one.\n                console.warn(\"Could not find roomObj for roomID:\", roomID);\n\n                const tx = this.client.database?.transaction('rooms', 'readwrite');\n                const roomFromDB = await tx?.store.get(roomID);\n                await tx?.done;\n\n                if (roomFromDB) {\n                    console.warn(\"Room in db but not in obj list.\", roomID, \"Updating obj list.\");\n\n                    roomObj = new Room(roomID, this.user.hostname!, this.client, this.user.e2ee);\n                    roomObj.setName(roomFromDB.name);\n                    roomObj.setNotificationCount(roomFromDB.notification_count);\n                    roomObj.setNotificationHighlightCount(roomFromDB.highlight_count);\n                    roomObj.setJoinedCount(roomFromDB.joined_count);\n                    roomObj.setInvitedCount(roomFromDB.invited_count);\n                    roomObj.setDM(roomFromDB.isDM || false);\n                    if (roomFromDB.events) {\n                        roomObj.addEvents(roomFromDB.events);\n                    }\n                    if (roomFromDB.stateEvents) {\n                        roomObj.addStateEvents(roomFromDB.stateEvents);\n                    }\n                    roomObj.windowPos = roomFromDB.windowPos;\n                } else {\n                    console.warn(\"Could not find room in db. Creating new one.\");\n                    roomObj = new Room(roomID, this.user.hostname!, this.client, this.user.e2ee);\n                    this.rooms.add(roomObj);\n                }\n            }\n\n            if (name) {\n                roomObj.setName(name);\n            }\n            roomObj.setNotificationCount(notification_count);\n            roomObj.setNotificationHighlightCount(notification_highlight_count);\n            roomObj.setJoinedCount(joined_count);\n            roomObj.setInvitedCount(invited_count);\n            if (normal_events) {\n                roomObj.addEvents(normal_events);\n            }\n            if (required_state) {\n                roomObj.addStateEvents(required_state);\n            }\n            if (state_events) {\n                roomObj.addStateEvents(state_events);\n            }\n            if (required_state || state_events) {\n                if (roomObj.isEncrypted() && roomObj.isJoined()) {\n                    const joinEvents = [...(required_state || []), ...(state_events || [])]\n                        .filter(event => event.type === \"m.room.member\" && event.content.membership === \"join\");\n                    const memberIds = joinEvents.map(event => new UserId(event.state_key));\n                    await this.user.e2ee.updateTrackedUsers(memberIds);\n                }\n            }\n            if (is_dm) {\n                roomObj.setDM(is_dm);\n            }\n\n\n            const tx = this.client.database?.transaction('rooms', 'readwrite');\n            // Write to database\n            await tx?.store.put({\n                windowPos: roomObj.windowPos,\n                roomID: roomObj.roomID,\n                name: roomObj.getName(),\n                notification_count: roomObj.getNotificationCount(),\n                highlight_count: roomObj.getNotificationHighlightCount(),\n                joined_count: roomObj.getJoinedCount(),\n                invited_count: roomObj.getInvitedCount(),\n                events: roomObj.getPureEvents(),\n                stateEvents: roomObj.getStateEvents(),\n                avatarUrl: roomObj.getAvatarURL(),\n                isSpace: roomObj.isSpace(),\n                isDM: roomObj.isDM(),\n            });\n            await tx?.done\n        }\n\n        if (this.initialSync) {\n            this.initialSync = false;\n            console.log(\"initialSyncComplete\");\n        }\n        if (json.rooms && Object.keys(json.rooms).length > 0) {\n            this.emit(\"rooms\", this.rooms);\n        }\n    }\n}","import {\n    createContext,\n    useContext,\n    useEffect,\n    useState\n} from \"react\";\nimport { OwnUser } from \"./ownUser\";\nimport {\n    IProfileInfo,\n    IRateLimitError,\n} from \"./api/apiTypes\";\nimport { IRoomEvent, IRoomStateEvent } from './api/events';\nimport { Room } from \"./room\";\nimport EventEmitter from \"events\";\nimport {\n    DBSchema,\n    IDBPDatabase,\n    deleteDB,\n    openDB\n} from \"idb\";\nimport { DeviceId, UserId } from \"@mtrnord/matrix-sdk-crypto-js\";\nimport { MatrixSlidingSync } from \"./slidingSync\";\n\nexport interface MatrixClientEvents {\n    // Used to notify about changes to the room list\n    'rooms': (rooms: Set<Room>) => void;\n    //'delete': (changedCount: number) => void;\n}\n\nexport declare interface MatrixClient {\n    on<U extends keyof MatrixClientEvents>(\n        event: U, listener: MatrixClientEvents[U]\n    ): this;\n\n    emit<U extends keyof MatrixClientEvents>(\n        event: U, ...args: Parameters<MatrixClientEvents[U]>\n    ): boolean;\n}\n\ninterface MatrixDB extends DBSchema {\n    rooms: {\n        // Same as roomToRoom map\n        key: string;\n        value: {\n            windowPos: {\n                [list: string]: number;\n            };\n            roomID: string;\n            name: string;\n            notification_count: number;\n            highlight_count: number;\n            joined_count: number;\n            invited_count: number;\n            events?: IRoomEvent[];\n            stateEvents?: IRoomStateEvent[];\n            avatarUrl?: string;\n            isSpace: boolean;\n            isDM?: boolean;\n        };\n    };\n    loginInfo: {\n        // login info\n        value: {\n            userId: string;\n            device_id?: string;\n            hostname?: string;\n            slidingSyncHostname?: string;\n            access_token?: string;\n            displayName?: string;\n            avatarUrl?: string;\n        };\n        // User ID\n        key: string;\n    };\n    syncInfo: {\n        // sync info\n        value: {\n            userId: string;\n            syncPos?: string;\n            initialSync: boolean;\n            lastRanges?: { [key: string]: number[][] }; // [start, end]\n            lastTxnID?: string;\n            to_device_since?: string;\n        };\n        // User ID\n        key: string;\n    }\n}\n\nexport class MatrixClient extends EventEmitter {\n    private static _instance: MatrixClient;\n    public roomsInView: string[] = [];\n    public spacesInView: string[] = [];\n    public spaceOpen: string[] = [];\n    public database?: IDBPDatabase<MatrixDB>;\n    private profileInfo?: IProfileInfo;\n    public currentRoom?: string;\n    private user: OwnUser = new OwnUser(this);\n    private sync: MatrixSlidingSync = new MatrixSlidingSync(this, this.user);\n\n    public get accessToken(): string | undefined {\n        return this.user.access_token;\n    }\n\n    public get isLoggedIn(): boolean {\n        return this.user.access_token !== undefined;\n    }\n\n    public get mxid(): string | undefined {\n        return this.user.mxid;\n    }\n\n    private onSyncRooms(rooms: Set<Room>) {\n        this.emit(\"rooms\", rooms);\n    }\n\n    public async passwordLogin(username: string, password: string) {\n        await this.user.passwordLogin(username, password);\n        this.sync.on(\"rooms\", (rooms) => this.onSyncRooms(rooms));\n    }\n\n    public convertMXC(url: string, size?: number): string {\n        if (size) {\n            return `${this.user.hostname}/_matrix/media/v3/thumbnail/${url.substring(6)}?width=${size}&height=${size}&method=scale`;\n        }\n        return `${this.user.hostname}/_matrix/media/v3/download/${url.substring(6)}`;\n    }\n\n    public setCurrentRoom(roomID?: string) {\n        if (roomID !== this.currentRoom) {\n            this.currentRoom = roomID;\n            console.log(\"Current room changed to\", roomID, \"restarting sync\");\n            this.sync.mustUpdateTxnID = true;\n            //this.abortController.abort();\n            //this.abortController = new AbortController();\n        }\n    }\n\n    public static async Instance() {\n        let instance = this._instance;\n        // Load from database if not done\n        if (!instance) {\n            instance = (this._instance = new this());\n            if (!instance.database) {\n                await instance.createDatabase();\n            }\n            const tx = instance.database?.transaction('loginInfo', 'readonly');\n            // We dont know the mxid so we just get all and use the first. In theory this allows for multiple accounts\n            const loginInfo = await tx?.store.getAll();\n            await tx?.done;\n            if (loginInfo && loginInfo.length > 0) {\n                instance.user.mxid = loginInfo[0].userId;\n                instance.user.hostname = loginInfo[0].hostname;\n                instance.user.slidingSyncHostname = loginInfo[0].slidingSyncHostname;\n                instance.user.access_token = loginInfo[0].access_token;\n                instance.user.device_id = loginInfo[0].device_id;\n                instance.profileInfo = {\n                    avatar_url: loginInfo[0].avatarUrl,\n                    displayname: loginInfo[0].displayName,\n                };\n                if (instance.user.mxid && instance.user.hostname && instance.user.access_token && instance.user.device_id) {\n                    await instance.user.e2ee.initOlmMachine(new UserId(instance.user.mxid), new DeviceId(instance.user.device_id));\n                }\n\n                // Load sync info\n                const syncTx = instance.database?.transaction('syncInfo', 'readonly');\n                const syncInfo = await syncTx?.store.get(instance.user.mxid!);\n                await syncTx?.done;\n\n                if (syncInfo) {\n                    instance.sync.applyStoredSyncInfo(syncInfo);\n                }\n\n                // Load rooms\n                const roomTx = instance.database?.transaction('rooms', 'readonly');\n                const rooms = await roomTx?.store.getAll();\n                await roomTx?.done;\n\n                if (rooms) {\n                    instance.sync.rooms = new Set(rooms.map(room => {\n                        const roomObj = new Room(room.roomID, instance.user.hostname!, instance, instance.user.e2ee);\n                        roomObj.windowPos = room.windowPos;\n                        roomObj.setInvitedCount(room.invited_count);\n                        roomObj.setJoinedCount(room.joined_count);\n                        roomObj.setNotificationCount(room.notification_count);\n                        roomObj.setNotificationHighlightCount(room.highlight_count);\n                        roomObj.setName(room.name);\n                        if (room.events) {\n                            roomObj.addEvents(room.events);\n                        }\n                        if (room.stateEvents) {\n                            roomObj.addStateEvents(room.stateEvents);\n                        }\n                        if (room.isDM) {\n                            roomObj.setDM(room.isDM);\n                        }\n                        return roomObj;\n                    }))\n                    instance.emit(\"rooms\", instance.sync.rooms);\n                }\n            }\n            instance.setMaxListeners(60);\n            instance.sync.on(\"rooms\", (rooms) => instance.onSyncRooms(rooms));\n        }\n\n\n        return instance;\n    }\n\n    public async createDatabase() {\n        this.database = await openDB<MatrixDB>(\"matrix\", 4, {\n            upgrade(db, oldVersion) {\n                if (oldVersion < 1) {\n                    if (db.objectStoreNames.contains(\"rooms\")) {\n                        db.deleteObjectStore(\"rooms\");\n                    }\n                    //if (db.objectStoreNames.contains(\"loginInfo\")) {\n                    //    db.deleteObjectStore(\"loginInfo\");\n                    //}\n                    if (db.objectStoreNames.contains(\"syncInfo\")) {\n                        db.deleteObjectStore(\"syncInfo\");\n                    }\n                    db.createObjectStore('rooms', { keyPath: 'roomID' });\n                    db.createObjectStore('loginInfo', { keyPath: 'userId' });\n                    db.createObjectStore('syncInfo', { keyPath: 'userId' });\n                }\n            }\n        });\n    }\n\n    public async decryptRoomEvent(roomID: string, event: IRoomEvent): Promise<IRoomEvent> {\n        if (!this.isLoggedIn) {\n            throw Error(\"Not logged in\");\n        }\n        const decryptedEvent = this.user.e2ee.decryptRoomEvent(roomID, event);\n        return decryptedEvent;\n    }\n\n    public async logout() {\n        this.sync.logout();\n        this.sync.off(\"rooms\", this.onSyncRooms);\n        await this.user.logout();\n        this.user.e2ee.logoutE2ee();\n        if (this.user.mxid) {\n            const syncInfoTX = this.database?.transaction('syncInfo', 'readwrite');\n            await syncInfoTX?.store.delete(this.user.mxid);\n            await syncInfoTX?.done;\n            const loginInfoTX = this.database?.transaction('loginInfo', 'readwrite');\n            await loginInfoTX?.store.delete(this.user.mxid);\n            await loginInfoTX?.done;\n        }\n        const roomTX = this.database?.transaction('rooms', 'readwrite');\n        await roomTX?.store.clear();\n        await roomTX?.done;\n        this.user.mxid = undefined;\n        this.sync.resetAbortController();\n        await deleteDB(\"cetirizine-crypto\", {\n            blocked() {\n                location.reload();\n            },\n        });\n    }\n\n    /**\n     * addInViewRoom\n     * \n     * Tells the sync that a room with a certain roomID is inView.\n     */\n    public addInViewRoom(roomID: string) {\n        this.roomsInView.push(roomID);\n    }\n\n    /**\n     * removeInViewRoom\n     * \n     * Tells the sync that a room isn't in the room anymore\n     */\n    public removeInViewRoom(roomID: string) {\n        this.roomsInView = this.roomsInView.filter(room => room !== roomID);\n    }\n\n    public addInViewSpace(roomID: string) {\n        this.spacesInView.push(roomID);\n    }\n\n    public removeInViewSpace(roomID: string) {\n        this.spacesInView = this.spacesInView.filter(room => room !== roomID);\n    }\n\n    public addSpaceOpen(roomID: string) {\n        if (roomID === \"other\") {\n            return;\n        }\n        this.spaceOpen.push(roomID);\n\n        console.log(\"Space opened\", roomID, \"restarting sync\");\n        this.sync.mustUpdateTxnID = true;\n        //this.abortController.abort();\n        //this.abortController = new AbortController();\n    }\n\n    public removeSpaceOpen(roomID: string) {\n        if (roomID === \"other\") {\n            return;\n        }\n        this.spaceOpen = this.spaceOpen.filter(room => room !== roomID);\n        this.sync.mustUpdateTxnID = true;\n\n        // We intentionally do not restart the sync here since it will update in the next sync anyway.\n    }\n\n    public getRooms(): Set<Room> {\n        return this.sync.rooms;\n    }\n\n    public getSpaces(): Room[] {\n        return [...this.sync.rooms].filter(room => room.isSpace() && !room.isTombstoned()).sort((a: Room, b: Room) => {\n            if (a.getName() < b.getName()) {\n                return -1;\n            }\n            if (a.getName() > b.getName()) {\n                return 1;\n            }\n            return 0;\n        });\n    }\n\n    public getSpacesWithRooms(): Set<{\n        spaceRoom: Room, children: Set<Room>\n    }> {\n        const spaces = this.getSpaces();\n        const result: Set<{\n            spaceRoom: Room, children: Set<Room>\n        }> = new Set();\n        // Find children of spaces\n        for (const space of spaces) {\n            const childrenIDs = space.getSpaceChildrenIDs();\n\n            const children = new Set([...this.getRooms()].filter(room => childrenIDs.includes(room.roomID)));\n\n            result.add({\n                spaceRoom: space,\n                children: children,\n            });\n        }\n        // Find spaces of parents\n        // Check parents of each room and if we have a parent make sure to add it to the result unless already added\n        for (const room of this.getRooms()) {\n            if (room.isSpace() || room.isTombstoned()) {\n                continue;\n            }\n            const parents = room.getSpaceParentIDs();\n            for (const parent of parents) {\n                const parentObj = [...this.getRooms()].find(room => room.roomID === parent.roomID);\n                if (!parentObj) {\n                    continue;\n                }\n                const alreadyAddedSpace = [...result].find(space => space.spaceRoom.roomID === parentObj.roomID);\n                if (alreadyAddedSpace) {\n                    // Check if room in children\n                    if (![...alreadyAddedSpace.children].find(child => child.roomID === room.roomID)) {\n                        alreadyAddedSpace.children.add(room);\n                    }\n                    continue;\n                }\n                // If space not added yet, add it\n                result.add({\n                    spaceRoom: parentObj,\n                    children: new Set([room]),\n                });\n            }\n        }\n\n        return result;\n    }\n\n    public async startSync() {\n        await this.sync.startSync();\n    }\n\n    public async fetchProfileInfo(userId: string): Promise<IProfileInfo> {\n        // @ts-ignore\n        if (globalThis.IS_STORYBOOK) {\n            await new Promise(r => setTimeout(r, 5000))\n        }\n        if (this.profileInfo) {\n            return this.profileInfo;\n        }\n        if (!this.user.hostname) {\n            throw Error(\"Hostname must be set first\");\n        }\n        if (!this.database) {\n            await this.createDatabase();\n        }\n        if (!this.user.access_token) {\n            throw Error(\"Access token must be set first\");\n        }\n        const resp = await fetch(`${this.user.hostname}/_matrix/client/v3/profile/${userId}`, {\n            headers: {\n                \"Authorization\": `Bearer ${this.user.access_token}`\n            }\n        });\n        if (!resp.ok) {\n            if (resp.status === 404 || resp.status === 403) {\n                return {} as IProfileInfo;\n            }\n            console.error(resp);\n            throw Error(\"Error fetching profile info. See console for error.\");\n        }\n        const json = await resp.json() as IProfileInfo;\n        if (json.avatar_url) {\n            json.avatar_url = this.convertMXC(json.avatar_url);\n        }\n        this.profileInfo = json;\n        const tx = this.database?.transaction('loginInfo', 'readwrite');\n        await tx?.store.put({\n            userId: this.user.mxid!,\n            device_id: this.user.device_id!,\n            hostname: this.user.hostname,\n            slidingSyncHostname: this.user.slidingSyncHostname,\n            access_token: this.user.access_token,\n            displayName: json.displayname,\n            avatarUrl: json.avatar_url,\n        });\n        await tx?.done\n\n        return json;\n    }\n}\n\nexport function isRateLimitError(arg: any): arg is IRateLimitError {\n    return arg.retry_after_ms !== undefined;\n}\n\nexport const defaultMatrixClient: MatrixClient = await MatrixClient.Instance();\nexport const MatrixContext = createContext<MatrixClient>(defaultMatrixClient);\n\n// List of rooms\nexport function useRooms() {\n    const client = useContext(MatrixContext);\n    const [rooms, setRooms] = useState<Set<Room>>(client.getRooms());\n\n    useEffect(() => {\n        // Listen for room updates\n        const listenForRooms = (rooms: Set<Room>) => {\n            setRooms(rooms);\n        };\n        client.on(\"rooms\", listenForRooms);\n        // This is a no-op if there is already a sync\n        client.startSync();\n        return () => {\n            client.off(\"rooms\", listenForRooms);\n        }\n    }, [])\n    return rooms;\n}\n\nexport function useRoom(roomID?: string): Room | undefined {\n    const rooms = useRooms();\n\n    return [...rooms].find(room => room.roomID === roomID);\n}\n\nexport function useSpaces() {\n    const client = useContext(MatrixContext);\n    const [spacesWithRooms, setSpacesWithRooms] = useState<Set<{\n        spaceRoom: Room, children: Set<Room>\n    }>>(client.getSpacesWithRooms());\n\n    useEffect(() => {\n        // Listen for room updates\n        const listenForRooms = (_rooms: Set<Room>) => {\n            setSpacesWithRooms(client.getSpacesWithRooms());\n        };\n        client.on(\"rooms\", listenForRooms);\n        // This is a no-op if there is already a sync\n        client.startSync();\n        return () => {\n            client.off(\"rooms\", listenForRooms);\n        }\n    }, [])\n    return spacesWithRooms;\n}\n\n\nexport function useProfile() {\n    const client = useContext(MatrixContext);\n    const [profile, setProfile] = useState<IProfileInfo>({\n        displayname: client.mxid || \"Unknown\",\n    });\n\n    useEffect(() => {\n        client.fetchProfileInfo(client.mxid!).then((profile) => {\n            if (!profile.displayname) {\n                profile.displayname = client.mxid || \"Unknown\";\n            }\n            setProfile(profile);\n        })\n    }, [])\n    return profile;\n}","import { memo } from \"react\";\nimport { IRoomEvent } from \"../../app/sdk/api/events\";\nimport { FC } from \"react\";\nimport Linkify from \"linkify-react\";\nimport Avatar from \"../avatar/avatar\";\nimport { OnlineState } from \"../../app/sdk/api/otherEnums\";\nimport { Room } from \"../../app/sdk/room\";\n\ntype UnknownEventProps = {\n    /**\n     * The event to render\n     */\n    event: IRoomEvent;\n    /**\n     * The room of the event to display\n     */\n    room?: Room;\n    /**\n     * If the previous event was sent by the same user\n     */\n    hasPreviousEvent?: boolean;\n};\n\nconst linkifyOptions = {\n    defaultProtocol: \"https\",\n    rel: \"noopener\",\n    target: \"_blank\",\n    className: \"text-blue-500 hover:text-blue-700 active:text-blue-700 visited:text-blue-500\"\n}\n\nconst UnknownEvent: FC<UnknownEventProps> = memo(({ event, room, hasPreviousEvent }) => {\n    return (\n        <div className={!hasPreviousEvent ? \"flex flex-row gap-4 p-2 pb-1 hover:bg-gray-200 rounded-md duration-200 ease-in-out items-start\" : \"flex flex-row p-2 pb-1 pt-0 hover:bg-gray-200 rounded-md duration-200 ease-in-out\"}>\n            {!hasPreviousEvent && <Avatar\n                displayname={room?.getMemberName(event.sender) || event.sender}\n                avatarUrl={room?.getMemberAvatar(event.sender)}\n                online={room?.presence || OnlineState.Unknown}\n                dm={room?.isDM() || false}\n            />}\n            <div className={!hasPreviousEvent ? \"flex flex-col gap-1\" : \"ml-[3.7rem]\"}>\n                {!hasPreviousEvent && <h2 className=\"text-xl font-medium text-red-500 whitespace-pre-wrap\">{room?.getMemberName(event.sender) || event.sender}</h2>}\n                <Linkify options={linkifyOptions} as='p' className=\"whitespace-break-spaces text-black text-base font-normal\">{JSON.stringify(event, null, 4)}</Linkify>\n            </div>\n        </div>\n    )\n});\n\nexport default UnknownEvent;\n\ntype UndecryptableEventProps = {\n    /**\n     * The event to render\n     */\n    event: IRoomEvent;\n    /**\n     * The room of the event to display\n     */\n    room?: Room;\n    /**\n     * If the previous event was sent by the same user\n     */\n    hasPreviousEvent?: boolean;\n};\n\nexport const UndecryptableEvent: FC<UndecryptableEventProps> = memo(({ event, room, hasPreviousEvent }) => {\n    return (\n        <div className={!hasPreviousEvent ? \"flex flex-row gap-4 p-2 pb-1 hover:bg-gray-200 rounded-md duration-200 ease-in-out items-start\" : \"flex flex-row p-2 pb-1 pt-0 hover:bg-gray-200 rounded-md duration-200 ease-in-out\"}>\n            {!hasPreviousEvent && <Avatar\n                displayname={room?.getMemberName(event.sender) || event.sender}\n                avatarUrl={room?.getMemberAvatar(event.sender)}\n                online={room?.presence || OnlineState.Unknown}\n                dm={room?.isDM() || false}\n            />}\n            <div className={!hasPreviousEvent ? \"flex flex-col gap-1\" : \"ml-[3.7rem]\"}>\n                {!hasPreviousEvent && <h2 className=\"text-xl font-medium text-red-500 whitespace-pre-wrap\">{room?.getMemberName(event.sender) || event.sender}</h2>}\n                <Linkify options={linkifyOptions} as='p' className=\"whitespace-pre-wrap text-base font-normal text-orange-600\">Unable to decrypt event</Linkify>\n            </div>\n        </div>\n    )\n});\n\ntype RedactedEventProps = {\n    /**\n     * The original event\n     */\n    event: IRoomEvent;\n    /**\n     * The event to render\n     */\n    redacted_because?: string;\n    /**\n     * The room of the event to display\n     */\n    room?: Room;\n    /**\n     * If the previous event was sent by the same user\n     */\n    hasPreviousEvent?: boolean;\n};\n\nexport const RedactedEvent: FC<RedactedEventProps> = memo(({ event, redacted_because, room, hasPreviousEvent }) => {\n    return (\n        <div className={!hasPreviousEvent ? \"flex flex-row gap-4 p-2 pb-1 hover:bg-gray-200 rounded-md duration-200 ease-in-out items-start\" : \"flex flex-row p-2 pb-1 pt-0 hover:bg-gray-200 rounded-md duration-200 ease-in-out\"}>\n            {!hasPreviousEvent && <Avatar\n                displayname={room?.getMemberName(event.sender) || event.sender}\n                avatarUrl={room?.getMemberAvatar(event.sender)}\n                online={room?.presence || OnlineState.Unknown}\n                dm={room?.isDM() || false}\n            />}\n            <div className={!hasPreviousEvent ? \"flex flex-col gap-1\" : \"ml-[3.7rem]\"}>\n                {!hasPreviousEvent && <h2 className=\"text-xl font-medium text-red-500 whitespace-pre-wrap\">{room?.getMemberName(event.sender) || event.sender}</h2>}\n                {redacted_because && <p className=\"whitespace-pre-wrap text-base font-normal text-blue-600 italic\">Message was redacted: {redacted_because}</p>}\n                {!redacted_because && <p className=\"whitespace-pre-wrap text-base font-normal text-blue-600 italic\">Message was redacted</p>}\n            </div>\n        </div>\n    )\n});\n\n","import { FC, memo, useEffect, useRef, useState } from \"react\";\nimport { Pause, Play } from 'lucide-react';\nimport WaveSurfer from 'wavesurfer.js';\n\ntype WaveformProps = {\n    /**\n     * The media url to render\n     */\n    src_url: string;\n};\n\nconst Waveform: FC<WaveformProps> = memo(({ src_url }) => {\n    const [playing, setPlaying] = useState(false);\n    const [duration, setDuration] = useState(0);\n    const [waveform, setWaveform] = useState<WaveSurfer | undefined>(undefined);\n    const waveformRef = useRef<HTMLDivElement>(null);\n\n    useEffect(() => {\n        if (waveformRef.current) {\n            if (waveformRef.current.children.length > 0) {\n                if (waveform) {\n                    setWaveform(prev => {\n                        prev?.destroy();\n                        if (waveformRef.current) {\n                            for (const child of waveformRef.current.children) {\n                                child.remove();\n                            }\n                        }\n                        return undefined;\n                    });\n                }\n            }\n            if (waveformRef.current.children.length === 0) {\n                setWaveform(WaveSurfer.create({\n                    barWidth: 5,\n                    cursorWidth: 1,\n                    container: waveformRef.current,\n                    backend: 'WebAudio',\n                    height: 45,\n                    progressColor: '#f59e0b',\n                    responsive: true,\n                    waveColor: '#cbd5e1',\n                    cursorColor: 'transparent',\n                    barRadius: 5,\n                    hideScrollbar: true,\n                    normalize: true,\n                }));\n            }\n        }\n    }, []);\n\n\n    useEffect(() => {\n        if (waveform) {\n            waveform.load(src_url);\n            waveform.on('ready', () => {\n                setDuration(waveform.getDuration());\n            });\n        }\n    }, [waveform])\n\n    const handlePlay = () => {\n        if (waveform) {\n            setPlaying((prev) => !prev);\n            waveform.playPause();\n        }\n    };\n\n    return (\n        <div className=\"flex w-[min-content] flex-row h-full items-start justify-start gap-3 bg-slate-200 rounded border-2 border-slate-500 p-1\">\n            <button aria-label={!playing ? \"Play\" : \"Pause\"} className=\"text-center flex justify-center items-center w-12 h-12 min-w-12 min-h-12 rounded-full outline-none cursor-pointer pb-1 bg-orange-500 border-orange-600 border hover:bg-orange-600 group\" onClick={handlePlay}>\n                {!playing ? <Play viewBox=\"0 0 21 24\" className=\"stroke-slate-50 group-hover:stroke-slate-100\" /> : <Pause size={24} className=\"stroke-slate-700 group-hover:stroke-slate-600\" />}\n            </button>\n            <div className=\"flex flex-col w-96 gap-2 justify-between\">\n                <div className=\"w-full h-12\" id=\"waveform\" ref={waveformRef}></div>\n                <span className=\"w-full text-sm font-medium text-slate-600 text-right\">{secondsToHms(duration)}</span>\n            </div>\n        </div>\n    );\n})\n\nfunction secondsToHms(d?: number) {\n    if (!d) {\n        return \"00:00\";\n    }\n    const h = Math.floor(d / 3600);\n    const m = Math.floor(d % 3600 / 60);\n    const s = Math.floor(d % 3600 % 60);\n\n    if (h === 0 && m === 0 && s === 0) {\n        return \"00:00\";\n    } else if (h === 0 && m === 0) {\n        return `00:${s.toString().padStart(2, \"0\")}`;\n    } else if (h === 0) {\n        return `${m.toString().padStart(2, \"0\")}:${s.toString().padStart(2, \"0\")}`;\n    }\n    return `${h}:${m}:${s}`;\n}\n\nexport default Waveform;","import { memo, useContext, useEffect, useState } from \"react\";\nimport { IRoomEvent, isRoomMessageAudioEvent, isRoomMessageImageEvent, isRoomMessageNoticeEvent, isRoomMessageTextEvent } from \"../../app/sdk/api/events\";\nimport { FC } from \"react\";\nimport Avatar from \"../avatar/avatar\";\nimport { MatrixClient, MatrixContext } from \"../../app/sdk/client\";\nimport Linkify from \"linkify-react\";\nimport linkifyHtml from 'linkify-html';\nimport DOMPurify from \"dompurify\";\nimport { UndecryptableEvent } from \"./unknownEvent\";\nimport { decryptAttachment } from \"matrix-encrypt-attachment\";\nimport Waveform from './helpers/Waveform';\nimport hljs from 'highlight.js';\nimport 'highlight.js/styles/base16/solarized-dark.css';\nimport { OnlineState } from \"../../app/sdk/api/otherEnums\";\nimport { Room } from \"../../app/sdk/room\";\n\ntype MessageEventProps = {\n    /**\n     * The event to render\n     */\n    event: IRoomEvent;\n    /**\n     * The room of the event to display\n     */\n    room?: Room;\n    /**\n     * If the previous event was sent by the same user\n     */\n    hasPreviousEvent?: boolean;\n    /**\n     * Reactions to the event\n     */\n    reactions?: IRoomEvent[];\n};\n\nconst linkifyOptions = {\n    defaultProtocol: \"https\",\n    rel: \"noopener\",\n    target: \"_blank\",\n    className: \"text-blue-500 hover:text-blue-700 active:text-blue-700 visited:text-blue-500\"\n}\n\nconst decryptMedia = (client: MatrixClient, event: IRoomEvent, decryptedCallback: (url: string) => void, failureCallback: (error: string) => void) => {\n    console.log(\"Downloading media:\", event.event_id);\n    fetch(client.convertMXC(event.content.file.url), {\n        headers: {\n            Authorization: `Bearer ${client.accessToken}`\n        }\n    }).then((response) => {\n        if (!response.ok) {\n            // TODO: display error?\n            console.log(\"Unable to decrypt media:\", response.text());\n            return;\n        }\n        console.log(\"Downloaded media:\", event.event_id);\n        response.arrayBuffer().then((responseData) => {\n            // Decrypt the array buffer using the information taken from the event content.\n            decryptAttachment(responseData, event.content.file).then((dataArray) => {\n                // Turn the array into a Blob and give it the correct MIME-type.\n\n                // IMPORTANT: we must not allow scriptable mime-types into Blobs otherwise\n                // they introduce XSS attacks if the Blob URI is viewed directly in the\n                // browser (e.g. by copying the URI into a new tab or window.)\n                // See warning at top of file.\n                let mimetype = event.content.info?.mimetype ? event.content.info.mimetype.split(\";\")[0].trim() : \"\";\n                mimetype = getBlobSafeMimeType(mimetype);\n\n                const blob = new Blob([dataArray], { type: mimetype });\n                // TODO: Cache media in indexeddb\n                decryptedCallback(URL.createObjectURL(blob));\n                console.log(\"Decrypted media:\", event.event_id);\n            }).catch((e: any) => {\n                console.log(\"Unable to decrypt media due to decryption error:\", e);\n                failureCallback(`Unable to decrypt media due to decryption error: ${e}`);\n            });\n        });\n    });\n}\n\nconst MessageEvent: FC<MessageEventProps> = memo(({ event, room, hasPreviousEvent, reactions }) => {\n    const client = useContext(MatrixContext);\n\n    const renderCorrectMessage = (event: IRoomEvent) => {\n        if (isRoomMessageTextEvent(event)) {\n            return (<TextMessage event={event} room={room} hasPreviousEvent={hasPreviousEvent} reactions={reactions} />)\n        } else if (isRoomMessageNoticeEvent(event)) {\n            return (<TextMessage event={event} room={room} hasPreviousEvent={hasPreviousEvent} reactions={reactions} message_type={MessageType.Notice} />)\n        } else if (isRoomMessageImageEvent(event)) {\n            const [url, setUrl] = useState<string | undefined>(undefined);\n            const [unableToDecrypt, setUnableToDecrypt] = useState<boolean>(event.content.file !== undefined);\n\n            useEffect(() => {\n                if (isRoomMessageImageEvent(event)) {\n                    if (event.content.url) {\n                        setUrl(client.convertMXC(event.content.url));\n                    } else {\n                        // Image is encrypted and we need to download and decrypt it\n                        if (event.content.file) {\n                            decryptMedia(\n                                client,\n                                event,\n                                (url) => {\n                                    setUrl(url);\n                                    setUnableToDecrypt(false);\n                                },\n                                (_error) => {\n                                    setUnableToDecrypt(true);\n                                }\n                            );\n                        }\n                    }\n                }\n            }, [event])\n\n            if (unableToDecrypt) {\n                return (<UndecryptableEvent event={event} room={room} hasPreviousEvent={hasPreviousEvent} />)\n            }\n\n            return (\n                <div className={!hasPreviousEvent ? \"flex flex-row gap-4 p-2 pb-1 hover:bg-gray-200 rounded-md duration-200 ease-in-out items-start\" : \"flex flex-row p-2 pb-1 pt-1 hover:bg-gray-200 rounded-md duration-200 ease-in-out\"}>\n                    {!hasPreviousEvent && <Avatar\n                        displayname={room?.getMemberName(event.sender) || event.sender}\n                        avatarUrl={room?.getMemberAvatar(event.sender)}\n                        online={room?.presence || OnlineState.Unknown}\n                        dm={room?.isDM() || false}\n                    />}\n                    <div className={!hasPreviousEvent ? \"flex flex-col gap-1\" : \"ml-[3.7rem]\"}>\n                        {!hasPreviousEvent && <h2 className=\"text-xl font-medium text-red-500 whitespace-pre-wrap\">{room?.getMemberName(event.sender) || event.sender}</h2>}\n                        {/* TODO: Loading circle while image is loading */}\n                        <img\n                            src={url}\n                            alt={event.content.body}\n                            title={event.content.body}\n                            className=\"rounded-md object-cover border-slate-400 border-2 max-h-[50rem] max-w-[50rem] h-[unset]\"\n                        />\n                    </div>\n                </div>\n            )\n        } else if (isRoomMessageAudioEvent(event)) {\n            const [url, setUrl] = useState<string | undefined>(undefined);\n            const [unableToDecrypt, setUnableToDecrypt] = useState<boolean>(event.content.file !== undefined);\n\n\n            useEffect(() => {\n                if (isRoomMessageAudioEvent(event)) {\n                    if (event.content.url) {\n                        setUrl(client.convertMXC(event.content.url));\n                    } else {\n                        // Audio is encrypted and we need to download and decrypt it\n                        if (event.content.file) {\n                            decryptMedia(\n                                client,\n                                event,\n                                (url) => {\n                                    setUrl(url);\n                                    setUnableToDecrypt(false);\n                                },\n                                (_error) => {\n                                    setUnableToDecrypt(true);\n                                }\n                            );\n                        }\n                    }\n                }\n            }, [event])\n\n            if (unableToDecrypt) {\n                return (<UndecryptableEvent event={event} room={room} hasPreviousEvent={hasPreviousEvent} />)\n            }\n\n            return (\n                <div className={!hasPreviousEvent ? \"flex flex-row gap-4 p-2 pb-1 hover:bg-gray-200 rounded-md duration-200 ease-in-out items-start\" : \"flex flex-row p-2 pb-1 pt-1 hover:bg-gray-200 rounded-md duration-200 ease-in-out\"}>\n                    {!hasPreviousEvent && <Avatar\n                        displayname={room?.getMemberName(event.sender) || event.sender}\n                        avatarUrl={room?.getMemberAvatar(event.sender)}\n                        online={room?.presence || OnlineState.Unknown}\n                        dm={room?.isDM() || false}\n                    />}\n                    <div className={!hasPreviousEvent ? \"flex flex-col gap-1\" : \"flex-1 ml-[3.7rem]\"}>\n                        {!hasPreviousEvent && <h2 className=\"text-xl font-medium text-red-500 whitespace-pre-wrap\">{room?.getMemberName(event.sender) || event.sender}</h2>}\n                        {url && <Waveform src_url={url} />}\n                    </div>\n                </div>\n            )\n        } else {\n            return (\n                <div className={!hasPreviousEvent ? \"flex flex-row gap-4 p-2 pb-1 hover:bg-gray-200 rounded-md duration-200 ease-in-out items-start\" : \"flex flex-row p-2 pb-1 pt-0 hover:bg-gray-200 rounded-md duration-200 ease-in-out\"}>\n                    {!hasPreviousEvent && <Avatar\n                        displayname={room?.getMemberName(event.sender) || event.sender}\n                        avatarUrl={room?.getMemberAvatar(event.sender)}\n                        online={room?.presence || OnlineState.Unknown}\n                        dm={room?.isDM() || false}\n                    />}\n                    <div className={!hasPreviousEvent ? \"flex flex-col gap-1\" : \"ml-[3.7rem]\"}>\n                        {!hasPreviousEvent && <h2 className=\"text-xl font-medium text-red-500 whitespace-pre-wrap\">{room?.getMemberName(event.sender) || event.sender}</h2>}\n                        <Linkify options={linkifyOptions} as='p' className=\"text-black text-base font-normal\">{event.content.body}</Linkify>\n                    </div>\n                </div>\n            )\n        }\n    }\n\n    return renderCorrectMessage(event);\n});\n\nexport default MessageEvent;\n\nenum MessageType {\n    Text,\n    Notice,\n    Emote\n}\n\ninterface TextMessage extends MessageEventProps {\n    /**\n     * Which type the message is\n     */\n    message_type?: MessageType;\n}\n\nconst TextMessage: FC<TextMessage> = memo(({ event, room, hasPreviousEvent, message_type = MessageType.Text }) => {\n    let text_color = \"text-black\";\n    if (message_type === MessageType.Notice) {\n        text_color = \"text-slate-500\"\n    }\n\n    if (event.content.format === \"org.matrix.custom.html\") {\n        let sanitized = DOMPurify.sanitize(event.content.formatted_body!, {\n            ADD_TAGS: [\n                \"font\",\n                \"del\",\n                \"h1\",\n                \"h2\",\n                \"h3\",\n                \"h4\",\n                \"h5\",\n                \"h6\",\n                \"blockquote\",\n                \"p\",\n                \"a\",\n                \"ul\",\n                \"ol\",\n                \"sup\",\n                \"sub\",\n                \"li\",\n                \"b\",\n                \"i\",\n                \"u\",\n                \"strong\",\n                \"em\",\n                \"strike\",\n                \"code\",\n                \"hr\",\n                \"br\",\n                \"div\",\n                \"table\",\n                \"thead\",\n                \"tbody\",\n                \"tr\",\n                \"th\",\n                \"td\",\n                \"caption\",\n                \"pre\",\n                \"span\",\n                \"img\",\n                \"details\",\n                \"summary\"\n            ]\n        })\n        // Extract code and language from the html\n        const codeRegex = /<pre><code (?:class=\"language-(?<language>.*?)\")?.*?>(?<code>[\\s\\S]*?)<\\/code><\\/pre>/;\n        const code = codeRegex.exec(sanitized);\n\n        if (code?.groups?.[\"code\"]) {\n            if (code.groups?.[\"language\"]) {\n                // Highlight the code\n                const highlighted = hljs.highlight(code.groups?.[\"code\"], { language: code.groups?.[\"language\"] }).value;\n                sanitized = sanitized.replace(code.groups?.[\"code\"], `${highlighted}`);\n            } else {\n                // Highlight the code\n                const highlighted = hljs.highlightAuto(code.groups?.[\"code\"]).value;\n                sanitized = sanitized.replace(code[0], `${highlighted}`);\n            }\n        }\n        const linkified = linkifyHtml(sanitized, linkifyOptions);\n        // TODO: sanitize the attributes allowed by matrix spec\n\n        return (\n            <div className={!hasPreviousEvent ? \"flex flex-row gap-4 p-2 pb-1 hover:bg-gray-200 rounded-md duration-200 ease-in-out items-start\" : \"flex flex-row p-2 pb-1 pt-0 hover:bg-gray-200 rounded-md duration-200 ease-in-out\"}>\n                {!hasPreviousEvent && <Avatar\n                    displayname={room?.getMemberName(event.sender) || event.sender}\n                    avatarUrl={room?.getMemberAvatar(event.sender)}\n                    online={room?.presence || OnlineState.Unknown}\n                    dm={room?.isDM() || false}\n                />}\n                <div className={!hasPreviousEvent ? \"flex flex-col gap-1\" : \"ml-[3.7rem]\"}>\n                    {!hasPreviousEvent && <h2 className=\"text-xl font-medium text-red-500 whitespace-pre-wrap\">{room?.getMemberName(event.sender) || event.sender}</h2>}\n                    {/* TODO: Fixme */}\n                    <p className={`${text_color} text-base font-normal`} dangerouslySetInnerHTML={{ __html: linkified }}></p>\n                </div>\n            </div>\n        )\n    } else {\n        return (\n            <div className={!hasPreviousEvent ? \"flex flex-row gap-4 p-2 pb-1 hover:bg-gray-200 rounded-md duration-200 ease-in-out items-start\" : \"flex flex-row p-2 pb-1 pt-0 hover:bg-gray-200 rounded-md duration-200 ease-in-out\"}>\n                {!hasPreviousEvent && <Avatar\n                    displayname={room?.getMemberName(event.sender) || event.sender}\n                    avatarUrl={room?.getMemberAvatar(event.sender)}\n                    online={room?.presence || OnlineState.Unknown}\n                    dm={room?.isDM() || false}\n                />}\n                <div className={!hasPreviousEvent ? \"flex flex-col gap-1\" : \"ml-[3.7rem]\"}>\n                    {!hasPreviousEvent && <h2 className=\"text-xl font-medium text-red-500 whitespace-pre-wrap\">{room?.getMemberName(event.sender) || event.sender}</h2>}\n                    <Linkify options={linkifyOptions} as='p' className={`${text_color} text-base font-normal`}>{event.content.body}</Linkify>\n                </div>\n            </div>\n        )\n    }\n})\n\n\n// WARNING: We have to be very careful about what mime-types we allow into blobs,\n// as for performance reasons these are now rendered via URL.createObjectURL()\n// rather than by converting into data: URIs.\n//\n// This means that the content is rendered using the origin of the script which\n// called createObjectURL(), and so if the content contains any scripting then it\n// will pose a XSS vulnerability when the browser renders it.  This is particularly\n// bad if the user right-clicks the URI and pastes it into a new window or tab,\n// as the blob will then execute with access to Element's full JS environment(!)\n//\n// See https://github.com/matrix-org/matrix-react-sdk/pull/1820#issuecomment-385210647\n// for details.\n//\n// We mitigate this by only allowing mime-types into blobs which we know don't\n// contain any scripting, and instantiate all others as application/octet-stream\n// regardless of what mime-type the event claimed.  Even if the payload itself\n// is some malicious HTML, the fact we instantiate it with a media mimetype or\n// application/octet-stream means the browser doesn't try to render it as such.\n//\n// One interesting edge case is image/svg+xml, which empirically *is* rendered\n// correctly if the blob is set to the src attribute of an img tag (for thumbnails)\n// *even if the mimetype is application/octet-stream*.  However, empirically JS\n// in the SVG isn't executed in this scenario, so we seem to be okay.\n//\n// Tested on Chrome 65 and Firefox 60\n//\n// The list below is taken mainly from\n// https://developer.mozilla.org/en-US/docs/Web/HTML/Supported_media_formats\n// N.B. Matrix doesn't currently specify which mimetypes are valid in given\n// events, so we pick the ones which HTML5 browsers should be able to display\n//\n// For the record, mime-types which must NEVER enter this list below include:\n//   text/html, text/xhtml, image/svg, image/svg+xml, image/pdf, and similar.\n\nconst ALLOWED_BLOB_MIMETYPES = [\n    \"image/jpeg\",\n    \"image/gif\",\n    \"image/png\",\n    \"image/apng\",\n    \"image/webp\",\n    \"image/avif\",\n\n    \"video/mp4\",\n    \"video/webm\",\n    \"video/ogg\",\n    \"video/quicktime\",\n\n    \"audio/mp4\",\n    \"audio/webm\",\n    \"audio/aac\",\n    \"audio/mpeg\",\n    \"audio/ogg\",\n    \"audio/wave\",\n    \"audio/wav\",\n    \"audio/x-wav\",\n    \"audio/x-pn-wav\",\n    \"audio/flac\",\n    \"audio/x-flac\",\n];\n\nexport function getBlobSafeMimeType(mimetype: string): string {\n    if (!ALLOWED_BLOB_MIMETYPES.includes(mimetype)) {\n        return \"application/octet-stream\";\n    }\n    return mimetype;\n}","import { AutoLinkPlugin, LinkMatcher } from \"@lexical/react/LexicalAutoLinkPlugin\";\n\nconst URL_MATCHER = /((https?:\\/\\/(www\\.)?)|(www\\.))[-a-zA-Z0-9@:%._+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-a-zA-Z0-9()@:%_+.~#?&//=]*)/;\n\nconst EMAIL_MATCHER = /(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))/;\n\nconst MATCHERS: LinkMatcher[] = [\n    (text) => {\n        const match = URL_MATCHER.exec(text);\n        return (\n            match && {\n                index: match.index,\n                length: match[0].length,\n                text: match[0],\n                url: match[0]\n            }\n        );\n    },\n    (text) => {\n        const match = EMAIL_MATCHER.exec(text);\n        return (\n            match && {\n                index: match.index,\n                length: match[0].length,\n                text: match[0],\n                url: `mailto:${match[0]}`\n            }\n        );\n    }\n];\n\nexport default function PlaygroundAutoLinkPlugin() {\n    return <AutoLinkPlugin matchers={MATCHERS} />;\n}\n","import { $applyNodeReplacement, $getRoot, DOMExportOutput, LexicalEditor, ParagraphNode, SerializedElementNode, SerializedParagraphNode } from \"lexical\";\n\nexport class CustomParagraphNode extends ParagraphNode {\n    static getType(): string {\n        return \"custom-paragraph\";\n    }\n\n    static clone(node: CustomParagraphNode): CustomParagraphNode {\n        return new CustomParagraphNode(node.__key);\n    }\n\n    exportDOM(editor: LexicalEditor): DOMExportOutput {\n        const { element } = super.exportDOM(editor);\n\n        if (this.isEmpty()) {\n            const root = $getRoot();\n            let foundFurtherText = false;\n            for (const child of root.getChildren()) {\n                if (child === this) {\n                    continue;\n                }\n                if (child instanceof CustomParagraphNode || child instanceof ParagraphNode) {\n                    if (!child.isEmpty()) {\n                        foundFurtherText = true;\n                    }\n                }\n            }\n            if (!foundFurtherText) {\n                return { element: null };\n            }\n        }\n\n        return { element };\n    }\n\n    exportJSON(): SerializedElementNode {\n        const node = super.exportJSON();\n        node.type = \"custom-paragraph\";\n        return node;\n    }\n\n    static importJSON(node: SerializedParagraphNode): CustomParagraphNode {\n        return super.importJSON(node);\n    }\n}\n\nexport function $createCustomParagraphNode(): CustomParagraphNode {\n    return $applyNodeReplacement(new CustomParagraphNode());\n}","import { useLexicalComposerContext } from \"@lexical/react/LexicalComposerContext\";\nimport {\n    useCallback,\n    useEffect,\n    useMemo,\n    useRef,\n    useState,\n    ChangeEventHandler,\n    ChangeEvent,\n    MutableRefObject,\n    Dispatch,\n    SetStateAction,\n    createElement,\n    memo\n} from \"react\";\nimport {\n    CAN_REDO_COMMAND,\n    CAN_UNDO_COMMAND,\n    REDO_COMMAND,\n    UNDO_COMMAND,\n    SELECTION_CHANGE_COMMAND,\n    FORMAT_TEXT_COMMAND,\n    $getSelection,\n    $isRangeSelection,\n    $getNodeByKey,\n    LexicalEditor,\n    RangeSelection,\n    NodeSelection,\n    GridSelection\n} from \"lexical\";\nimport { $isLinkNode, TOGGLE_LINK_COMMAND } from \"@lexical/link\";\nimport {\n    $isParentElementRTL,\n    $wrapNodes,\n    $isAtNodeEnd\n} from \"@lexical/selection\";\nimport { $getNearestNodeOfType, mergeRegister } from \"@lexical/utils\";\nimport {\n    INSERT_ORDERED_LIST_COMMAND,\n    INSERT_UNORDERED_LIST_COMMAND,\n    REMOVE_LIST_COMMAND,\n    $isListNode,\n    ListNode\n} from \"@lexical/list\";\nimport { createPortal } from \"react-dom\";\nimport {\n    $createHeadingNode,\n    $createQuoteNode,\n    $isHeadingNode\n} from \"@lexical/rich-text\";\nimport {\n    $createCodeNode,\n    $isCodeNode,\n    getDefaultCodeLanguage,\n    getCodeLanguages\n} from \"@lexical/code\";\nimport { Bold, ChevronDown, Code, Heading1, Heading2, Heading4, Heading5, Italic, Link, List, ListOrdered, Quote, Redo, Strikethrough, Text, Underline, Undo } from \"lucide-react\";\nimport { Heading3 } from \"lucide-react\";\nimport { $createCustomParagraphNode } from \"../customNodes/CustomParagraphNode\";\n\nconst LowPriority = 1;\n\nconst supportedBlockTypes = new Set([\n    \"custom-paragraph\",\n    \"quote\",\n    \"code\",\n    \"h1\",\n    \"h2\",\n    \"ul\",\n    \"ol\"\n]);\n\ninterface BlockTypes {\n    \"code\": string,\n    h1: string,\n    h2: string,\n    h3: string,\n    h4: string,\n    h5: string,\n    ol: string,\n    \"custom-paragraph\": string,\n    quote: string,\n    ul: string\n}\n\nconst blockTypeToBlockName: BlockTypes = {\n    \"code\": \"Code Block\",\n    h1: \"Large Heading\",\n    h2: \"Small Heading\",\n    h3: \"Heading\",\n    h4: \"Heading\",\n    h5: \"Heading\",\n    ol: \"Numbered List\",\n    \"custom-paragraph\": \"Normal\",\n    quote: \"Quote\",\n    ul: \"Bulleted List\"\n} as const;\n\ntype BlockType = keyof typeof blockTypeToBlockName;\n\nconst Divider = memo(() => {\n    return <div className=\"divider\" />;\n})\n\nfunction positionEditorElement(editor: HTMLDivElement, rect: DOMRect | undefined) {\n    if (!rect) {\n        editor.style.opacity = \"0\";\n        editor.style.top = \"-1000px\";\n        editor.style.left = \"-1000px\";\n    } else {\n        editor.style.opacity = \"1\";\n        editor.style.top = `${rect.top + rect.height + window.pageYOffset + 10}px`;\n        editor.style.left = `${rect.left + window.pageXOffset - editor.offsetWidth / 2 + rect.width / 2\n            }px`;\n    }\n}\n\nconst FloatingLinkEditor = memo(({ editor }: { editor: LexicalEditor }) => {\n    const editorRef: MutableRefObject<HTMLDivElement | null> = useRef(null);\n    const inputRef: MutableRefObject<HTMLInputElement | null> = useRef(null);\n    const mouseDownRef = useRef(false);\n    const [linkUrl, setLinkUrl] = useState(\"\");\n    const [isEditMode, setEditMode] = useState(false);\n    const [lastSelection, setLastSelection] = useState<RangeSelection | GridSelection | NodeSelection | null>(null);\n\n    const updateLinkEditor = useCallback(() => {\n        const selection = $getSelection();\n        if ($isRangeSelection(selection)) {\n            const node = getSelectedNode(selection);\n            const parent = node.getParent();\n            if ($isLinkNode(parent)) {\n                setLinkUrl(parent.getURL());\n            } else if ($isLinkNode(node)) {\n                setLinkUrl(node.getURL());\n            } else {\n                setLinkUrl(\"\");\n            }\n        }\n        const editorElem = editorRef.current;\n        const nativeSelection = window.getSelection();\n        const activeElement = document.activeElement;\n\n        if (editorElem === null) {\n            return;\n        }\n\n        const rootElement = editor.getRootElement();\n        if (\n            selection !== null &&\n            !nativeSelection?.isCollapsed &&\n            rootElement !== null &&\n            rootElement.contains(nativeSelection?.anchorNode as (Node | null))\n        ) {\n            const domRange = nativeSelection?.getRangeAt(0);\n            let rect;\n            if (nativeSelection?.anchorNode === rootElement) {\n                let inner = rootElement;\n                while (inner.firstElementChild != null) {\n                    inner = inner.firstElementChild as HTMLElement;\n                }\n                rect = inner.getBoundingClientRect();\n            } else {\n                rect = domRange?.getBoundingClientRect();\n            }\n\n            if (!mouseDownRef.current) {\n                positionEditorElement(editorElem, rect);\n            }\n            setLastSelection(selection);\n        } else if (!activeElement || activeElement.className !== \"link-input\") {\n            positionEditorElement(editorElem, undefined);\n            setLastSelection(null);\n            setEditMode(false);\n            setLinkUrl(\"\");\n        }\n\n        return true;\n    }, [editor]);\n\n    useEffect(() => {\n        return mergeRegister(\n            editor.registerUpdateListener(({ editorState }) => {\n                editorState.read(() => {\n                    updateLinkEditor();\n                });\n            }),\n\n            editor.registerCommand(\n                SELECTION_CHANGE_COMMAND,\n                () => {\n                    updateLinkEditor();\n                    return true;\n                },\n                LowPriority\n            )\n        );\n    }, [editor, updateLinkEditor]);\n\n    useEffect(() => {\n        editor.getEditorState().read(() => {\n            updateLinkEditor();\n        });\n    }, [editor, updateLinkEditor]);\n\n    useEffect(() => {\n        if (isEditMode && inputRef.current) {\n            inputRef.current.focus();\n        }\n    }, [isEditMode]);\n\n    const safeLink = createElement(\"a\", { href: linkUrl, target: \"_blank\", rel: \"noopener noreferrer\" }, linkUrl);\n\n    return (\n        <div ref={editorRef} className=\"link-editor\">\n            {isEditMode ? (\n                <input\n                    ref={inputRef}\n                    className=\"link-input\"\n                    value={linkUrl}\n                    onChange={(event) => {\n                        setLinkUrl(event.target.value);\n                    }}\n                    onKeyDown={(event) => {\n                        if (event.key === \"Enter\") {\n                            event.preventDefault();\n                            if (lastSelection !== null) {\n                                if (linkUrl !== \"\") {\n                                    editor.dispatchCommand(TOGGLE_LINK_COMMAND, linkUrl);\n                                }\n                                setEditMode(false);\n                            }\n                        } else if (event.key === \"Escape\") {\n                            event.preventDefault();\n                            setEditMode(false);\n                        }\n                    }}\n                />\n            ) : (\n                <>\n                    <div className=\"link-input\">\n                        {safeLink}\n                        <div\n                            className=\"link-edit\"\n                            role=\"button\"\n                            tabIndex={0}\n                            onMouseDown={(event) => event.preventDefault()}\n                            onClick={() => {\n                                setEditMode(true);\n                            }}\n                        />\n                    </div>\n                </>\n            )}\n        </div>\n    );\n})\n\nconst Select = memo(({ onChange, className, options, value }: { onChange: ChangeEventHandler<HTMLSelectElement>, className: string, options: string[], value: string | ReadonlyArray<string> | number }) => {\n    return (\n        <select className={className} onChange={onChange} value={value}>\n            <option hidden={true} value=\"\" />\n            {options.map((option) => (\n                <option key={option} value={option}>\n                    {option}\n                </option>\n            ))}\n        </select>\n    );\n})\n\nfunction getSelectedNode(selection: RangeSelection | GridSelection) {\n    const anchor = selection.anchor;\n    const focus = selection.focus;\n    const anchorNode = selection.anchor.getNode();\n    const focusNode = selection.focus.getNode();\n    if (anchorNode === focusNode) {\n        return anchorNode;\n    }\n    const isBackward = selection.isBackward();\n    if (isBackward) {\n        return $isAtNodeEnd(focus) ? anchorNode : focusNode;\n    } else {\n        return $isAtNodeEnd(anchor) ? focusNode : anchorNode;\n    }\n}\n\nconst BlockOptionsDropdownList = memo(({\n    editor,\n    blockType,\n    toolbarRef,\n    setShowBlockOptionsDropDown\n}: { editor: LexicalEditor, blockType: BlockType, toolbarRef: MutableRefObject<HTMLDivElement | null>, setShowBlockOptionsDropDown: Dispatch<SetStateAction<boolean>> }) => {\n    const dropDownRef: MutableRefObject<HTMLDivElement | null> = useRef(null);\n\n    useEffect(() => {\n        const dropDown = dropDownRef.current;\n        const toolbar = toolbarRef.current;\n\n        if (dropDown !== null && toolbar !== null) {\n            const editorContainer = document.getElementsByClassName(\"editor-container\")[0];\n            if (editorContainer) {\n                dropDown.style.bottom = `${editorContainer.clientHeight}px`;\n            }\n\n            const handle = (event: MouseEvent) => {\n                const target = event.target;\n\n                if (!dropDown.contains(target as Node) && !toolbar.contains(target as Node)) {\n                    setShowBlockOptionsDropDown(false);\n                }\n            };\n            document.addEventListener(\"click\", handle);\n\n            return () => {\n                document.removeEventListener(\"click\", handle);\n            };\n        }\n    }, [dropDownRef, setShowBlockOptionsDropDown, toolbarRef]);\n\n    const formatParagraph = () => {\n        if (blockType !== \"custom-paragraph\") {\n            editor.update(() => {\n                const selection = $getSelection();\n\n                if ($isRangeSelection(selection)) {\n                    $wrapNodes(selection, () => $createCustomParagraphNode());\n                }\n            });\n        }\n        setShowBlockOptionsDropDown(false);\n    };\n\n    const formatLargeHeading = () => {\n        if (blockType !== \"h1\") {\n            editor.update(() => {\n                const selection = $getSelection();\n\n                if ($isRangeSelection(selection)) {\n                    $wrapNodes(selection, () => $createHeadingNode(\"h1\"));\n                }\n            });\n        }\n        setShowBlockOptionsDropDown(false);\n    };\n\n    const formatSmallHeading = () => {\n        if (blockType !== \"h2\") {\n            editor.update(() => {\n                const selection = $getSelection();\n\n                if ($isRangeSelection(selection)) {\n                    $wrapNodes(selection, () => $createHeadingNode(\"h2\"));\n                }\n            });\n        }\n        setShowBlockOptionsDropDown(false);\n    };\n\n    const formatBulletList = () => {\n        if (blockType !== \"ul\") {\n            editor.dispatchCommand(INSERT_UNORDERED_LIST_COMMAND, undefined);\n        } else {\n            editor.dispatchCommand(REMOVE_LIST_COMMAND, undefined);\n        }\n        setShowBlockOptionsDropDown(false);\n    };\n\n    const formatNumberedList = () => {\n        if (blockType !== \"ol\") {\n            editor.dispatchCommand(INSERT_ORDERED_LIST_COMMAND, undefined);\n        } else {\n            editor.dispatchCommand(REMOVE_LIST_COMMAND, undefined);\n        }\n        setShowBlockOptionsDropDown(false);\n    };\n\n    const formatQuote = () => {\n        if (blockType !== \"quote\") {\n            editor.update(() => {\n                const selection = $getSelection();\n\n                if ($isRangeSelection(selection)) {\n                    $wrapNodes(selection, () => $createQuoteNode());\n                }\n            });\n        }\n        setShowBlockOptionsDropDown(false);\n    };\n\n    const formatCode = () => {\n        if (blockType !== \"code\") {\n            editor.update(() => {\n                const selection = $getSelection();\n\n                if ($isRangeSelection(selection)) {\n                    $wrapNodes(selection, () => $createCodeNode());\n                }\n            });\n        }\n        setShowBlockOptionsDropDown(false);\n    };\n\n    return (\n        <div className=\"dropdown\" ref={dropDownRef}>\n            <button className=\"item\" onClick={formatParagraph}>\n                <Text className=\"icon\" size={20} />\n                <span className=\"text\">Normal</span>\n                {blockType === \"custom-paragraph\" && <span className=\"active\" />}\n            </button>\n            <button className=\"item\" onClick={formatLargeHeading}>\n                <Heading1 className=\"icon\" size={20} />\n                <span className=\"text\">Large Heading</span>\n                {blockType === \"h1\" && <span className=\"active\" />}\n            </button>\n            <button className=\"item\" onClick={formatSmallHeading}>\n                <Heading2 className=\"icon\" size={20} />\n                <span className=\"text\">Small Heading</span>\n                {blockType === \"h2\" && <span className=\"active\" />}\n            </button>\n            <button className=\"item\" onClick={formatBulletList}>\n                <List className=\"icon\" size={20} />\n                <span className=\"text\">Bullet List</span>\n                {blockType === \"ul\" && <span className=\"active\" />}\n            </button>\n            <button className=\"item\" onClick={formatNumberedList}>\n                <ListOrdered className=\"icon\" size={20} />\n                <span className=\"text\">Numbered List</span>\n                {blockType === \"ol\" && <span className=\"active\" />}\n            </button>\n            <button className=\"item\" onClick={formatQuote}>\n                <Quote className=\"icon\" size={20} />\n                <span className=\"text\">Quote</span>\n                {blockType === \"quote\" && <span className=\"active\" />}\n            </button>\n            <button className=\"item\" onClick={formatCode}>\n                <Code className=\"icon\" size={20} />\n                <span className=\"text\">Code Block</span>\n                {blockType === \"code\" && <span className=\"active\" />}\n            </button>\n        </div>\n    );\n})\n\nconst ToolbarPlugin = memo(() => {\n    const [editor] = useLexicalComposerContext();\n    const toolbarRef = useRef(null);\n    const [canUndo, setCanUndo] = useState(false);\n    const [canRedo, setCanRedo] = useState(false);\n    const [blockType, setBlockType] = useState<BlockType>(\"custom-paragraph\");\n    const [selectedElementKey, setSelectedElementKey] = useState(null);\n    const [showBlockOptionsDropDown, setShowBlockOptionsDropDown] = useState(\n        false\n    );\n    const [codeLanguage, setCodeLanguage] = useState(\"\");\n    const [_isRTL, setIsRTL] = useState(false);\n    const [isLink, setIsLink] = useState(false);\n    const [isBold, setIsBold] = useState(false);\n    const [isItalic, setIsItalic] = useState(false);\n    const [isUnderline, setIsUnderline] = useState(false);\n    const [isStrikethrough, setIsStrikethrough] = useState(false);\n    const [isCode, setIsCode] = useState(false);\n\n    const updateToolbar = useCallback(() => {\n        const selection = $getSelection();\n        if ($isRangeSelection(selection)) {\n            const anchorNode = selection.anchor.getNode();\n            const element =\n                anchorNode.getKey() === \"root\"\n                    ? anchorNode\n                    : anchorNode.getTopLevelElementOrThrow();\n            const elementKey = element.getKey();\n            const elementDOM = editor.getElementByKey(elementKey);\n            if (elementDOM !== null) {\n                setSelectedElementKey(elementKey);\n                if ($isListNode(element)) {\n                    const parentList = $getNearestNodeOfType(anchorNode, ListNode);\n                    const type = parentList ? parentList.getTag() : element.getTag();\n                    setBlockType(type);\n                } else {\n                    const type = $isHeadingNode(element)\n                        ? element.getTag()\n                        : element.getType();\n                    setBlockType(type);\n                    if ($isCodeNode(element)) {\n                        setCodeLanguage(element.getLanguage() || getDefaultCodeLanguage());\n                    }\n                }\n            }\n            // Update text format\n            setIsBold(selection.hasFormat(\"bold\"));\n            setIsItalic(selection.hasFormat(\"italic\"));\n            setIsUnderline(selection.hasFormat(\"underline\"));\n            setIsStrikethrough(selection.hasFormat(\"strikethrough\"));\n            setIsCode(selection.hasFormat(\"code\"));\n            setIsRTL($isParentElementRTL(selection));\n\n            // Update links\n            const node = getSelectedNode(selection);\n            const parent = node.getParent();\n            if ($isLinkNode(parent) || $isLinkNode(node)) {\n                setIsLink(true);\n            } else {\n                setIsLink(false);\n            }\n        }\n    }, [editor]);\n\n    useEffect(() => {\n        return mergeRegister(\n            editor.registerUpdateListener(({ editorState }) => {\n                editorState.read(() => {\n                    updateToolbar();\n                });\n            }),\n            editor.registerCommand(\n                SELECTION_CHANGE_COMMAND,\n                (_payload, _newEditor) => {\n                    updateToolbar();\n                    return false;\n                },\n                LowPriority\n            ),\n            editor.registerCommand(\n                CAN_UNDO_COMMAND,\n                (payload) => {\n                    setCanUndo(payload);\n                    return false;\n                },\n                LowPriority\n            ),\n            editor.registerCommand(\n                CAN_REDO_COMMAND,\n                (payload) => {\n                    setCanRedo(payload);\n                    return false;\n                },\n                LowPriority\n            )\n        );\n    }, [editor, updateToolbar]);\n\n    const codeLanguges = useMemo(() => getCodeLanguages(), []);\n    const onCodeLanguageSelect = useCallback(\n        (e: ChangeEvent<HTMLSelectElement>) => {\n            editor.update(() => {\n                if (selectedElementKey !== null) {\n                    const node = $getNodeByKey(selectedElementKey);\n                    if ($isCodeNode(node)) {\n                        node.setLanguage(e.target.value);\n                    }\n                }\n            });\n        },\n        [editor, selectedElementKey]\n    );\n\n    const insertLink = useCallback(() => {\n        if (!isLink) {\n            editor.dispatchCommand(TOGGLE_LINK_COMMAND, \"https://\");\n        } else {\n            editor.dispatchCommand(TOGGLE_LINK_COMMAND, null);\n        }\n    }, [editor, isLink]);\n\n    const [portalContainer, setPortalContainer] = useState<HTMLDivElement | null>(null);\n    useEffect(() => {\n        const container = document.getElementById(\"room-wrapper\");\n        const portalContainer = document.createElement('div');\n        container?.prepend(portalContainer)\n        setPortalContainer(portalContainer)\n        return () => {\n            container?.removeChild(portalContainer)\n        }\n    }, [])\n\n    return (\n        <div className=\"toolbar\" ref={toolbarRef}>\n            <button\n                disabled={!canUndo}\n                onClick={() => {\n                    editor.dispatchCommand(UNDO_COMMAND, undefined);\n                }}\n                className=\"toolbar-item spaced\"\n                aria-label=\"Undo\"\n            >\n                <Undo className=\"format\" size={20} />\n            </button>\n            <button\n                disabled={!canRedo}\n                onClick={() => {\n                    editor.dispatchCommand(REDO_COMMAND, undefined);\n                }}\n                className=\"toolbar-item\"\n                aria-label=\"Redo\"\n            >\n                <Redo className=\"format\" size={20} />\n            </button>\n            <Divider />\n            {supportedBlockTypes.has(blockType) && (\n                <>\n                    <button\n                        className=\"toolbar-item block-controls\"\n                        onClick={() =>\n                            setShowBlockOptionsDropDown(!showBlockOptionsDropDown)\n                        }\n                        aria-label=\"Formatting Options\"\n                    >\n                        {\n                            blockType === \"h1\" ?\n                                <Heading1 className=\"icon\" size={20} /> :\n                                blockType === \"h2\" ?\n                                    <Heading2 className=\"icon\" size={20} /> :\n                                    blockType === \"h3\" ?\n                                        <Heading3 className=\"icon\" size={20} /> :\n                                        blockType === \"h4\" ?\n                                            <Heading4 className=\"icon\" size={20} /> :\n                                            blockType === \"h5\" ?\n                                                <Heading5 className=\"icon\" size={20} /> :\n                                                blockType === \"code\" ?\n                                                    <Code className=\"icon\" size={20} /> :\n                                                    blockType === \"custom-paragraph\" ?\n                                                        <Text className=\"icon\" size={20} /> :\n                                                        blockType === \"ol\" ?\n                                                            <ListOrdered className=\"icon\" size={20} /> :\n                                                            blockType === \"ul\" ?\n                                                                <List className=\"icon\" size={20} /> :\n                                                                blockType === \"quote\" ?\n                                                                    <Quote className=\"icon\" size={20} /> :\n                                                                    <></>\n                        }\n                        <span className=\"text\">{blockTypeToBlockName[blockType]}</span>\n                        <ChevronDown size={20} />\n                    </button>\n                    {showBlockOptionsDropDown &&\n                        createPortal(\n                            <BlockOptionsDropdownList\n                                editor={editor}\n                                blockType={blockType}\n                                toolbarRef={toolbarRef}\n                                setShowBlockOptionsDropDown={setShowBlockOptionsDropDown}\n                            />,\n                            portalContainer!!\n                        )}\n                    <Divider />\n                </>\n            )}\n            {blockType === \"code\" ? (\n                <>\n                    <Select\n                        className=\"toolbar-item code-language\"\n                        onChange={onCodeLanguageSelect}\n                        options={codeLanguges}\n                        value={codeLanguage}\n                    />\n                    <i className=\"chevron-down inside\" />\n                </>\n            ) : (\n                <>\n                    <button\n                        onClick={() => {\n                            editor.dispatchCommand(FORMAT_TEXT_COMMAND, \"bold\");\n                        }}\n                        className={\"toolbar-item spaced \" + (isBold ? \"active\" : \"\")}\n                        aria-label=\"Format Bold\"\n                    >\n                        <Bold className=\"format\" size={20} />\n                    </button>\n                    <button\n                        onClick={() => {\n                            editor.dispatchCommand(FORMAT_TEXT_COMMAND, \"italic\");\n                        }}\n                        className={\"toolbar-item spaced \" + (isItalic ? \"active\" : \"\")}\n                        aria-label=\"Format Italics\"\n                    >\n                        <Italic className=\"format\" size={20} />\n                    </button>\n                    <button\n                        onClick={() => {\n                            editor.dispatchCommand(FORMAT_TEXT_COMMAND, \"underline\");\n                        }}\n                        className={\"toolbar-item spaced \" + (isUnderline ? \"active\" : \"\")}\n                        aria-label=\"Format Underline\"\n                    >\n                        <Underline className=\"format\" size={20} />\n                    </button>\n                    <button\n                        onClick={() => {\n                            editor.dispatchCommand(FORMAT_TEXT_COMMAND, \"strikethrough\");\n                        }}\n                        className={\n                            \"toolbar-item spaced \" + (isStrikethrough ? \"active\" : \"\")\n                        }\n                        aria-label=\"Format Strikethrough\"\n                    >\n                        <Strikethrough className=\"format\" size={20} />\n                    </button>\n                    <button\n                        onClick={() => {\n                            editor.dispatchCommand(FORMAT_TEXT_COMMAND, \"code\");\n                        }}\n                        className={\"toolbar-item spaced \" + (isCode ? \"active\" : \"\")}\n                        aria-label=\"Insert Code\"\n                    >\n                        <Code className=\"format\" size={20} />\n                    </button>\n                    <button\n                        onClick={insertLink}\n                        className={\"toolbar-item spaced \" + (isLink ? \"active\" : \"\")}\n                        aria-label=\"Insert Link\"\n                    >\n                        <Link className=\"format\" size={20} />\n                    </button>\n                    {isLink &&\n                        createPortal(<FloatingLinkEditor editor={editor} />, document.body)}\n                    {\" \"}\n                </>\n            )}\n        </div>\n    );\n})\n\nexport default ToolbarPlugin;","import { registerCodeHighlighting } from \"@lexical/code\";\nimport { useLexicalComposerContext } from \"@lexical/react/LexicalComposerContext\";\nimport { useEffect } from \"react\";\n\nexport default function CodeHighlightPlugin() {\n    const [editor] = useLexicalComposerContext();\n    useEffect(() => {\n        return registerCodeHighlighting(editor);\n    }, [editor]);\n    return null;\n}\n","const editorTheme = {\n    ltr: \"ltr\",\n    rtl: \"rtl\",\n    placeholder: \"editor-placeholder\",\n    paragraph: \"editor-paragraph\",\n    quote: \"editor-quote\",\n    heading: {\n        h1: \"editor-heading-h1\",\n        h2: \"editor-heading-h2\",\n        h3: \"editor-heading-h3\",\n        h4: \"editor-heading-h4\",\n        h5: \"editor-heading-h5\"\n    },\n    list: {\n        nested: {\n            listitem: \"editor-nested-listitem\"\n        },\n        ol: \"editor-list-ol\",\n        ul: \"editor-list-ul\",\n        listitem: \"editor-listitem\"\n    },\n    image: \"editor-image\",\n    link: \"editor-link\",\n    text: {\n        bold: \"editor-text-bold\",\n        italic: \"editor-text-italic\",\n        overflowed: \"editor-text-overflowed\",\n        hashtag: \"editor-text-hashtag\",\n        underline: \"editor-text-underline\",\n        strikethrough: \"editor-text-strikethrough\",\n        underlineStrikethrough: \"editor-text-underlineStrikethrough\",\n        code: \"editor-text-code\"\n    },\n    code: \"editor-code\",\n    codeHighlight: {\n        atrule: \"editor-tokenAttr\",\n        attr: \"editor-tokenAttr\",\n        boolean: \"editor-tokenProperty\",\n        builtin: \"editor-tokenSelector\",\n        cdata: \"editor-tokenComment\",\n        char: \"editor-tokenSelector\",\n        class: \"editor-tokenFunction\",\n        \"class-name\": \"editor-tokenFunction\",\n        comment: \"editor-tokenComment\",\n        constant: \"editor-tokenProperty\",\n        deleted: \"editor-tokenProperty\",\n        doctype: \"editor-tokenComment\",\n        entity: \"editor-tokenOperator\",\n        function: \"editor-tokenFunction\",\n        important: \"editor-tokenVariable\",\n        inserted: \"editor-tokenSelector\",\n        keyword: \"editor-tokenAttr\",\n        namespace: \"editor-tokenVariable\",\n        number: \"editor-tokenProperty\",\n        operator: \"editor-tokenOperator\",\n        prolog: \"editor-tokenComment\",\n        property: \"editor-tokenProperty\",\n        punctuation: \"editor-tokenPunctuation\",\n        regex: \"editor-tokenVariable\",\n        selector: \"editor-tokenSelector\",\n        string: \"editor-tokenSelector\",\n        symbol: \"editor-tokenProperty\",\n        tag: \"editor-tokenProperty\",\n        url: \"editor-tokenOperator\",\n        variable: \"editor-tokenVariable\"\n    }\n};\n\nexport default editorTheme;\n","\nimport { $generateHtmlFromNodes, } from '@lexical/html';\nimport { InitialConfigType, LexicalComposer } from '@lexical/react/LexicalComposer';\nimport { RichTextPlugin } from '@lexical/react/LexicalRichTextPlugin';\nimport { ContentEditable } from '@lexical/react/LexicalContentEditable';\nimport { HistoryPlugin } from '@lexical/react/LexicalHistoryPlugin';\nimport LexicalErrorBoundary from '@lexical/react/LexicalErrorBoundary';\nimport { LinkPlugin } from '@lexical/react/LexicalLinkPlugin';\nimport { HeadingNode, QuoteNode } from \"@lexical/rich-text\";\nimport { TableCellNode, TableNode, TableRowNode } from \"@lexical/table\";\nimport { ListItemNode, ListNode } from \"@lexical/list\";\nimport { CodeHighlightNode, CodeNode } from \"@lexical/code\";\nimport { AutoLinkNode, LinkNode } from \"@lexical/link\";\nimport { MarkdownShortcutPlugin } from \"@lexical/react/LexicalMarkdownShortcutPlugin\";\nimport { ClearEditorPlugin } from \"@lexical/react/LexicalClearEditorPlugin\";\nimport { TRANSFORMERS, $convertToMarkdownString } from \"@lexical/markdown\";\n\nimport AutoLinkPlugin from \"./plugins/AutoLinkPlugin\";\nimport ToolbarPlugin from \"./plugins/ToolbarPlugin\";\n//import TreeViewPlugin from \"./plugins/DebugPlugin\";\nimport { CustomParagraphNode } from './customNodes/CustomParagraphNode';\nimport CodeHighlightPlugin from './plugins/CodeHighlightPlugin';\nimport EditorTheme from './theme';\n\nimport './input.scss';\nimport { FC, memo, useEffect, useState } from 'react';\nimport { Send } from 'lucide-react';\nimport { useLexicalComposerContext } from '@lexical/react/LexicalComposerContext';\nimport { $getSelection, $isRangeSelection, CLEAR_EDITOR_COMMAND, CLEAR_HISTORY_COMMAND, COMMAND_PRIORITY_CRITICAL, INSERT_PARAGRAPH_COMMAND, KEY_ENTER_COMMAND, ParagraphNode } from 'lexical';\nimport { useLocation, } from 'react-router-dom';\nimport { Room } from '../../../app/sdk/room';\n\nexport const CAN_USE_DOM: boolean =\n    typeof window !== 'undefined' &&\n    typeof window.document !== 'undefined' &&\n    typeof window.document.createElement !== 'undefined';\n\n\ndeclare global {\n    interface Document {\n        documentMode?: unknown;\n    }\n\n    interface Window {\n        MSStream?: unknown;\n    }\n}\n\nconst documentMode =\n    CAN_USE_DOM && 'documentMode' in document ? document.documentMode : null;\n\nexport const CAN_USE_BEFORE_INPUT: boolean =\n    CAN_USE_DOM && 'InputEvent' in window && !documentMode\n        ? 'getTargetRanges' in new window.InputEvent('input')\n        : false;\n\nexport const IS_SAFARI: boolean =\n    CAN_USE_DOM && /Version\\/[\\d.]+.*Safari/.test(navigator.userAgent);\n\nexport const IS_IOS: boolean =\n    CAN_USE_DOM &&\n    /iPad|iPhone|iPod/.test(navigator.userAgent) &&\n    !window.MSStream;\n\n\n// Keep these in case we need to use them in the future.\n// export const IS_WINDOWS: boolean = CAN_USE_DOM && /Win/.test(navigator.platform);\nexport const IS_CHROME: boolean =\n    CAN_USE_DOM && /^(?=.*Chrome).*/i.test(navigator.userAgent);\n// export const canUseTextInputEvent: boolean = CAN_USE_DOM && 'TextEvent' in window && !documentMode;\n\nexport const IS_APPLE_WEBKIT =\n    CAN_USE_DOM && /AppleWebKit\\/[\\d.]+/.test(navigator.userAgent) && !IS_CHROME;\n\ntype ChatInputProps = {\n    /**\n     * The Namespace\n     */\n    namespace: string\n    /**\n     * The current Room\n     */\n    room: Room\n};\n\nfunction Placeholder() {\n    return <div className=\"editor-placeholder\" id=\"editor-placeholder\">Enter message...</div>;\n}\n\ntype SendButtonProps = {\n    /**\n     * Callback when sending starts\n     */\n    onStartSending: () => void\n    /**\n     * Callback when sending stops\n     */\n    onStopSending: () => void\n    /**\n     * The current Room\n     */\n    room: Room\n};\n\nconst SendButton: FC<SendButtonProps> = ({ onStartSending, onStopSending, room }: SendButtonProps) => {\n    const [editor] = useLexicalComposerContext();\n\n    //TODO: Room change fails\n    const sendMessage = (room?: Room) => {\n        // TODO: Sanitize the html and send message to room\n        if (!room) {\n            console.warn(\"Got no room\")\n            return;\n        }\n\n        editor.getEditorState().read(() => {\n            let htmlMessage = $generateHtmlFromNodes(editor);\n            // TODO: Make sure that we strip any non matrix stuff\n            const codeRegex = /(?<all><code .* (?:data-highlight-language=\"(?<language>.*?)\")(?: .*?)?>(?<code>[\\s\\S]*?)<\\/code>)/;\n            let matched = codeRegex.exec(htmlMessage);\n            while (matched !== null) {\n                if (matched) {\n                    const { groups } = matched;\n                    if (groups) {\n                        const { all, language } = groups;\n                        let { code } = groups;\n\n                        const spanRegex = /<span(?: class=\".*?\")?>(?<content>.*?)<\\/span>/;\n                        let matchedspans = spanRegex.exec(code);\n                        while (matchedspans !== null) {\n                            if (matchedspans) {\n                                const { groups } = matchedspans;\n                                if (groups) {\n                                    const { content } = groups;\n\n                                    code = code.replaceAll(matchedspans[0], content)\n                                }\n                            }\n                            matchedspans = spanRegex.exec(code)\n                        }\n\n                        code = code.replaceAll(\"<br>\", \"\\n\")\n                        htmlMessage = htmlMessage.replace(all, `<pre><code class=\"language-${language}\">${code}</code></pre>`)\n                    }\n                }\n                matched = codeRegex.exec(htmlMessage)\n            }\n            const plainMessage = $convertToMarkdownString(TRANSFORMERS);\n\n            console.log(htmlMessage)\n            // TODO: local echo\n            if ((htmlMessage === \"\" && plainMessage === \"\") || htmlMessage === '<p class=\"editor-paragraph\"><br></p>') {\n                return;\n            }\n            onStartSending();\n            console.log(\"Sending message to: \", room.roomID)\n\n            if (htmlMessage !== '<p class=\"editor-paragraph\"><br></p>') {\n                room.sendHtmlMessage(htmlMessage, plainMessage, () => {\n                    editor.dispatchCommand(CLEAR_EDITOR_COMMAND, undefined);\n                    editor.dispatchCommand(CLEAR_HISTORY_COMMAND, undefined);\n                    localStorage.removeItem(`editor-${room.roomID}`);\n                    onStopSending();\n                }).catch((e) => {\n                    console.log(e);\n                    onStopSending();\n                })\n            } else {\n                room.sendTextMessage(plainMessage, () => {\n                    editor.dispatchCommand(CLEAR_EDITOR_COMMAND, undefined);\n                    editor.dispatchCommand(CLEAR_HISTORY_COMMAND, undefined);\n                    localStorage.removeItem(`editor-${room.roomID}`);\n                    onStopSending();\n                }).catch((e) => {\n                    console.log(e);\n                    onStopSending();\n                })\n            }\n        })\n    };\n\n    useEffect(() => {\n        if (!room) {\n            return;\n        }\n        const removeCommand = editor.registerCommand<KeyboardEvent | null>(\n            KEY_ENTER_COMMAND,\n            (event: KeyboardEvent | null): boolean => {\n                console.log(\"Room changed\", room.roomID)\n                const selection = $getSelection();\n                if (!$isRangeSelection(selection)) {\n                    return false;\n                }\n                if (event !== null && event !== undefined) {\n                    // If we have beforeinput, then we can avoid blocking\n                    // the default behavior. This ensures that the iOS can\n                    // intercept that we're actually inserting a paragraph,\n                    // and autocomplete, autocapitalize etc work as intended.\n                    // This can also cause a strange performance issue in\n                    // Safari, where there is a noticeable pause due to\n                    // preventing the key down of enter.\n                    if (\n                        (IS_IOS || IS_SAFARI || IS_APPLE_WEBKIT) &&\n                        CAN_USE_BEFORE_INPUT\n                    ) {\n                        return false;\n                    }\n                    event.preventDefault();\n                    if (event.shiftKey) {\n                        return editor.dispatchCommand(INSERT_PARAGRAPH_COMMAND, undefined);\n                    }\n                    sendMessage(room);\n                }\n                return editor.dispatchCommand(INSERT_PARAGRAPH_COMMAND, undefined);\n            },\n            COMMAND_PRIORITY_CRITICAL,\n        )\n        return () => {\n            console.log(\"Removing command since room or editor changed\")\n            removeCommand()\n        }\n    }, [editor, room])\n\n    return <Send\n        size={45}\n        stroke='unset'\n        className='stroke-slate-600 rounded m-4 hover:bg-slate-300 hover:stroke-slate-500 p-2 cursor-pointer'\n        onClick={() => { sendMessage(room) }} />\n};\n\n\ntype RoomChangeProps = {\n    /**\n     * The current Room\n     */\n    room: Room\n};\n\nconst RoomChangePlugin: FC<RoomChangeProps> = ({ room }) => {\n    const [editor] = useLexicalComposerContext();\n    const { pathname } = useLocation();\n    const [prevRoom, setPrevRoom] = useState<string | undefined>(undefined);\n\n    useEffect(() => {\n        if (room) {\n            const roomID = room.roomID;\n            if (roomID !== prevRoom) {\n                console.log(\"Saving editor state\")\n                // Save the editor state to local storage\n                const editorState = editor.getEditorState();\n                localStorage.setItem(`editor-${prevRoom}`, JSON.stringify(editorState.toJSON()));\n            }\n            setPrevRoom(roomID);\n            const savedHtml = localStorage.getItem(`editor-${roomID}`);\n            if (savedHtml) {\n                const initialEditorState = editor.parseEditorState(savedHtml)\n                editor.setEditorState(initialEditorState)\n            } else {\n                editor.dispatchCommand(CLEAR_EDITOR_COMMAND, undefined);\n                editor.dispatchCommand(CLEAR_HISTORY_COMMAND, undefined);\n            }\n        }\n    }, [pathname, room]);\n\n    return <></>\n}\n\nconst ChatInput: FC<ChatInputProps> = memo(({ namespace, room }: ChatInputProps) => {\n    const [sending, setSending] = useState(false);\n\n    const initialConfig: InitialConfigType = {\n        namespace: namespace,\n        theme: EditorTheme,\n        onError: (e) => console.error(e),\n        editable: !sending,\n        nodes: [\n            HeadingNode,\n            ListNode,\n            ListItemNode,\n            QuoteNode,\n            CodeNode,\n            CodeHighlightNode,\n            TableNode,\n            TableCellNode,\n            TableRowNode,\n            AutoLinkNode,\n            LinkNode,\n            CustomParagraphNode,\n            {\n                replace: ParagraphNode,\n                with: (_node: ParagraphNode) => {\n                    return new CustomParagraphNode();\n                }\n            }\n        ]\n    }\n    return (\n        <div className='flex flex-row items-end'>\n            <LexicalComposer initialConfig={initialConfig}>\n                <div className=\"editor-container flex-1\">\n                    <ToolbarPlugin />\n                    <div className=\"editor-inner\">\n                        <RichTextPlugin\n                            contentEditable={<ContentEditable className=\"editor-input\" ariaLabelledBy='editor-placeholder' />}\n                            placeholder={<Placeholder />}\n                            ErrorBoundary={LexicalErrorBoundary}\n                        />\n                        <HistoryPlugin />\n                        <LinkPlugin />\n                        <CodeHighlightPlugin />\n                        <AutoLinkPlugin />\n                        <MarkdownShortcutPlugin transformers={TRANSFORMERS} />\n                        <ClearEditorPlugin />\n                        <RoomChangePlugin room={room} />\n                        {/*<TreeViewPlugin />*/}\n                    </div>\n                </div>\n                <SendButton room={room} onStartSending={() => { console.log(\"Sending\"); setSending(true) }} onStopSending={() => { setSending(false) }} />\n            </LexicalComposer>\n\n        </div>\n    );\n})\n\nexport default ChatInput;","import { FC, memo, useContext, useEffect, useState } from \"react\";\nimport RoomListItem from \"./roomListItem/roomListItem\";\nimport { ChevronDown, ChevronRight } from \"lucide-react\";\nimport './roomList.scss';\nimport { useNavigate } from \"react-router-dom\";\nimport { MatrixContext } from \"../../app/sdk/client\";\nimport { useInView } from \"react-intersection-observer\";\nimport { OnlineState } from \"../../app/sdk/api/otherEnums\";\n\ntype Room = {\n    /**\n     * The URL of the Avatar image\n     */\n    avatarUrl?: string\n    /**\n     * The displayname of the room list item\n     */\n    displayname: string\n    /**\n     * Wether it is a DM or not\n     */\n    dm: boolean\n    /**\n     * Wether the user is online. Only used if dm is true.\n     */\n    online: OnlineState\n    /**\n     * The roomid of the Room\n     */\n    roomID: string\n};\n\nexport type Section = {\n    /**\n     * Section Name. Can be a Space or a Tag\n     */\n    sectionName: string\n    /**\n     * The Rooms within the Section\n     */\n    rooms: Room[]\n    /**\n     * The Subsections of the Section\n     */\n    subsections: Section[]\n    /**\n     * The roomid of the Space\n     */\n    roomID: string\n}\n\ntype RoomListProps = {\n    /**\n     * The Sections available\n     */\n    sections: Section[]\n    /**\n     * Rooms outside of any Sections\n     */\n    rooms: Room[]\n    /**\n     * Rooms outside of any Sections and DM\n     */\n    dmRooms: Room[]\n};\n\ntype RoomListRoomsProps = {\n    /**\n     * The roomid of the Space\n     */\n    sectionID: string\n    /**\n     * Rooms\n     */\n    rooms: Room[]\n    /**\n     * The onClick handler\n     */\n    onClick: (roomID: string) => void;\n    /**\n     * The activeRoom\n     */\n    activeRoom?: string;\n    /**\n     * If rooms are hidden\n     */\n    hidden: boolean\n};\n\nconst RoomListRooms: FC<RoomListRoomsProps> = memo(({ sectionID, rooms, onClick, activeRoom, hidden }: RoomListRoomsProps) => {\n    // Get room ids of rooms\n    const roomsRendered = rooms.map(room => {\n        return (\n            <RoomListItem\n                roomId={room.roomID}\n                hidden={hidden}\n                key={`${room.roomID}+${sectionID}`}\n                avatarUrl={room.avatarUrl}\n                displayname={room.displayname}\n                dm={room.dm}\n                online={room.online}\n                active={room.roomID === activeRoom}\n                onClick={() => { onClick(room.roomID) }}\n            />\n        );\n    });\n    return (\n        <>\n            {roomsRendered}\n        </>\n    );\n})\n\nconst RoomSection: FC<{ section: Section, onRoomClick: (roomID: string) => void, activeRoom: string | undefined }> = memo(({ section, onRoomClick, activeRoom }: { section: Section, onRoomClick: (roomID: string) => void, activeRoom: string | undefined }) => {\n    const [hidden, setHidden] = useState<boolean>(true);\n    const matrixClient = useContext(MatrixContext);\n    const { ref, inView } = useInView({\n        triggerOnce: true,\n        threshold: 1,\n        onChange(inView) {\n            if (section.roomID !== \"other\") {\n                if (inView) {\n                    matrixClient.addInViewRoom(section.roomID)\n                } else {\n                    matrixClient.removeInViewRoom(section.roomID)\n                }\n            }\n        },\n    });\n    useEffect(() => {\n        if (hidden) {\n            matrixClient.removeSpaceOpen(section.roomID);\n        } else {\n            matrixClient.addSpaceOpen(section.roomID);\n        }\n    }, [hidden])\n    return (\n        <div ref={ref} key={section.roomID} className=\"flex flex-col gap-1 pl-4 select-none\">\n            {\n                inView && <div className=\"flex flex-row gap-2 py-1 items-center justify-start cursor-pointer h-8 text-slate-600\" onClick={() => setHidden(prev => !prev)}>\n                    {hidden ? <ChevronRight size={14} /> : <ChevronDown size={14} />}\n                    <span className='font-normal text-base capitalize max-w-[32ch] overflow-hidden text-ellipsis w-full whitespace-nowrap'>{section.sectionName}</span>\n                </div >}\n            {!hidden && inView && (<RoomListRooms\n                hidden={hidden}\n                sectionID={section.roomID}\n                rooms={section.rooms}\n                onClick={onRoomClick}\n                activeRoom={activeRoom}\n            />)}\n            {!hidden && inView && (\n                section.subsections.map(section => {\n                    return (\n                        <RoomSection\n                            key={section.roomID}\n                            section={section}\n                            onRoomClick={onRoomClick}\n                            activeRoom={activeRoom}\n                        />\n                    );\n                })\n            )}\n        </div>\n    );\n})\n\nconst RoomList: FC<RoomListProps> = memo(({ sections, rooms, dmRooms }: RoomListProps) => {\n    const [activeRoom, setActiveRoom] = useState<string | undefined>(undefined);\n    const navigate = useNavigate();\n\n    return (\n        <div className=\"flex flex-col gap-1 flex-1 p-2 min-w-[30ch] overflow-y-auto overflow-x-hidden scrollbarSmall max-w-[33ch]\">\n            <RoomSection\n                section={{\n                    sectionName: \"DMs\",\n                    roomID: \"dms\",\n                    subsections: [],\n                    rooms: dmRooms\n                }}\n                onRoomClick={(roomID: string) => {\n                    setActiveRoom(roomID);\n                    navigate(`/${encodeURIComponent(roomID)}`);\n                }}\n                activeRoom={activeRoom}\n            />\n            {\n                sections.map(section => {\n                    return (\n                        <RoomSection\n                            key={section.roomID}\n                            section={section}\n                            onRoomClick={(roomID: string) => {\n                                setActiveRoom(roomID);\n                                navigate(`/${encodeURIComponent(roomID)}`);\n                            }}\n                            activeRoom={activeRoom}\n                        />\n                    );\n                })\n            }\n            <RoomSection\n                section={{\n                    sectionName: \"Others\",\n                    roomID: \"other\",\n                    subsections: [],\n                    rooms: rooms\n                }}\n                onRoomClick={(roomID: string) => {\n                    setActiveRoom(roomID);\n                    navigate(`/${encodeURIComponent(roomID)}`);\n                }}\n                activeRoom={activeRoom}\n            />\n\n        </div>\n    );\n})\n\nexport default RoomList","import { Meta } from \"@storybook/addon-docs\";\n\n<Meta title=\"Introduction/Welcome\" />\n\n# About Cetirizine\n\nWelcome to the Cetirizine Design System!\n\nThis storybook design system describes in depth the components used within the\nCetirizine Matrix Client.\n\nThe Design heavily leans on the Tailwindcss Design System. However there are speciic\ncomponents for some things and Pages are also documented.\n","import { memo, useContext, useState } from 'react';\nimport Button from '../button/button';\nimport Header from '../header/header';\nimport Input from '../input/basic/input';\nimport { Navigate } from 'react-router-dom';\nimport { MatrixContext } from '../../app/sdk/client';\n\nconst Login = memo(() => {\n    const matrixClient = useContext(MatrixContext);\n    const [loginPending, setLoginPending] = useState(false);\n    const [loginError, setLoginError] = useState('');\n    const [username, setUsername] = useState('');\n    const [password, setPassword] = useState('');\n    if (matrixClient.isLoggedIn) {\n        //@ts-ignore\n        if (!globalThis.IS_STORYBOOK) {\n            return <Navigate to=\"/\" />;\n        }\n    }\n    const startLogin = async () => {\n        try {\n            setLoginPending(true);\n            await matrixClient.passwordLogin(username, password);\n        } catch (e: any) {\n            setLoginError(e.toString());\n        }\n        setLoginPending(false);\n    }\n    return (\n        <form className=\"flex flex-col rounded-md shadow p-4 bg-white gap-2 min-w-[30rem]\" onSubmit={(e) => {\n            e.preventDefault();\n            startLogin();\n        }}>\n            <Header>Login</Header>\n            {loginError ? <h2 className='text-red-500 font-normal text-sm'>{loginError}</h2> : <div className='min-h-[1.25rem]'></div>}\n            <Input\n                readonly={loginPending}\n                value={username}\n                placeholder=\"Username\"\n                onChange={e => setUsername(e.target.value)}\n            />\n            <Input\n                readonly={loginPending}\n                value={password}\n                password={true}\n                placeholder=\"Password\"\n                onChange={e => setPassword(e.target.value)}\n            />\n            <Button\n                readonly={loginPending}\n                style=\"primary\"\n                type=\"submit\"\n            >\n                Login\n            </Button>\n        </form>\n    );\n})\n\nexport default Login;","import './LoginPage.scss';\nimport Login from '../components/login/login';\nimport { memo, useContext, useEffect, useState } from 'react';\nimport { MatrixContext } from '../app/sdk/client';\n\nconst LoginPage = memo(() => {\n    const matrixClient = useContext(MatrixContext);\n    const [loading, setLoading] = useState(true)\n\n    useEffect(() => {\n        if (loading) {\n            // Ensure logout worked\n            matrixClient.logout().then(() => {\n                setLoading(false)\n            });\n        }\n    }, [loading, matrixClient])\n\n    if (loading) {\n        return (\n            <div className=\"flex flex-col items-center justify-center min-h-screen bg-img\">\n                <div className=\"flex flex-col rounded-md shadow p-4 bg-white gap-2 min-w-[30rem]\">\n                    <h1 className=\"text-2xl font-bold text-center\">Loading...</h1>\n                </div>\n            </div>\n        );\n    }\n\n    return (\n        <div className=\"flex flex-col items-center justify-center min-h-screen bg-img\">\n            <Login />\n        </div>\n    );\n})\n\nexport default LoginPage;\n","import { Settings } from 'lucide-react';\nimport Avatar from '../components/avatar/avatar';\nimport ChatInput from '../components/input/chat/input';\nimport RoomList, { Section } from '../components/roomList/roomList';\nimport './MainPage.scss';\nimport { useProfile, useRoom, useRooms, useSpaces } from '../app/sdk/client';\nimport { Room } from '../app/sdk/room';\nimport { FC, memo, useCallback, useContext, useEffect, useState } from 'react';\nimport { MatrixContext } from '../app/sdk/client';\nimport { useLocation, useParams } from 'react-router-dom';\nimport MessageEvent from '../components/events/messageEvent';\nimport UnknownEvent, { RedactedEvent, UndecryptableEvent } from '../components/events/unknownEvent';\nimport MemberEvent from '../components/events/memberEvent';\nimport { IRoomEvent, IRoomMemberEvent } from '../app/sdk/api/events';\nimport Linkify from 'linkify-react';\nimport { OnlineState } from '../app/sdk/api/otherEnums';\nimport { Virtuoso } from 'react-virtuoso';\n\ntype ChatViewProps = {\n    /**\n     * The roomID of the room to display\n     * If the roomID is empty, the ChatView will be empty\n     * If the roomID is invalid, the ChatView will be empty\n     * If the roomID is valid, the ChatView will display the room\n     * If the roomID is valid, but the room is not joined, the ChatView will display a placeholder\n     * If the roomID is valid, but the room is not loaded, the ChatView will display a placeholder\n     */\n    room?: Room\n};\n\nconst ChatView: FC<ChatViewProps> = memo(({ room, }) => {\n    const client = useContext(MatrixContext);\n    const [events, setEvents] = useState<IRoomEvent[]>([]);\n    const [eventsFull, setEventsFull] = useState<IRoomEvent[]>([]);\n    const { pathname } = useLocation();\n    const [previousPathname, setPreviousPathname] = useState<string | undefined>(undefined);\n    const [firstItemIndex, setFirstItemIndex] = useState<number | undefined>(undefined)\n\n    const decryptEvents = async (index: number, event: IRoomEvent, eventsFull: IRoomEvent[]) => {\n        let previousEvent = eventsFull?.[index - 1];\n        const previousEventIsFromSameSender = previousEvent?.sender === event.sender;\n        // Check if event is redacted\n        const redaction = eventsFull?.find((e) => {\n            return e.type === \"m.room.redaction\" && e.redacts === event.event_id;\n        });\n        const redacted = redaction !== undefined;\n        let redacted_because = undefined;\n        let redaction_id = undefined;\n        if (redacted) {\n            redaction_id = redaction?.event_id;\n            if (redaction.content.reason) {\n                redacted_because = redaction.content.reason;\n            }\n        }\n\n        // Decrypt the event if it is encrypted\n        if (event.type === \"m.room.encrypted\" && room?.roomID) {\n            try {\n                const decrypted_event = await client.decryptRoomEvent(room.roomID, event);\n                if (decrypted_event) {\n                    event = JSON.parse(decrypted_event.event) as IRoomEvent;\n                    if (event.content[\"m.new_content\"]) {\n                        event.content.body = event.content[\"m.new_content\"].body;\n                        event.content.formatted_body = event.content[\"m.new_content\"].formatted_body;\n                        event.content.format = event.content[\"m.new_content\"].format;\n                    }\n                } else {\n                    if (redacted) {\n                        return {\n                            ...event,\n                            unsigned: {\n                                ...event.unsigned,\n                                redacted: true,\n                                redacted_because: redacted_because,\n                                hasPreviousEvent: previousEventIsFromSameSender,\n                                redaction_id: redaction_id\n                            }\n                        }\n                    }\n                    return {\n                        ...event,\n                        unsigned: {\n                            ...event.unsigned,\n                            undecryptable: true,\n                            key: event.event_id,\n                            hasPreviousEvent: previousEventIsFromSameSender\n                        }\n                    }\n                }\n            } catch (e: any) {\n                if (redacted) {\n                    return {\n                        ...event,\n                        unsigned: {\n                            ...event.unsigned,\n                            redacted: true,\n                            redacted_because: redacted_because,\n                            hasPreviousEvent: previousEventIsFromSameSender,\n                            redaction_id: redaction_id\n                        }\n                    }\n                }\n                return {\n                    ...event,\n                    unsigned: {\n                        ...event.unsigned,\n                        undecryptable: true,\n                        hasPreviousEvent: previousEventIsFromSameSender\n                    }\n                }\n            }\n        }\n\n        return event;\n    }\n\n    useEffect(() => {\n        if (previousPathname !== pathname) {\n            console.log(\"Resetting events because we changed rooms\");\n            setEvents([]);\n            setEventsFull([]);\n            setFirstItemIndex(0);\n            setPreviousPathname(pathname);\n        }\n\n        if ((eventsFull.length === 0) && room) {\n            const eventsAll = room?.getEvents().filter((event, index, self) => {\n                return self.findIndex(e => e.event_id === event.event_id) === index;\n            }).sort((a, b) => {\n                return b.origin_server_ts - a.origin_server_ts;\n            }).reverse();\n\n            Promise.all(eventsAll.map(async (event, index) => {\n                return await decryptEvents(index, event, eventsAll);\n            })).then((eventsRaw: IRoomEvent[]) => {\n                const no_relations = eventsRaw.filter(event => event.type !== \"m.reaction\" &&\n                    event.type !== \"m.room.redaction\" &&\n                    event.content[\"m.relates_to\"]?.[\"rel_type\"] !== \"m.replace\"\n                );\n                if (no_relations.length > 0) {\n                    const events = [...no_relations];\n                    setEventsFull(() => [...eventsRaw]);\n                    setEvents(() => events);\n                    setFirstItemIndex(events.length);\n                }\n            })\n        }\n    }, [room, events, setEvents, eventsFull, setEventsFull, pathname, previousPathname, firstItemIndex, setFirstItemIndex])\n\n\n    useEffect(() => {\n        if (room) {\n            // Listen for event updates\n            const listenForEvents = (eventsListened: IRoomEvent[]) => {\n                const eventsAll = eventsListened.filter((event, index, self) => {\n                    return self.findIndex(e => e.event_id === event.event_id) === index;\n                }).sort((a, b) => {\n                    return b.origin_server_ts - a.origin_server_ts;\n                }).reverse();\n\n                Promise.all(eventsAll.map(async (event, index) => {\n                    return await decryptEvents(index, event, eventsAll);\n                })).then((eventsRaw: IRoomEvent[]) => {\n                    const no_relations = eventsRaw.filter(event => event.type !== \"m.reaction\" &&\n                        event.type !== \"m.room.redaction\" &&\n                        event.content[\"m.relates_to\"]?.[\"rel_type\"] !== \"m.replace\"\n                    );\n\n\n                    // If there are no events or no changes, do nothing\n                    if (no_relations.length > 0 && events.length > 0) {\n                        const newEvents = [...no_relations];\n                        if (eventsRaw.length !== eventsFull.length || newEvents.length !== events.length) {\n                            setEventsFull(() => [...eventsRaw]);\n                            setEvents(() => newEvents);\n                        }\n                    }\n                })\n            };\n            console.log(\"Adding listener for events\")\n            room.on(\"events\", listenForEvents);\n            return () => {\n                console.log(\"Removing listener for events\")\n                room.off(\"events\", listenForEvents);\n            }\n        }\n    }, [room, eventsFull, events, setEventsFull, setEvents, pathname])\n\n    const renderEventPure = useCallback((_index: number, event: IRoomEvent) => {\n        const index = eventsFull.findIndex(e => e.event_id === event.event_id);\n        if (event.unsigned?.redacted) {\n            return (<RedactedEvent event={event} redacted_because={event.unsigned.redacted_because} key={event.unsigned.redaction_id} room={room} hasPreviousEvent={event.unsigned.hasPreviousEvent} />)\n        }\n\n        if (event.unsigned?.undecryptable) {\n            return (<UndecryptableEvent key={event.event_id} event={event} hasPreviousEvent={event.unsigned.hasPreviousEvent} room={room} />)\n        }\n\n        let previousEvent = eventsFull?.[index - 1];\n        const previousEventIsFromSameSender = previousEvent?.sender === event.sender;\n\n        let previousEventType = previousEvent?.type;\n\n        // Make a list of events which are reactions for the current event we want to render\n        const reactions = eventsFull?.filter((e) => {\n            return e.type === \"m.reaction\" && e.content[\"m.relates_to\"].event_id === event.event_id;\n        });\n\n        // Check if event is redacted\n        const redaction = eventsFull?.find((e) => {\n            return e.type === \"m.room.redaction\" && e.redacts === event.event_id;\n        });\n        const redacted = redaction !== undefined;\n        let redacted_because = undefined;\n        let redaction_id = undefined;\n        if (redacted) {\n            redaction_id = redaction?.event_id;\n            if (redaction.content.reason) {\n                redacted_because = redaction.content.reason;\n            }\n        }\n\n        // Check if there is an edit (m.relates_to with rel_type of \"m.replace\")\n        const edit = eventsFull?.find((e) => {\n            if (!e.content[\"m.relates_to\"]) {\n                return false;\n            }\n            return e.content[\"m.relates_to\"].rel_type === \"m.replace\" && e.content[\"m.relates_to\"].event_id === event.event_id;\n        });\n\n        // If there is an edit, use the edited event instead of the original event\n        if (edit) {\n            event = edit;\n            if (edit.content[\"m.new_content\"]) {\n                event.content.body = edit.content[\"m.new_content\"].body;\n                event.content.formatted_body = edit.content[\"m.new_content\"].formatted_body;\n                event.content.format = edit.content[\"m.new_content\"].format;\n            }\n        }\n\n        return (\n            <div className='max-w-[130ch]'>\n                {renderEvent(event, previousEventIsFromSameSender, previousEventType, reactions, redacted, redacted_because, redaction_id, room)}\n            </div>\n        )\n    }, [eventsFull])\n\n\n    if (events.length === 0 || !room || eventsFull.length === 0) {\n        return (\n            <></>\n        )\n    }\n\n    return (\n        <Virtuoso\n            alignToBottom\n            className='flex overflow-y-auto overflow-x-hidden scrollbarSmall'\n            data={events}\n            firstItemIndex={firstItemIndex}\n            initialTopMostItemIndex={events.length - 1}\n            overscan={200}\n            itemContent={renderEventPure}\n            components={{ Header }}\n            followOutput={(isAtBottom: boolean) => {\n                if (isAtBottom) {\n                    return 'smooth'\n                } else {\n                    return false\n                }\n            }}\n        />\n    );\n});\n\n\nconst Header = () => {\n    return (\n        <div\n            style={{\n                padding: '2rem',\n                display: 'flex',\n                justifyContent: 'center',\n            }}\n        >\n            Loading...\n        </div>\n    )\n}\n\n// Render events based on the event type and content\nconst renderEvent = (event: IRoomEvent, previousEventIsFromSameSender: boolean, previousEventType: string, reactions: IRoomEvent[], redacted: boolean, redacted_because: string, redaction_id?: string, room?: Room,) => {\n    if (redacted) {\n        return (<RedactedEvent event={event} redacted_because={redacted_because} room={room} hasPreviousEvent={previousEventIsFromSameSender} key={redaction_id} />)\n    }\n    switch (event.type) {\n        case \"m.room.message\":\n            return <MessageEvent reactions={reactions} event={event} room={room} key={event.event_id} hasPreviousEvent={previousEventIsFromSameSender && previousEventType === \"m.room.message\"} />\n        case \"m.room.member\":\n            return <MemberEvent event={event as IRoomMemberEvent} key={event.event_id} />\n        default:\n            return <UnknownEvent event={event} key={event.event_id} />\n    }\n}\n\nconst MainPage = memo(() => {\n    const profile = useProfile();\n    const spacesWithRooms = useSpaces();\n    const rooms = useRooms();\n    const client = useContext(MatrixContext);\n    const params = useParams();\n    const room = useRoom(decodeURIComponent(params.roomIdOrAlias || \"\"));\n    client.setCurrentRoom(params.roomIdOrAlias ? decodeURIComponent(params.roomIdOrAlias) : undefined)\n\n    // Filter toplevel spaces.\n    // A toplevel space is a space that is not a child of another space.\n    // We can not rely only on the parent. We need to check in both directions.\n    const toplevelSpaces = [...spacesWithRooms].filter(({ spaceRoom }) => {\n        const not_tombstoned = !spaceRoom.isTombstoned();\n        const not_a_child = ![...spacesWithRooms].some(({ children: otherChildren }) => {\n            return [...otherChildren].some(room => room.roomID === spaceRoom.roomID);\n        });\n        // Also check if there are no parents set\n        const no_parents = spaceRoom.getSpaceParentIDs().length === 0;\n        return not_a_child && no_parents && not_tombstoned;\n    });\n\n    // Filter rooms which are not part of any space and are not a space.\n    // A room is not part of any space if it is not a child of any space.\n    // A room is not a space if it has not any space as parent.\n    const leftOverRooms = [...rooms].filter(room => {\n        const not_tombstoned = !room.isTombstoned();\n        const not_a_child = ![...spacesWithRooms].some(({ children }) => {\n            return [...children].some(otherRoom => otherRoom.roomID === room.roomID);\n        });\n        const no_parents = room.getSpaceParentIDs().length === 0;\n        const not_a_space = !room.isSpace();\n        return not_a_child && no_parents && not_a_space && not_tombstoned;\n    }).sort((a, b) => {\n        // Sort rooms by sliding sync list order of overview list,\n\n        // Get the index of the room in the sync list.\n        const a_index = a.windowPos[\"overview\"];\n        const b_index = b.windowPos[\"overview\"];\n\n        // If the room is not in the sync list, it will be at the end of the list.\n        // This is the same as the index being -1.\n        // So we need to check for that.\n        if (a_index === -1) {\n            return 1;\n        }\n        if (b_index === -1) {\n            return -1;\n        }\n\n        // If the room is in the sync list, we can compare the indexes.\n        return a_index - b_index;\n    });\n\n\n    // Generate a list of sections.\n    // Each section apart from special toplevel ones is a space.\n    // Each space has a list of rooms and subsections.\n    // Each subsection has a list of rooms and subsections.\n    // Subsections can nest infinitely.\n    // Rooms are always within a section.\n    // A section represents a space.\n    // If a room is not within a space it is in the toplevel section \"Other\" which is at the end of the list.\n    // The toplevel section \"Other\" is always present.\n    // The toplevel section \"Other\" is always the last section.\n    const sections = toplevelSpaces.map(space => {\n        const rooms = [...space.children].filter(room => !room.isSpace() && !room.isTombstoned() && !room.isDM()).sort((a, b) => {\n            // Sort rooms by sliding sync list order of the spaces list,\n\n            // Get the index of the room in the sync list.\n            const a_index = a.windowPos[space.spaceRoom.roomID];\n            const b_index = b.windowPos[space.spaceRoom.roomID];\n\n            // If the room is not in the sync list, it will be at the end of the list.\n            // This is the same as the index being -1.\n            // So we need to check for that.\n            if (a_index === -1) {\n                return 1;\n            }\n            if (b_index === -1) {\n                return -1;\n            }\n\n            // If the room is in the sync list, we can compare the indexes.\n            return a_index - b_index;\n        }).map(room => {\n            return {\n                roomID: room.roomID,\n                displayname: room.getName(),\n                avatarUrl: room.getAvatarURL(),\n                dm: room.isDM(),\n                online: room.presence,\n            }\n        });\n\n        const generateSubsections = (subspace: Room): Section | undefined => {\n            const subspaceMeta = [...spacesWithRooms].find(space => space.spaceRoom.roomID === subspace.roomID);\n            if (subspaceMeta) {\n                const rooms = [...subspaceMeta?.children].filter(room => !room.isSpace() && !room.isTombstoned() && !room.isDM()).map(room => {\n                    return {\n                        roomID: room.roomID,\n                        displayname: room.getName(),\n                        avatarUrl: room.getAvatarURL(),\n                        dm: room.isDM(),\n                        online: room.presence,\n                    }\n                });\n\n                return {\n                    sectionName: subspace.getName(),\n                    rooms: rooms,\n                    roomID: subspace.roomID,\n                    subsections: [...subspaceMeta?.children]\n                        .filter(room => room.isSpace() && !room.isTombstoned()).map(generateSubsections)\n                        .filter(section => section !== undefined) as Section[],\n                }\n            }\n        }\n\n        // Its a little weird sicne there are no children attached to the room object. Only to spacesWithRooms.\n        // Each subsection can have further subsections and rooms.\n        return {\n            sectionName: space.spaceRoom.getName(),\n            rooms: rooms,\n            roomID: space.spaceRoom.roomID,\n            subsections: [...space.children]\n                .filter(room => room.isSpace())\n                .map(generateSubsections),\n        } as Section;\n    });\n\n    // Add the toplevel section \"Other\" to the end of the list.\n    const otherRooms = leftOverRooms.filter(room => !room.isSpace() && !room.isDM()).map(room => {\n        return {\n            roomID: room.roomID,\n            displayname: room.getName(),\n            avatarUrl: room.getAvatarURL(),\n            dm: room.isDM(),\n            online: room.presence,\n        }\n    });\n\n    const dmRooms = leftOverRooms.filter(room => !room.isSpace() && room.isDM()).map(room => {\n        return {\n            roomID: room.roomID,\n            displayname: room.getName(),\n            avatarUrl: room.getAvatarURL(),\n            dm: room.isDM(),\n            online: room.presence,\n        }\n    });\n\n\n    // Check and print if otherRooms has duplicates.\n    const otherRoomsIDs = otherRooms.map(room => room.roomID);\n    const otherRoomsDuplicates = otherRoomsIDs.filter((id, index) => otherRoomsIDs.indexOf(id) !== index);\n    if (otherRoomsDuplicates.length > 0) {\n        console.error('otherRooms has duplicates', otherRoomsDuplicates);\n    }\n\n    const linkifyOptions = {\n        defaultProtocol: \"https\",\n        rel: \"noopener\",\n        target: \"_blank\",\n        className: \"text-blue-500 hover:text-blue-700 active:text-blue-700 visited:text-blue-500\"\n    }\n\n    return <div className='flex flex-row gap-2 min-h-screen h-screen'>\n        <div className='flex flex-col bg-gradient-to-br from-slate-100 via-gray-200 to-orange-200 border-r-[1px] border-slate-300'>\n            <div className='flex flex-row gap-2 m-2 p-1 items-center border-b-2'>\n                <Avatar displayname={profile.displayname || client.mxid!} avatarUrl={profile?.avatar_url} dm={false} online={OnlineState.Unknown} />\n                <div className='flex flex-row justify-between items-center w-full'>\n                    <span className='text-base font-semibold'>{profile?.displayname}</span>\n                    <Settings size={28} stroke='unset' className='stroke-slate-600 rounded-full hover:bg-slate-300 p-1 cursor-pointer' />\n                </div>\n            </div>\n            <RoomList sections={sections} rooms={otherRooms} dmRooms={dmRooms} />\n        </div>\n        {\n            room ? <div className='flex-1 flex flex-col' id='room-wrapper'>\n                <div className='pb-2 flex flex-row items-center border-b-2 mt-4 ml-2'>\n                    <Avatar displayname={room.getName()} avatarUrl={room.getAvatarURL()} dm={room.isDM()} online={room.presence} />\n                    <div className='flex flex-row items-start'>\n                        <h1 className='text-black font-semibold text-lg flex-shrink-0'>{room.getName()}</h1>\n                        <Linkify options={linkifyOptions} as='p' className=\"ml-4 text-slate-700 font-normal text-base line-clamp-2 text-ellipsis\">{room.getTopic()}</Linkify>\n                    </div>\n                </div>\n                <div className='my-1 flex-1 flex flex-col'>\n                    <ChatView room={room} />\n                </div>\n                <ChatInput namespace='Editor' room={room} />\n            </div> : <></>\n        }\n    </div>\n})\n\nexport default MainPage;","import * as story_0 from '/@fs//home/runner/work/cetirizine/cetirizine/src/components/avatar/avatar.stories.tsx'\nimport * as story_1 from '/@fs//home/runner/work/cetirizine/cetirizine/src/components/button/button.stories.tsx'\nimport * as story_2 from '/@fs//home/runner/work/cetirizine/cetirizine/src/components/events/memberEvent.stories.tsx'\nimport * as story_3 from '/@fs//home/runner/work/cetirizine/cetirizine/src/components/events/messageEvent.stories.tsx'\nimport * as story_4 from '/@fs//home/runner/work/cetirizine/cetirizine/src/components/events/redactedEvent.stories.tsx'\nimport * as story_5 from '/@fs//home/runner/work/cetirizine/cetirizine/src/components/events/undecryptableEvent.stories.tsx'\nimport * as story_6 from '/@fs//home/runner/work/cetirizine/cetirizine/src/components/events/unknownEvent.stories.tsx'\nimport * as story_7 from '/@fs//home/runner/work/cetirizine/cetirizine/src/components/header/header.stories.tsx'\nimport * as story_8 from '/@fs//home/runner/work/cetirizine/cetirizine/src/components/input/basic/input.stories.tsx'\nimport * as story_9 from '/@fs//home/runner/work/cetirizine/cetirizine/src/components/input/chat/input.stories.tsx'\nimport * as story_10 from '/@fs//home/runner/work/cetirizine/cetirizine/src/components/roomList/roomList.stories.tsx'\nimport * as story_11 from '/@fs//home/runner/work/cetirizine/cetirizine/src/components/roomList/roomListItem/roomListItem.stories.tsx'\nimport * as story_12 from '/@fs//home/runner/work/cetirizine/cetirizine/src/documentation/Welcome.stories.mdx'\nimport * as story_13 from '/@fs//home/runner/work/cetirizine/cetirizine/src/pages/LoginPage.stories.tsx'\nimport * as story_14 from '/@fs//home/runner/work/cetirizine/cetirizine/src/pages/MainPage.stories.tsx'\n\n    function loadable(key) {\n      return {\"/home/runner/work/cetirizine/cetirizine/src/components/avatar/avatar.stories.tsx\": story_0,\"/home/runner/work/cetirizine/cetirizine/src/components/button/button.stories.tsx\": story_1,\"/home/runner/work/cetirizine/cetirizine/src/components/events/memberEvent.stories.tsx\": story_2,\"/home/runner/work/cetirizine/cetirizine/src/components/events/messageEvent.stories.tsx\": story_3,\"/home/runner/work/cetirizine/cetirizine/src/components/events/redactedEvent.stories.tsx\": story_4,\"/home/runner/work/cetirizine/cetirizine/src/components/events/undecryptableEvent.stories.tsx\": story_5,\"/home/runner/work/cetirizine/cetirizine/src/components/events/unknownEvent.stories.tsx\": story_6,\"/home/runner/work/cetirizine/cetirizine/src/components/header/header.stories.tsx\": story_7,\"/home/runner/work/cetirizine/cetirizine/src/components/input/basic/input.stories.tsx\": story_8,\"/home/runner/work/cetirizine/cetirizine/src/components/input/chat/input.stories.tsx\": story_9,\"/home/runner/work/cetirizine/cetirizine/src/components/roomList/roomList.stories.tsx\": story_10,\"/home/runner/work/cetirizine/cetirizine/src/components/roomList/roomListItem/roomListItem.stories.tsx\": story_11,\"/home/runner/work/cetirizine/cetirizine/src/documentation/Welcome.stories.mdx\": story_12,\"/home/runner/work/cetirizine/cetirizine/src/pages/LoginPage.stories.tsx\": story_13,\"/home/runner/work/cetirizine/cetirizine/src/pages/MainPage.stories.tsx\": story_14}[key];\n    }\n    \n    Object.assign(loadable, {\n      keys: () => ([\"/home/runner/work/cetirizine/cetirizine/src/components/avatar/avatar.stories.tsx\",\"/home/runner/work/cetirizine/cetirizine/src/components/button/button.stories.tsx\",\"/home/runner/work/cetirizine/cetirizine/src/components/events/memberEvent.stories.tsx\",\"/home/runner/work/cetirizine/cetirizine/src/components/events/messageEvent.stories.tsx\",\"/home/runner/work/cetirizine/cetirizine/src/components/events/redactedEvent.stories.tsx\",\"/home/runner/work/cetirizine/cetirizine/src/components/events/undecryptableEvent.stories.tsx\",\"/home/runner/work/cetirizine/cetirizine/src/components/events/unknownEvent.stories.tsx\",\"/home/runner/work/cetirizine/cetirizine/src/components/header/header.stories.tsx\",\"/home/runner/work/cetirizine/cetirizine/src/components/input/basic/input.stories.tsx\",\"/home/runner/work/cetirizine/cetirizine/src/components/input/chat/input.stories.tsx\",\"/home/runner/work/cetirizine/cetirizine/src/components/roomList/roomList.stories.tsx\",\"/home/runner/work/cetirizine/cetirizine/src/components/roomList/roomListItem/roomListItem.stories.tsx\",\"/home/runner/work/cetirizine/cetirizine/src/documentation/Welcome.stories.mdx\",\"/home/runner/work/cetirizine/cetirizine/src/pages/LoginPage.stories.tsx\",\"/home/runner/work/cetirizine/cetirizine/src/pages/MainPage.stories.tsx\"]),\n      resolve: (key) => ({\"/home/runner/work/cetirizine/cetirizine/src/components/avatar/avatar.stories.tsx\":\"./src/components/avatar/avatar.stories.tsx\",\"/home/runner/work/cetirizine/cetirizine/src/components/button/button.stories.tsx\":\"./src/components/button/button.stories.tsx\",\"/home/runner/work/cetirizine/cetirizine/src/components/events/memberEvent.stories.tsx\":\"./src/components/events/memberEvent.stories.tsx\",\"/home/runner/work/cetirizine/cetirizine/src/components/events/messageEvent.stories.tsx\":\"./src/components/events/messageEvent.stories.tsx\",\"/home/runner/work/cetirizine/cetirizine/src/components/events/redactedEvent.stories.tsx\":\"./src/components/events/redactedEvent.stories.tsx\",\"/home/runner/work/cetirizine/cetirizine/src/components/events/undecryptableEvent.stories.tsx\":\"./src/components/events/undecryptableEvent.stories.tsx\",\"/home/runner/work/cetirizine/cetirizine/src/components/events/unknownEvent.stories.tsx\":\"./src/components/events/unknownEvent.stories.tsx\",\"/home/runner/work/cetirizine/cetirizine/src/components/header/header.stories.tsx\":\"./src/components/header/header.stories.tsx\",\"/home/runner/work/cetirizine/cetirizine/src/components/input/basic/input.stories.tsx\":\"./src/components/input/basic/input.stories.tsx\",\"/home/runner/work/cetirizine/cetirizine/src/components/input/chat/input.stories.tsx\":\"./src/components/input/chat/input.stories.tsx\",\"/home/runner/work/cetirizine/cetirizine/src/components/roomList/roomList.stories.tsx\":\"./src/components/roomList/roomList.stories.tsx\",\"/home/runner/work/cetirizine/cetirizine/src/components/roomList/roomListItem/roomListItem.stories.tsx\":\"./src/components/roomList/roomListItem/roomListItem.stories.tsx\",\"/home/runner/work/cetirizine/cetirizine/src/documentation/Welcome.stories.mdx\":\"./src/documentation/Welcome.stories.mdx\",\"/home/runner/work/cetirizine/cetirizine/src/pages/LoginPage.stories.tsx\":\"./src/pages/LoginPage.stories.tsx\",\"/home/runner/work/cetirizine/cetirizine/src/pages/MainPage.stories.tsx\":\"./src/pages/MainPage.stories.tsx\"}[key])\n    });\n\n    export function configStories(configure) {\n      configure(loadable, { hot: import.meta.hot }, false);\n    }","// Ensure that the client API is initialized by the framework before any other iframe code\n    // is loaded. That way our client-apis can assume the existence of the API+store\n    import { configure } from '/home/runner/work/cetirizine/cetirizine/node_modules/@storybook/react';\n\n    import { logger } from '@storybook/client-logger';\n    import * as previewApi from \"@storybook/preview-api\";\n    import * as config_0 from '@storybook/react/preview'\nimport * as config_1 from '@storybook/addon-links/preview'\nimport * as config_2 from '@storybook/addon-essentials/docs/preview'\nimport * as config_3 from '@storybook/addon-essentials/actions/preview'\nimport * as config_4 from '@storybook/addon-essentials/backgrounds/preview'\nimport * as config_5 from '@storybook/addon-essentials/measure/preview'\nimport * as config_6 from '@storybook/addon-essentials/outline/preview'\nimport * as config_7 from '@storybook/addon-essentials/highlight/preview'\nimport * as config_8 from '@storybook/addon-interactions/preview'\nimport * as config_9 from '@storybook/addon-a11y/preview'\n\n    import * as preview from '/virtual:/@storybook/builder-vite/preview-entry.js';\n    import { configStories } from '/virtual:/@storybook/builder-vite/storybook-stories.js';\n\n    const {\n      addDecorator,\n      addParameters,\n      addLoader,\n      addArgs,\n      addArgTypes,\n      addStepRunner,\n      addArgTypesEnhancer,\n      addArgsEnhancer,\n      setGlobalRender,\n    } = previewApi;\n\n    const configs = [config_0,config_1,config_2,config_3,config_4,config_5,config_6,config_7,config_8,config_9,preview.default].filter(Boolean)\n\n    configs.map(config => config.default ? config.default : config).forEach(config => {\n      Object.keys(config).forEach((key) => {\n        const value = config[key];\n        switch (key) {\n          case 'args': {\n            return addArgs(value);\n          }\n          case 'argTypes': {\n            return addArgTypes(value);\n          }\n          case 'decorators': {\n            return value.forEach((decorator) => addDecorator(decorator, false));\n          }\n          case 'loaders': {\n            return value.forEach((loader) => addLoader(loader, false));\n          }\n          case 'parameters': {\n            return addParameters({ ...value }, false);\n          }\n          case 'argTypesEnhancers': {\n            return value.forEach((enhancer) => addArgTypesEnhancer(enhancer));\n          }\n          case 'argsEnhancers': {\n            return value.forEach((enhancer) => addArgsEnhancer(enhancer))\n          }\n          case 'render': {\n            return setGlobalRender(value)\n          }\n          case 'globals':\n          case 'globalTypes': {\n            const v = {};\n            v[key] = value;\n            return addParameters(v, false);\n          }\n          case 'decorateStory':\n          case 'applyDecorators':\n          case 'renderToDOM': // deprecated\n          case 'renderToCanvas': {\n            return null; // This key is not handled directly in v6 mode.\n          }\n          case 'runStep': {\n            return addStepRunner(value);\n          }\n          default: {\n            // eslint-disable-next-line prefer-template\n            return console.log(key + ' was not supported :( !');\n          }\n        }\n      });\n    })\n    \n    /* TODO: not quite sure what to do with this, to fix HMR\n    if (import.meta.hot) {\n        import.meta.hot.accept();    \n    }\n    */\n\n    configStories(configure);"],"file":"assets/iframe-90e36256.js"}