import{f as K,aU as Yl,aV as eu}from"./vendor-985e2f1e.js";function Da(e,t){(t==null||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}function Kl(e){if(Array.isArray(e))return e}function Zl(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function Ta(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function _l(e,t,r){return t&&Ta(e.prototype,t),r&&Ta(e,r),e}function $l(e,t){return t!=null&&typeof Symbol<"u"&&t[Symbol.hasInstance]?!!t[Symbol.hasInstance](e):e instanceof t}function ef(e,t){var r=e==null?null:typeof Symbol<"u"&&e[Symbol.iterator]||e["@@iterator"];if(r!=null){var n=[],i=!0,o=!1,a,s;try{for(r=r.call(e);!(i=(a=r.next()).done)&&(n.push(a.value),!(t&&n.length===t));i=!0);}catch(u){o=!0,s=u}finally{try{!i&&r.return!=null&&r.return()}finally{if(o)throw s}}return n}}function tf(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function Et(e,t){return Kl(e)||ef(e,t)||rf(e,t)||tf()}function rf(e,t){if(e){if(typeof e=="string")return Da(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);if(r==="Object"&&e.constructor&&(r=e.constructor.name),r==="Map"||r==="Set")return Array.from(r);if(r==="Arguments"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))return Da(e,t)}}function ci(e,t){var r,n,i,o,a={label:0,sent:function(){if(i[0]&1)throw i[1];return i[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},typeof Symbol=="function"&&(o[Symbol.iterator]=function(){return this}),o;function s(c){return function(l){return u([c,l])}}function u(c){if(r)throw new TypeError("Generator is already executing.");for(;a;)try{if(r=1,n&&(i=c[0]&2?n.return:c[0]?n.throw||((i=n.return)&&i.call(n),0):n.next)&&!(i=i.call(n,c[1])).done)return i;switch(n=0,i&&(c=[c[0]&2,i.value]),c[0]){case 0:case 1:i=c;break;case 4:return a.label++,{value:c[1],done:!1};case 5:a.label++,n=c[1],c=[0];continue;case 7:c=a.ops.pop(),a.trys.pop();continue;default:if(i=a.trys,!(i=i.length>0&&i[i.length-1])&&(c[0]===6||c[0]===2)){a=0;continue}if(c[0]===3&&(!i||c[1]>i[0]&&c[1]<i[3])){a.label=c[1];break}if(c[0]===6&&a.label<i[1]){a.label=i[1],i=c;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(c);break}i[2]&&a.ops.pop(),a.trys.pop();continue}c=t.call(e,a)}catch(l){c=[6,l],n=0}finally{r=i=0}if(c[0]&5)throw c[1];return{value:c[0]?c[1]:void 0,done:!0}}}var nf=Object.create,Rn=Object.defineProperty,of=Object.getOwnPropertyDescriptor,tu=Object.getOwnPropertyNames,af=Object.getPrototypeOf,sf=Object.prototype.hasOwnProperty,uf=function(e,t){return function(){return t||(0,e[tu(e)[0]])((t={exports:{}}).exports,t),t.exports}},cf=function(e,t){for(var r in t)Rn(e,r,{get:t[r],enumerable:!0})},ru=function(e,t,r,n){if(t&&typeof t=="object"||typeof t=="function"){var i=!0,o=!1,a=void 0;try{for(var s=function(){var l=c.value;!sf.call(e,l)&&l!==r&&Rn(e,l,{get:function(){return t[l]},enumerable:!(n=of(t,l))||n.enumerable})},u=tu(t)[Symbol.iterator](),c;!(i=(c=u.next()).done);i=!0)s()}catch(l){o=!0,a=l}finally{try{!i&&u.return!=null&&u.return()}finally{if(o)throw a}}}return e},lf=function(e,t,r){return r=e!=null?nf(af(e)):{},ru(t||!e||!e.__esModule?Rn(r,"default",{value:e,enumerable:!0}):r,e)},ff=function(e){return ru(Rn({},"__esModule",{value:!0}),e)},pf=uf({"node_modules/set-cookie-parser/lib/set-cookie.js":function(e,t){var r=function(c){return typeof c=="string"&&!!c.trim()},n=function(c,l){var f=c.split(";").filter(r),d=f.shift(),v=i(d),w=v.name,T=v.value;l=l?Object.assign({},s,l):s;try{T=l.decodeValues?decodeURIComponent(T):T}catch(b){console.error("set-cookie-parser encountered an error while decoding a cookie with value '"+T+"'. Set options.decodeValues to false to disable this feature.",b)}var A={name:w,value:T};return f.forEach(function(b){var B=b.split("="),C=B.shift().trimLeft().toLowerCase(),E=B.join("=");C==="expires"?A.expires=new Date(E):C==="max-age"?A.maxAge=parseInt(E,10):C==="secure"?A.secure=!0:C==="httponly"?A.httpOnly=!0:C==="samesite"?A.sameSite=E:A[C]=E}),A},i=function(c){var l="",f="",d=c.split("=");return d.length>1?(l=d.shift(),f=d.join("=")):f=c,{name:l,value:f}},o=function(c,l){if(l=l?Object.assign({},s,l):s,!c)return l.map?{}:[];if(c.headers)if(typeof c.headers.getSetCookie=="function")c=c.headers.getSetCookie();else if(c.headers["set-cookie"])c=c.headers["set-cookie"];else{var f=c.headers[Object.keys(c.headers).find(function(v){return v.toLowerCase()==="set-cookie"})];!f&&c.headers.cookie&&!l.silent&&console.warn("Warning: set-cookie-parser appears to have been called on a request object. It is designed to parse Set-Cookie headers from responses, not Cookie headers from requests. Set the option {silent: true} to suppress this warning."),c=f}if(Array.isArray(c)||(c=[c]),l=l?Object.assign({},s,l):s,l.map){var d={};return c.filter(r).reduce(function(v,w){var T=n(w,l);return v[T.name]=T,v},d)}else return c.filter(r).map(function(v){return n(v,l)})},a=function(c){if(Array.isArray(c))return c;if(typeof c!="string")return[];var l=[],f=0,d,v,w,T,A;function b(){for(;f<c.length&&/\s/.test(c.charAt(f));)f+=1;return f<c.length}function B(){return v=c.charAt(f),v!=="="&&v!==";"&&v!==","}for(;f<c.length;){for(d=f,A=!1;b();)if(v=c.charAt(f),v===","){for(w=f,f+=1,b(),T=f;f<c.length&&B();)f+=1;f<c.length&&c.charAt(f)==="="?(A=!0,f=T,l.push(c.substring(d,w)),d=f):f=w+1}else f+=1;(!A||f>=c.length)&&l.push(c.substring(d,c.length))}return l},s={decodeValues:!0,map:!1,silent:!1};t.exports=o,t.exports.parse=o,t.exports.parseString=n,t.exports.splitCookiesString=a}}),nu={};cf(nu,{Headers:function(){return qr},flattenHeadersList:function(){return Tf},flattenHeadersObject:function(){return wf},headersToList:function(){return iu},headersToObject:function(){return yf},headersToString:function(){return gf},listToHeaders:function(){return bf},objectToHeaders:function(){return Df},reduceHeadersObject:function(){return oo},stringToHeaders:function(){return Ef}});var We=ff(nu),df=lf(pf()),hf=/[^a-z0-9\-#$%&'*+.^_`|~]/i;function Ar(e){if(hf.test(e)||e.trim()==="")throw new TypeError("Invalid character in header field name");return e.trim().toLowerCase()}var wa=[String.fromCharCode(10),String.fromCharCode(13),String.fromCharCode(9),String.fromCharCode(32)],Af=new RegExp("(^[".concat(wa.join(""),"]|$[").concat(wa.join(""),"])"),"g");function li(e){var t=e.replace(Af,"");return t}function vr(e){if(typeof e!="string"||e.length===0)return!1;for(var t=0;t<e.length;t++){var r=e.charCodeAt(t);if(r>127||!vf(r))return!1}return!0}function vf(e){return![127,32,"(",")","<",">","@",",",";",":","\\",'"',"/","[","]","?","=","{","}"].includes(e)}function Ia(e){if(typeof e!="string"||e.trim()!==e)return!1;for(var t=0;t<e.length;t++){var r=e.charCodeAt(t);if(r===0||r===10||r===13)return!1}return!0}var xt=Symbol("normalizedHeaders"),an=Symbol("rawHeaderNames"),Sa=", ",Na,Ca,qr=function(){function e(t){var r=this;Zl(this,e);var n;if(this[Na]={},this[Ca]=new Map,["Headers","HeadersPolyfill"].includes((n=t)===null||n===void 0?void 0:n.constructor.name)||$l(t,qr)){var i=t;i.forEach(function(o,a){r.append(a,o)},this)}else Array.isArray(t)?t.forEach(function(o){var a=Et(o,2),s=a[0],u=a[1];r.append(s,Array.isArray(u)?u.join(Sa):u)}):t&&Object.getOwnPropertyNames(t).forEach(function(o){var a=t[o];r.append(o,Array.isArray(a)?a.join(Sa):a)})}return _l(e,[{key:(Na=xt,Ca=an,Symbol.iterator),value:function(){return this.entries()}},{key:"keys",value:function(){var r,n,i,o,a,s,u,c;return ci(this,function(l){switch(l.label){case 0:r=!0,n=!1,i=void 0,l.label=1;case 1:l.trys.push([1,6,7,8]),o=this.entries()[Symbol.iterator](),l.label=2;case 2:return(r=(a=o.next()).done)?[3,5]:(s=Et(a.value,1),u=s[0],[4,u]);case 3:l.sent(),l.label=4;case 4:return r=!0,[3,2];case 5:return[3,8];case 6:return c=l.sent(),n=!0,i=c,[3,8];case 7:try{!r&&o.return!=null&&o.return()}finally{if(n)throw i}return[7];case 8:return[2]}})}},{key:"values",value:function(){var r,n,i,o,a,s,u,c;return ci(this,function(l){switch(l.label){case 0:r=!0,n=!1,i=void 0,l.label=1;case 1:l.trys.push([1,6,7,8]),o=this.entries()[Symbol.iterator](),l.label=2;case 2:return(r=(a=o.next()).done)?[3,5]:(s=Et(a.value,2),u=s[1],[4,u]);case 3:l.sent(),l.label=4;case 4:return r=!0,[3,2];case 5:return[3,8];case 6:return c=l.sent(),n=!0,i=c,[3,8];case 7:try{!r&&o.return!=null&&o.return()}finally{if(n)throw i}return[7];case 8:return[2]}})}},{key:"entries",value:function(){var r,n,i,o,a,s,u,c,l,f,d,v,w,T,T;return ci(this,function(A){switch(A.label){case 0:r=Object.keys(this[xt]).sort(function(b,B){return b.localeCompare(B)}),n=!0,i=!1,o=void 0,A.label=1;case 1:A.trys.push([1,15,16,17]),a=r[Symbol.iterator](),A.label=2;case 2:if(n=(s=a.next()).done)return[3,14];if(u=s.value,u!=="set-cookie")return[3,11];c=!0,l=!1,f=void 0,A.label=3;case 3:A.trys.push([3,8,9,10]),d=this.getSetCookie()[Symbol.iterator](),A.label=4;case 4:return(c=(v=d.next()).done)?[3,7]:(w=v.value,[4,[u,w]]);case 5:A.sent(),A.label=6;case 6:return c=!0,[3,4];case 7:return[3,10];case 8:return T=A.sent(),l=!0,f=T,[3,10];case 9:try{!c&&d.return!=null&&d.return()}finally{if(l)throw f}return[7];case 10:return[3,13];case 11:return[4,[u,this.get(u)]];case 12:A.sent(),A.label=13;case 13:return n=!0,[3,2];case 14:return[3,17];case 15:return T=A.sent(),i=!0,o=T,[3,17];case 16:try{!n&&a.return!=null&&a.return()}finally{if(i)throw o}return[7];case 17:return[2]}})}},{key:"has",value:function(r){if(!vr(r))throw new TypeError('Invalid header name "'.concat(r,'"'));return this[xt].hasOwnProperty(Ar(r))}},{key:"get",value:function(r){if(!vr(r))throw TypeError('Invalid header name "'.concat(r,'"'));var n;return(n=this[xt][Ar(r)])!==null&&n!==void 0?n:null}},{key:"set",value:function(r,n){if(!(!vr(r)||!Ia(n))){var i=Ar(r),o=li(n);this[xt][i]=li(o),this[an].set(i,r)}}},{key:"append",value:function(r,n){if(!(!vr(r)||!Ia(n))){var i=Ar(r),o=li(n),a=this.has(i)?"".concat(this.get(i),", ").concat(o):o;this.set(r,a)}}},{key:"delete",value:function(r){if(vr(r)&&this.has(r)){var n=Ar(r);delete this[xt][n],this[an].delete(n)}}},{key:"all",value:function(){return this[xt]}},{key:"raw",value:function(){var r={},n=!0,i=!1,o=void 0;try{for(var a=this.entries()[Symbol.iterator](),s;!(n=(s=a.next()).done);n=!0){var u=Et(s.value,2),c=u[0],l=u[1];r[this[an].get(c)]=l}}catch(f){i=!0,o=f}finally{try{!n&&a.return!=null&&a.return()}finally{if(i)throw o}}return r}},{key:"forEach",value:function(r,n){var i=!0,o=!1,a=void 0;try{for(var s=this.entries()[Symbol.iterator](),u;!(i=(u=s.next()).done);i=!0){var c=Et(u.value,2),l=c[0],f=c[1];r.call(n,f,l,this)}}catch(d){o=!0,a=d}finally{try{!i&&s.return!=null&&s.return()}finally{if(o)throw a}}}},{key:"getSetCookie",value:function(){var r=this.get("set-cookie");return r===null?[]:r===""?[""]:(0,df.splitCookiesString)(r)}}]),e}();function iu(e){var t=[];return e.forEach(function(r,n){var i=r.includes(",")?r.split(",").map(function(o){return o.trim()}):r;t.push([n,i])}),t}function gf(e){var t=iu(e),r=t.map(function(n){var i=Et(n,2),o=i[0],a=i[1],s=[].concat(a);return"".concat(o,": ").concat(s.join(", "))});return r.join(`\r
`)}var mf=["user-agent"];function yf(e){var t={};return e.forEach(function(r,n){var i=!mf.includes(n.toLowerCase())&&r.includes(",");t[n]=i?r.split(",").map(function(o){return o.trim()}):r}),t}function Ef(e){var t=e.trim().split(/[\r\n]+/);return t.reduce(function(r,n){if(n.trim()==="")return r;var i=n.split(": "),o=i.shift(),a=i.join(": ");return r.append(o,a),r},new qr)}function bf(e){var t=new qr;return e.forEach(function(r){var n=Et(r,2),i=n[0],o=n[1],a=[].concat(o);a.forEach(function(s){t.append(i,s)})}),t}function oo(e,t,r){return Object.keys(e).reduce(function(n,i){return t(n,i,e[i])},r)}function Df(e){return oo(e,function(t,r,n){var i=[].concat(n).filter(Boolean);return i.forEach(function(o){t.append(r,o)}),t},new qr)}function Tf(e){return e.map(function(t){var r=Et(t,2),n=r[0],i=r[1];return[n,[].concat(i).join(", ")]})}function wf(e){return oo(e,function(t,r,n){return t[r]=[].concat(n).join(", "),t},{})}var Hr={};/*!
 * cookie
 * Copyright(c) 2012-2014 Roman Shtylman
 * Copyright(c) 2015 Douglas Christopher Wilson
 * MIT Licensed
 */Hr.parse=Nf;Hr.serialize=Cf;var If=decodeURIComponent,Sf=encodeURIComponent,sn=/^[\u0009\u0020-\u007e\u0080-\u00ff]+$/;function Nf(e,t){if(typeof e!="string")throw new TypeError("argument str must be a string");for(var r={},n=t||{},i=e.split(";"),o=n.decode||If,a=0;a<i.length;a++){var s=i[a],u=s.indexOf("=");if(!(u<0)){var c=s.substring(0,u).trim();if(r[c]==null){var l=s.substring(u+1,s.length).trim();l[0]==='"'&&(l=l.slice(1,-1)),r[c]=Bf(l,o)}}}return r}function Cf(e,t,r){var n=r||{},i=n.encode||Sf;if(typeof i!="function")throw new TypeError("option encode is invalid");if(!sn.test(e))throw new TypeError("argument name is invalid");var o=i(t);if(o&&!sn.test(o))throw new TypeError("argument val is invalid");var a=e+"="+o;if(n.maxAge!=null){var s=n.maxAge-0;if(isNaN(s)||!isFinite(s))throw new TypeError("option maxAge is invalid");a+="; Max-Age="+Math.floor(s)}if(n.domain){if(!sn.test(n.domain))throw new TypeError("option domain is invalid");a+="; Domain="+n.domain}if(n.path){if(!sn.test(n.path))throw new TypeError("option path is invalid");a+="; Path="+n.path}if(n.expires){if(typeof n.expires.toUTCString!="function")throw new TypeError("option expires is invalid");a+="; Expires="+n.expires.toUTCString()}if(n.httpOnly&&(a+="; HttpOnly"),n.secure&&(a+="; Secure"),n.sameSite){var u=typeof n.sameSite=="string"?n.sameSite.toLowerCase():n.sameSite;switch(u){case!0:a+="; SameSite=Strict";break;case"lax":a+="; SameSite=Lax";break;case"strict":a+="; SameSite=Strict";break;case"none":a+="; SameSite=None";break;default:throw new TypeError("option sameSite is invalid")}}return a}function Bf(e,t){try{return t(e)}catch{return e}}var ao=Object.defineProperty,Of=Object.getOwnPropertyDescriptor,Pf=Object.getOwnPropertyNames,Rf=Object.prototype.hasOwnProperty,kf=(e,t)=>{for(var r in t)ao(e,r,{get:t[r],enumerable:!0})},Lf=(e,t,r,n)=>{if(t&&typeof t=="object"||typeof t=="function")for(let i of Pf(t))!Rf.call(e,i)&&i!==r&&ao(e,i,{get:()=>t[i],enumerable:!(n=Of(t,i))||n.enumerable});return e},xf=e=>Lf(ao({},"__esModule",{value:!0}),e),ou={};kf(ou,{isNodeProcess:()=>Ff});var so=xf(ou);function Ff(){if(typeof navigator<"u"&&navigator.product==="ReactNative")return!0;if(typeof process<"u"){const e=process.type;return e==="renderer"||e==="worker"?!1:!!(process.versions&&process.versions.node)}return!1}var un={exports:{}},Ba;function Mf(){return Ba||(Ba=1,function(e,t){var r=function(){if(typeof self<"u")return self;if(typeof window<"u")return window;if(typeof K<"u")return K;throw new Error("unable to locate global object")},n=r();e.exports=t=n.fetch,n.fetch&&(t.default=n.fetch.bind(n)),t.Headers=n.Headers,t.Request=n.Request,t.Response=n.Response}(un,un.exports)),un.exports}var uo=Object.defineProperty,Qf=Object.getOwnPropertyDescriptor,Uf=Object.getOwnPropertyNames,jf=Object.prototype.hasOwnProperty,qf=(e,t)=>{for(var r in t)uo(e,r,{get:t[r],enumerable:!0})},Hf=(e,t,r,n)=>{if(t&&typeof t=="object"||typeof t=="function")for(let i of Uf(t))!jf.call(e,i)&&i!==r&&uo(e,i,{get:()=>t[i],enumerable:!(n=Qf(t,i))||n.enumerable});return e},Vf=e=>Hf(uo({},"__esModule",{value:!0}),e),au={};qf(au,{InvariantError:()=>su,format:()=>bn,invariant:()=>uu});var gt=Vf(au),zf=/(%?)(%([sdjo]))/g;function Gf(e,t){switch(t){case"s":return e;case"d":case"i":return Number(e);case"j":return JSON.stringify(e);case"o":{if(typeof e=="string")return e;const r=JSON.stringify(e);return r==="{}"||r==="[]"||/^\[object .+?\]$/.test(r)?e:r}}}function bn(e,...t){if(t.length===0)return e;let r=0,n=e.replace(zf,(i,o,a,s)=>{const u=t[r],c=Gf(u,s);return o?i:(r++,c)});return r<t.length&&(n+=` ${t.slice(r).join(" ")}`),n=n.replace(/%{2,2}/g,"%"),n}var Xf=2;function Jf(e){if(!e.stack)return;const t=e.stack.split(`
`);t.splice(1,Xf),e.stack=t.join(`
`)}var su=class extends Error{constructor(e,...t){super(e),this.message=e,this.name="Invariant Violation",this.message=bn(e,...t),Jf(this)}},uu=(e,t,...r)=>{if(!e)throw new su(t,...r)};uu.as=(e,t,r,...n)=>{if(!t)throw e.prototype.name!=null?new e(bn(r,n)):e(bn(r,n))};var St={},co={};Object.defineProperty(co,"__esModule",{value:!0});co.until=async e=>{try{return[null,await e().catch(r=>{throw r})]}catch(t){return[t,null]}};Object.defineProperty(St,"__esModule",{value:!0});var Wf=co;St.until=Wf.until;var kn={},ar={};Object.defineProperty(ar,"__esModule",{value:!0});ar.IS_PATCHED_MODULE=void 0;ar.IS_PATCHED_MODULE=Symbol("isPatchedModule");var Vr={},Gi={exports:{}},fi,Oa;function Yf(){if(Oa)return fi;Oa=1;var e=1e3,t=e*60,r=t*60,n=r*24,i=n*7,o=n*365.25;fi=function(l,f){f=f||{};var d=typeof l;if(d==="string"&&l.length>0)return a(l);if(d==="number"&&isFinite(l))return f.long?u(l):s(l);throw new Error("val is not a non-empty string or a valid number. val="+JSON.stringify(l))};function a(l){if(l=String(l),!(l.length>100)){var f=/^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(l);if(f){var d=parseFloat(f[1]),v=(f[2]||"ms").toLowerCase();switch(v){case"years":case"year":case"yrs":case"yr":case"y":return d*o;case"weeks":case"week":case"w":return d*i;case"days":case"day":case"d":return d*n;case"hours":case"hour":case"hrs":case"hr":case"h":return d*r;case"minutes":case"minute":case"mins":case"min":case"m":return d*t;case"seconds":case"second":case"secs":case"sec":case"s":return d*e;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return d;default:return}}}}function s(l){var f=Math.abs(l);return f>=n?Math.round(l/n)+"d":f>=r?Math.round(l/r)+"h":f>=t?Math.round(l/t)+"m":f>=e?Math.round(l/e)+"s":l+"ms"}function u(l){var f=Math.abs(l);return f>=n?c(l,f,n,"day"):f>=r?c(l,f,r,"hour"):f>=t?c(l,f,t,"minute"):f>=e?c(l,f,e,"second"):l+" ms"}function c(l,f,d,v){var w=f>=d*1.5;return Math.round(l/d)+" "+v+(w?"s":"")}return fi}function Kf(e){r.debug=r,r.default=r,r.coerce=u,r.disable=o,r.enable=i,r.enabled=a,r.humanize=Yf(),r.destroy=c,Object.keys(e).forEach(l=>{r[l]=e[l]}),r.names=[],r.skips=[],r.formatters={};function t(l){let f=0;for(let d=0;d<l.length;d++)f=(f<<5)-f+l.charCodeAt(d),f|=0;return r.colors[Math.abs(f)%r.colors.length]}r.selectColor=t;function r(l){let f,d=null,v,w;function T(...A){if(!T.enabled)return;const b=T,B=Number(new Date),C=B-(f||B);b.diff=C,b.prev=f,b.curr=B,f=B,A[0]=r.coerce(A[0]),typeof A[0]!="string"&&A.unshift("%O");let E=0;A[0]=A[0].replace(/%([a-zA-Z%])/g,(N,q)=>{if(N==="%%")return"%";E++;const R=r.formatters[q];if(typeof R=="function"){const g=A[E];N=R.call(b,g),A.splice(E,1),E--}return N}),r.formatArgs.call(b,A),(b.log||r.log).apply(b,A)}return T.namespace=l,T.useColors=r.useColors(),T.color=r.selectColor(l),T.extend=n,T.destroy=r.destroy,Object.defineProperty(T,"enabled",{enumerable:!0,configurable:!1,get:()=>d!==null?d:(v!==r.namespaces&&(v=r.namespaces,w=r.enabled(l)),w),set:A=>{d=A}}),typeof r.init=="function"&&r.init(T),T}function n(l,f){const d=r(this.namespace+(typeof f>"u"?":":f)+l);return d.log=this.log,d}function i(l){r.save(l),r.namespaces=l,r.names=[],r.skips=[];let f;const d=(typeof l=="string"?l:"").split(/[\s,]+/),v=d.length;for(f=0;f<v;f++)d[f]&&(l=d[f].replace(/\*/g,".*?"),l[0]==="-"?r.skips.push(new RegExp("^"+l.slice(1)+"$")):r.names.push(new RegExp("^"+l+"$")))}function o(){const l=[...r.names.map(s),...r.skips.map(s).map(f=>"-"+f)].join(",");return r.enable(""),l}function a(l){if(l[l.length-1]==="*")return!0;let f,d;for(f=0,d=r.skips.length;f<d;f++)if(r.skips[f].test(l))return!1;for(f=0,d=r.names.length;f<d;f++)if(r.names[f].test(l))return!0;return!1}function s(l){return l.toString().substring(2,l.toString().length-2).replace(/\.\*\?$/,"*")}function u(l){return l instanceof Error?l.stack||l.message:l}function c(){console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.")}return r.enable(r.load()),r}var Zf=Kf;(function(e,t){t.formatArgs=n,t.save=i,t.load=o,t.useColors=r,t.storage=a(),t.destroy=(()=>{let u=!1;return()=>{u||(u=!0,console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`."))}})(),t.colors=["#0000CC","#0000FF","#0033CC","#0033FF","#0066CC","#0066FF","#0099CC","#0099FF","#00CC00","#00CC33","#00CC66","#00CC99","#00CCCC","#00CCFF","#3300CC","#3300FF","#3333CC","#3333FF","#3366CC","#3366FF","#3399CC","#3399FF","#33CC00","#33CC33","#33CC66","#33CC99","#33CCCC","#33CCFF","#6600CC","#6600FF","#6633CC","#6633FF","#66CC00","#66CC33","#9900CC","#9900FF","#9933CC","#9933FF","#99CC00","#99CC33","#CC0000","#CC0033","#CC0066","#CC0099","#CC00CC","#CC00FF","#CC3300","#CC3333","#CC3366","#CC3399","#CC33CC","#CC33FF","#CC6600","#CC6633","#CC9900","#CC9933","#CCCC00","#CCCC33","#FF0000","#FF0033","#FF0066","#FF0099","#FF00CC","#FF00FF","#FF3300","#FF3333","#FF3366","#FF3399","#FF33CC","#FF33FF","#FF6600","#FF6633","#FF9900","#FF9933","#FFCC00","#FFCC33"];function r(){return typeof window<"u"&&window.process&&(window.process.type==="renderer"||window.process.__nwjs)?!0:typeof navigator<"u"&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)?!1:typeof document<"u"&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||typeof window<"u"&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||typeof navigator<"u"&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31||typeof navigator<"u"&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/)}function n(u){if(u[0]=(this.useColors?"%c":"")+this.namespace+(this.useColors?" %c":" ")+u[0]+(this.useColors?"%c ":" ")+"+"+e.exports.humanize(this.diff),!this.useColors)return;const c="color: "+this.color;u.splice(1,0,c,"color: inherit");let l=0,f=0;u[0].replace(/%[a-zA-Z%]/g,d=>{d!=="%%"&&(l++,d==="%c"&&(f=l))}),u.splice(f,0,c)}t.log=console.debug||console.log||(()=>{});function i(u){try{u?t.storage.setItem("debug",u):t.storage.removeItem("debug")}catch{}}function o(){let u;try{u=t.storage.getItem("debug")}catch{}return!u&&typeof process<"u"&&"env"in process&&(u={}.DEBUG),u}function a(){try{return localStorage}catch{}}e.exports=Zf(t);const{formatters:s}=e.exports;s.j=function(u){try{return JSON.stringify(u)}catch(c){return"[UnexpectedJSONParseError]: "+c.message}}})(Gi,Gi.exports);var cu=Gi.exports,lu={},fu={},Ln={},_f=K&&K.__extends||function(){var e=function(t,r){return e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(n,i){n.__proto__=i}||function(n,i){for(var o in i)Object.prototype.hasOwnProperty.call(i,o)&&(n[o]=i[o])},e(t,r)};return function(t,r){e(t,r);function n(){this.constructor=t}t.prototype=r===null?Object.create(r):(n.prototype=r.prototype,new n)}}(),$f=K&&K.__spreadArrays||function(){for(var e=0,t=0,r=arguments.length;t<r;t++)e+=arguments[t].length;for(var n=Array(e),i=0,t=0;t<r;t++)for(var o=arguments[t],a=0,s=o.length;a<s;a++,i++)n[i]=o[a];return n};Ln.__esModule=!0;Ln.StrictEventEmitter=void 0;var ep=Yl,tp=function(e){_f(t,e);function t(){return e.call(this)||this}return t.prototype.on=function(r,n){return e.prototype.on.call(this,r.toString(),n)},t.prototype.once=function(r,n){return e.prototype.once.call(this,r.toString(),n)},t.prototype.off=function(r,n){return e.prototype.off.call(this,r.toString(),n)},t.prototype.emit=function(r){for(var n=[],i=1;i<arguments.length;i++)n[i-1]=arguments[i];return e.prototype.emit.apply(this,$f([r.toString()],n))},t.prototype.addListener=function(r,n){return e.prototype.addListener.call(this,r.toString(),n)},t.prototype.prependListener=function(r,n){return e.prototype.prependListener.call(this,r.toString(),n)},t.prototype.prependOnceListener=function(r,n){return e.prototype.prependOnceListener.call(this,r.toString(),n)},t.prototype.removeListener=function(r,n){return e.prototype.removeListener.call(this,r.toString(),n)},t.prototype.removeAllListeners=function(r){return r?e.prototype.removeAllListeners.call(this,r.toString()):e.prototype.removeAllListeners.call(this)},t.prototype.eventNames=function(){return e.prototype.eventNames.call(this)},t.prototype.listeners=function(r){return e.prototype.listeners.call(this,r.toString())},t.prototype.rawListeners=function(r){return e.prototype.rawListeners.call(this,r.toString())},t.prototype.listenerCount=function(r){return e.prototype.listenerCount.call(this,r.toString())},t}(ep.EventEmitter);Ln.StrictEventEmitter=tp;(function(e){var t=K&&K.__createBinding||(Object.create?function(n,i,o,a){a===void 0&&(a=o),Object.defineProperty(n,a,{enumerable:!0,get:function(){return i[o]}})}:function(n,i,o,a){a===void 0&&(a=o),n[a]=i[o]}),r=K&&K.__exportStar||function(n,i){for(var o in n)o!=="default"&&!Object.prototype.hasOwnProperty.call(i,o)&&t(i,n,o)};e.__esModule=!0,r(Ln,e)})(fu);var jt={};Object.defineProperty(jt,"__esModule",{value:!0});jt.nextTickAsync=jt.nextTick=void 0;function rp(e){setTimeout(e,0)}jt.nextTick=rp;function np(e){return new Promise(function(t){setTimeout(function(){t(e())},0)})}jt.nextTickAsync=np;(function(e){var t=K&&K.__extends||function(){var f=function(d,v){return f=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(w,T){w.__proto__=T}||function(w,T){for(var A in T)Object.prototype.hasOwnProperty.call(T,A)&&(w[A]=T[A])},f(d,v)};return function(d,v){if(typeof v!="function"&&v!==null)throw new TypeError("Class extends value "+String(v)+" is not a constructor or null");f(d,v);function w(){this.constructor=d}d.prototype=v===null?Object.create(v):(w.prototype=v.prototype,new w)}}(),r=K&&K.__awaiter||function(f,d,v,w){function T(A){return A instanceof v?A:new v(function(b){b(A)})}return new(v||(v=Promise))(function(A,b){function B(P){try{E(w.next(P))}catch(N){b(N)}}function C(P){try{E(w.throw(P))}catch(N){b(N)}}function E(P){P.done?A(P.value):T(P.value).then(B,C)}E((w=w.apply(f,d||[])).next())})},n=K&&K.__generator||function(f,d){var v={label:0,sent:function(){if(A[0]&1)throw A[1];return A[1]},trys:[],ops:[]},w,T,A,b;return b={next:B(0),throw:B(1),return:B(2)},typeof Symbol=="function"&&(b[Symbol.iterator]=function(){return this}),b;function B(E){return function(P){return C([E,P])}}function C(E){if(w)throw new TypeError("Generator is already executing.");for(;v;)try{if(w=1,T&&(A=E[0]&2?T.return:E[0]?T.throw||((A=T.return)&&A.call(T),0):T.next)&&!(A=A.call(T,E[1])).done)return A;switch(T=0,A&&(E=[E[0]&2,A.value]),E[0]){case 0:case 1:A=E;break;case 4:return v.label++,{value:E[1],done:!1};case 5:v.label++,T=E[1],E=[0];continue;case 7:E=v.ops.pop(),v.trys.pop();continue;default:if(A=v.trys,!(A=A.length>0&&A[A.length-1])&&(E[0]===6||E[0]===2)){v=0;continue}if(E[0]===3&&(!A||E[1]>A[0]&&E[1]<A[3])){v.label=E[1];break}if(E[0]===6&&v.label<A[1]){v.label=A[1],A=E;break}if(A&&v.label<A[2]){v.label=A[2],v.ops.push(E);break}A[2]&&v.ops.pop(),v.trys.pop();continue}E=d.call(f,v)}catch(P){E=[6,P],T=0}finally{w=A=0}if(E[0]&5)throw E[1];return{value:E[0]?E[1]:void 0,done:!0}}},i=K&&K.__read||function(f,d){var v=typeof Symbol=="function"&&f[Symbol.iterator];if(!v)return f;var w=v.call(f),T,A=[],b;try{for(;(d===void 0||d-- >0)&&!(T=w.next()).done;)A.push(T.value)}catch(B){b={error:B}}finally{try{T&&!T.done&&(v=w.return)&&v.call(w)}finally{if(b)throw b.error}}return A},o=K&&K.__spreadArray||function(f,d){for(var v=0,w=d.length,T=f.length;v<w;v++,T++)f[T]=d[v];return f};Object.defineProperty(e,"__esModule",{value:!0}),e.AsyncEventEmitter=e.AsyncEventEmitterReadyState=void 0;var a=cu,s=fu,u=jt,c;(function(f){f.ACTIVE="ACTIVE",f.DEACTIVATED="DEACTIVATED"})(c=e.AsyncEventEmitterReadyState||(e.AsyncEventEmitterReadyState={}));var l=function(f){t(d,f);function d(){var v=f.call(this)||this;return v.log=a.debug("async-event-emitter"),v.queue=new Map,v.readyState=c.ACTIVE,v}return d.prototype.on=function(v,w){var T=this,A=this.log.extend("on");return A('adding "%s" listener...',v),this.readyState===c.DEACTIVATED?(A("the emitter is destroyed, skipping!"),this):f.prototype.on.call(this,v,function(){for(var b=[],B=0;B<arguments.length;B++)b[B]=arguments[B];return r(T,void 0,void 0,function(){var C,E=this;return n(this,function(P){return C=this.openListenerQueue(v),A('awaiting the "%s" listener...',v),C.push({args:b,done:new Promise(function(N,q){return r(E,void 0,void 0,function(){var R;return n(this,function(g){switch(g.label){case 0:return g.trys.push([0,2,,3]),[4,w.apply(void 0,o([],i(b)))];case 1:return g.sent(),N(),A('"%s" listener has resolved!',v),[3,3];case 2:return R=g.sent(),A('"%s" listener has rejected!',R),q(R),[3,3];case 3:return[2]}})})})}),[2]})})})},d.prototype.emit=function(v){for(var w=this,T=[],A=1;A<arguments.length;A++)T[A-1]=arguments[A];var b=this.log.extend("emit");return b('emitting "%s" event...',v),this.readyState===c.DEACTIVATED?(b("the emitter is destroyed, skipping!"),!1):(this.openListenerQueue(v),b('appending a one-time cleanup "%s" listener...',v),this.once(v,function(){u.nextTick(function(){w.queue.delete(v),b('cleaned up "%s" listeners queue!',v)})}),f.prototype.emit.apply(this,o([v],i(T))))},d.prototype.untilIdle=function(v,w){return w===void 0&&(w=function(){return!0}),r(this,void 0,void 0,function(){var T,A=this;return n(this,function(b){switch(b.label){case 0:return T=this.queue.get(v)||[],[4,Promise.all(T.filter(w).map(function(B){var C=B.done;return C})).finally(function(){A.queue.delete(v)})];case 1:return b.sent(),[2]}})})},d.prototype.openListenerQueue=function(v){var w=this.log.extend("openListenerQueue");w('opening "%s" listeners queue...',v);var T=this.queue.get(v);return T?(w("returning an exising queue:",T),T):(w("no queue found, creating one..."),this.queue.set(v,[]),[])},d.prototype.removeAllListeners=function(v){var w=this.log.extend("removeAllListeners");return w("event:",v),v?(this.queue.delete(v),w('cleared the "%s" listeners queue!',v,this.queue.get(v))):(this.queue.clear(),w("cleared the listeners queue!",this.queue)),f.prototype.removeAllListeners.call(this,v)},d.prototype.activate=function(){var v=this.log.extend("activate");this.readyState=c.ACTIVE,v("set state to:",this.readyState)},d.prototype.deactivate=function(){var v=this.log.extend("deactivate");v("removing all listeners..."),this.removeAllListeners(),this.readyState=c.DEACTIVATED,v("set state to:",this.readyState)},d}(s.StrictEventEmitter);e.AsyncEventEmitter=l})(lu);(function(e){var t=K&&K.__values||function(l){var f=typeof Symbol=="function"&&Symbol.iterator,d=f&&l[f],v=0;if(d)return d.call(l);if(l&&typeof l.length=="number")return{next:function(){return l&&v>=l.length&&(l=void 0),{value:l&&l[v++],done:!l}}};throw new TypeError(f?"Object is not iterable.":"Symbol.iterator is not defined.")};Object.defineProperty(e,"__esModule",{value:!0}),e.Interceptor=e.InterceptorReadyState=e.deleteGlobalSymbol=e.getGlobalSymbol=void 0;var r=cu,n=lu,i=jt;function o(l){return globalThis[l]||void 0}e.getGlobalSymbol=o;function a(l,f){globalThis[l]=f}function s(l){delete globalThis[l]}e.deleteGlobalSymbol=s;var u;(function(l){l.IDLE="IDLE",l.APPLYING="APPLYING",l.APPLIED="APPLIED",l.DISPOSING="DISPOSING",l.DISPOSED="DISPOSED"})(u=e.InterceptorReadyState||(e.InterceptorReadyState={}));var c=function(){function l(f){this.symbol=f,this.readyState=u.IDLE,this.emitter=new n.AsyncEventEmitter,this.subscriptions=[],this.log=r.debug(f.description),this.emitter.setMaxListeners(0),this.log("constructing the interceptor...")}return l.prototype.checkEnvironment=function(){return!0},l.prototype.apply=function(){var f=this,d=this.log.extend("apply");if(d("applying the interceptor..."),this.readyState===u.APPLIED){d("intercepted already applied!");return}var v=this.checkEnvironment();if(!v){d("the interceptor cannot be applied in this environment!");return}this.readyState=u.APPLYING,this.emitter.activate(),d("activated the emiter!",this.emitter.readyState);var w=this.getInstance();if(w){d("found a running instance, reusing..."),this.on=function(T,A){d('proxying the "%s" listener',T),w.emitter.addListener(T,A),f.subscriptions.push(function(){w.emitter.removeListener(T,A),d('removed proxied "%s" listener!',T)})},i.nextTick(function(){f.readyState=u.APPLIED});return}d("no running instance found, setting up a new instance..."),this.setup(),this.setInstance(),i.nextTick(function(){f.readyState=u.APPLIED})},l.prototype.setup=function(){},l.prototype.on=function(f,d){var v=this.log.extend("on");if(this.readyState===u.DISPOSING||this.readyState===u.DISPOSED){v("cannot listen to events, already disposed!");return}v('adding "%s" event listener:',f,d.name),this.emitter.on(f,d)},l.prototype.dispose=function(){var f,d,v=this,w=this.log.extend("dispose");if(this.readyState===u.DISPOSED){w("cannot dispose, already disposed!");return}if(w("disposing the interceptor..."),this.readyState=u.DISPOSING,!this.getInstance()){w("no interceptors running, skipping dispose...");return}if(this.clearInstance(),w("global symbol deleted:",o(this.symbol)),this.subscriptions.length>0){w("disposing of %d subscriptions...",this.subscriptions.length);try{for(var T=t(this.subscriptions),A=T.next();!A.done;A=T.next()){var b=A.value;b()}}catch(B){f={error:B}}finally{try{A&&!A.done&&(d=T.return)&&d.call(T)}finally{if(f)throw f.error}}this.subscriptions=[],w("disposed of all subscriptions!",this.subscriptions.length)}this.emitter.deactivate(),w("destroyed the listener!"),i.nextTick(function(){v.readyState=u.DISPOSED})},l.prototype.getInstance=function(){var f,d=o(this.symbol);return this.log("retrieved global instance:",(f=d?.constructor)===null||f===void 0?void 0:f.name),d},l.prototype.setInstance=function(){a(this.symbol,this),this.log("set global instance!",this.symbol.description)},l.prototype.clearInstance=function(){s(this.symbol),this.log("cleared global instance!",this.symbol.description)},l}();e.Interceptor=c})(Vr);var xn={},ip=K&&K.__extends||function(){var e=function(t,r){return e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(n,i){n.__proto__=i}||function(n,i){for(var o in i)Object.prototype.hasOwnProperty.call(i,o)&&(n[o]=i[o])},e(t,r)};return function(t,r){if(typeof r!="function"&&r!==null)throw new TypeError("Class extends value "+String(r)+" is not a constructor or null");e(t,r);function n(){this.constructor=t}t.prototype=r===null?Object.create(r):(n.prototype=r.prototype,new n)}}(),op=K&&K.__values||function(e){var t=typeof Symbol=="function"&&Symbol.iterator,r=t&&e[t],n=0;if(r)return r.call(e);if(e&&typeof e.length=="number")return{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")};Object.defineProperty(xn,"__esModule",{value:!0});xn.BatchInterceptor=void 0;var ap=Vr,sp=function(e){ip(t,e);function t(r){var n=this;return t.symbol=Symbol(r.name),n=e.call(this,t.symbol)||this,n.interceptors=r.interceptors,n}return t.prototype.setup=function(){var r,n,i=this.log.extend("setup");i("applying all %d interceptors...",this.interceptors.length);var o=function(l){i('applying "%s" interceptor...',l.constructor.name),l.apply(),i("adding interceptor dispose subscription"),a.subscriptions.push(function(){return l.dispose()})},a=this;try{for(var s=op(this.interceptors),u=s.next();!u.done;u=s.next()){var c=u.value;o(c)}}catch(l){r={error:l}}finally{try{u&&!u.done&&(n=s.return)&&n.call(s)}finally{if(r)throw r.error}}},t.prototype.on=function(r,n){this.interceptors.forEach(function(i){i.on(r,n)})},t}(ap.Interceptor);xn.BatchInterceptor=sp;var Vt={},et={},lo={},pi={},di={},hi,Pa;function pu(){return Pa||(Pa=1,hi=function(){if(typeof Symbol!="function"||typeof Object.getOwnPropertySymbols!="function")return!1;if(typeof Symbol.iterator=="symbol")return!0;var t={},r=Symbol("test"),n=Object(r);if(typeof r=="string"||Object.prototype.toString.call(r)!=="[object Symbol]"||Object.prototype.toString.call(n)!=="[object Symbol]")return!1;var i=42;t[r]=i;for(r in t)return!1;if(typeof Object.keys=="function"&&Object.keys(t).length!==0||typeof Object.getOwnPropertyNames=="function"&&Object.getOwnPropertyNames(t).length!==0)return!1;var o=Object.getOwnPropertySymbols(t);if(o.length!==1||o[0]!==r||!Object.prototype.propertyIsEnumerable.call(t,r))return!1;if(typeof Object.getOwnPropertyDescriptor=="function"){var a=Object.getOwnPropertyDescriptor(t,r);if(a.value!==i||a.enumerable!==!0)return!1}return!0}),hi}var Ai,Ra;function fo(){if(Ra)return Ai;Ra=1;var e=pu();return Ai=function(){return e()&&!!Symbol.toStringTag},Ai}var vi,ka;function up(){if(ka)return vi;ka=1;var e=typeof Symbol<"u"&&Symbol,t=pu();return vi=function(){return typeof e!="function"||typeof Symbol!="function"||typeof e("foo")!="symbol"||typeof Symbol("bar")!="symbol"?!1:t()},vi}var gi,La;function cp(){if(La)return gi;La=1;var e={foo:{}},t=Object;return gi=function(){return{__proto__:e}.foo===e.foo&&!({__proto__:null}instanceof t)},gi}var mi,xa;function lp(){if(xa)return mi;xa=1;var e="Function.prototype.bind called on incompatible ",t=Array.prototype.slice,r=Object.prototype.toString,n="[object Function]";return mi=function(o){var a=this;if(typeof a!="function"||r.call(a)!==n)throw new TypeError(e+a);for(var s=t.call(arguments,1),u,c=function(){if(this instanceof u){var w=a.apply(this,s.concat(t.call(arguments)));return Object(w)===w?w:this}else return a.apply(o,s.concat(t.call(arguments)))},l=Math.max(0,a.length-s.length),f=[],d=0;d<l;d++)f.push("$"+d);if(u=Function("binder","return function ("+f.join(",")+"){ return binder.apply(this,arguments); }")(c),a.prototype){var v=function(){};v.prototype=a.prototype,u.prototype=new v,v.prototype=null}return u},mi}var yi,Fa;function po(){if(Fa)return yi;Fa=1;var e=lp();return yi=Function.prototype.bind||e,yi}var Ei,Ma;function fp(){if(Ma)return Ei;Ma=1;var e=po();return Ei=e.call(Function.call,Object.prototype.hasOwnProperty),Ei}var bi,Qa;function ho(){if(Qa)return bi;Qa=1;var e,t=SyntaxError,r=Function,n=TypeError,i=function(Q){try{return r('"use strict"; return ('+Q+").constructor;")()}catch{}},o=Object.getOwnPropertyDescriptor;if(o)try{o({},"")}catch{o=null}var a=function(){throw new n},s=o?function(){try{return arguments.callee,a}catch{try{return o(arguments,"callee").get}catch{return a}}}():a,u=up()(),c=cp()(),l=Object.getPrototypeOf||(c?function(Q){return Q.__proto__}:null),f={},d=typeof Uint8Array>"u"||!l?e:l(Uint8Array),v={"%AggregateError%":typeof AggregateError>"u"?e:AggregateError,"%Array%":Array,"%ArrayBuffer%":typeof ArrayBuffer>"u"?e:ArrayBuffer,"%ArrayIteratorPrototype%":u&&l?l([][Symbol.iterator]()):e,"%AsyncFromSyncIteratorPrototype%":e,"%AsyncFunction%":f,"%AsyncGenerator%":f,"%AsyncGeneratorFunction%":f,"%AsyncIteratorPrototype%":f,"%Atomics%":typeof Atomics>"u"?e:Atomics,"%BigInt%":typeof BigInt>"u"?e:BigInt,"%BigInt64Array%":typeof BigInt64Array>"u"?e:BigInt64Array,"%BigUint64Array%":typeof BigUint64Array>"u"?e:BigUint64Array,"%Boolean%":Boolean,"%DataView%":typeof DataView>"u"?e:DataView,"%Date%":Date,"%decodeURI%":decodeURI,"%decodeURIComponent%":decodeURIComponent,"%encodeURI%":encodeURI,"%encodeURIComponent%":encodeURIComponent,"%Error%":Error,"%eval%":eval,"%EvalError%":EvalError,"%Float32Array%":typeof Float32Array>"u"?e:Float32Array,"%Float64Array%":typeof Float64Array>"u"?e:Float64Array,"%FinalizationRegistry%":typeof FinalizationRegistry>"u"?e:FinalizationRegistry,"%Function%":r,"%GeneratorFunction%":f,"%Int8Array%":typeof Int8Array>"u"?e:Int8Array,"%Int16Array%":typeof Int16Array>"u"?e:Int16Array,"%Int32Array%":typeof Int32Array>"u"?e:Int32Array,"%isFinite%":isFinite,"%isNaN%":isNaN,"%IteratorPrototype%":u&&l?l(l([][Symbol.iterator]())):e,"%JSON%":typeof JSON=="object"?JSON:e,"%Map%":typeof Map>"u"?e:Map,"%MapIteratorPrototype%":typeof Map>"u"||!u||!l?e:l(new Map()[Symbol.iterator]()),"%Math%":Math,"%Number%":Number,"%Object%":Object,"%parseFloat%":parseFloat,"%parseInt%":parseInt,"%Promise%":typeof Promise>"u"?e:Promise,"%Proxy%":typeof Proxy>"u"?e:Proxy,"%RangeError%":RangeError,"%ReferenceError%":ReferenceError,"%Reflect%":typeof Reflect>"u"?e:Reflect,"%RegExp%":RegExp,"%Set%":typeof Set>"u"?e:Set,"%SetIteratorPrototype%":typeof Set>"u"||!u||!l?e:l(new Set()[Symbol.iterator]()),"%SharedArrayBuffer%":typeof SharedArrayBuffer>"u"?e:SharedArrayBuffer,"%String%":String,"%StringIteratorPrototype%":u&&l?l(""[Symbol.iterator]()):e,"%Symbol%":u?Symbol:e,"%SyntaxError%":t,"%ThrowTypeError%":s,"%TypedArray%":d,"%TypeError%":n,"%Uint8Array%":typeof Uint8Array>"u"?e:Uint8Array,"%Uint8ClampedArray%":typeof Uint8ClampedArray>"u"?e:Uint8ClampedArray,"%Uint16Array%":typeof Uint16Array>"u"?e:Uint16Array,"%Uint32Array%":typeof Uint32Array>"u"?e:Uint32Array,"%URIError%":URIError,"%WeakMap%":typeof WeakMap>"u"?e:WeakMap,"%WeakRef%":typeof WeakRef>"u"?e:WeakRef,"%WeakSet%":typeof WeakSet>"u"?e:WeakSet};if(l)try{null.error}catch(Q){var w=l(l(Q));v["%Error.prototype%"]=w}var T=function Q(H){var V;if(H==="%AsyncFunction%")V=i("async function () {}");else if(H==="%GeneratorFunction%")V=i("function* () {}");else if(H==="%AsyncGeneratorFunction%")V=i("async function* () {}");else if(H==="%AsyncGenerator%"){var G=Q("%AsyncGeneratorFunction%");G&&(V=G.prototype)}else if(H==="%AsyncIteratorPrototype%"){var Y=Q("%AsyncGenerator%");Y&&l&&(V=l(Y.prototype))}return v[H]=V,V},A={"%ArrayBufferPrototype%":["ArrayBuffer","prototype"],"%ArrayPrototype%":["Array","prototype"],"%ArrayProto_entries%":["Array","prototype","entries"],"%ArrayProto_forEach%":["Array","prototype","forEach"],"%ArrayProto_keys%":["Array","prototype","keys"],"%ArrayProto_values%":["Array","prototype","values"],"%AsyncFunctionPrototype%":["AsyncFunction","prototype"],"%AsyncGenerator%":["AsyncGeneratorFunction","prototype"],"%AsyncGeneratorPrototype%":["AsyncGeneratorFunction","prototype","prototype"],"%BooleanPrototype%":["Boolean","prototype"],"%DataViewPrototype%":["DataView","prototype"],"%DatePrototype%":["Date","prototype"],"%ErrorPrototype%":["Error","prototype"],"%EvalErrorPrototype%":["EvalError","prototype"],"%Float32ArrayPrototype%":["Float32Array","prototype"],"%Float64ArrayPrototype%":["Float64Array","prototype"],"%FunctionPrototype%":["Function","prototype"],"%Generator%":["GeneratorFunction","prototype"],"%GeneratorPrototype%":["GeneratorFunction","prototype","prototype"],"%Int8ArrayPrototype%":["Int8Array","prototype"],"%Int16ArrayPrototype%":["Int16Array","prototype"],"%Int32ArrayPrototype%":["Int32Array","prototype"],"%JSONParse%":["JSON","parse"],"%JSONStringify%":["JSON","stringify"],"%MapPrototype%":["Map","prototype"],"%NumberPrototype%":["Number","prototype"],"%ObjectPrototype%":["Object","prototype"],"%ObjProto_toString%":["Object","prototype","toString"],"%ObjProto_valueOf%":["Object","prototype","valueOf"],"%PromisePrototype%":["Promise","prototype"],"%PromiseProto_then%":["Promise","prototype","then"],"%Promise_all%":["Promise","all"],"%Promise_reject%":["Promise","reject"],"%Promise_resolve%":["Promise","resolve"],"%RangeErrorPrototype%":["RangeError","prototype"],"%ReferenceErrorPrototype%":["ReferenceError","prototype"],"%RegExpPrototype%":["RegExp","prototype"],"%SetPrototype%":["Set","prototype"],"%SharedArrayBufferPrototype%":["SharedArrayBuffer","prototype"],"%StringPrototype%":["String","prototype"],"%SymbolPrototype%":["Symbol","prototype"],"%SyntaxErrorPrototype%":["SyntaxError","prototype"],"%TypedArrayPrototype%":["TypedArray","prototype"],"%TypeErrorPrototype%":["TypeError","prototype"],"%Uint8ArrayPrototype%":["Uint8Array","prototype"],"%Uint8ClampedArrayPrototype%":["Uint8ClampedArray","prototype"],"%Uint16ArrayPrototype%":["Uint16Array","prototype"],"%Uint32ArrayPrototype%":["Uint32Array","prototype"],"%URIErrorPrototype%":["URIError","prototype"],"%WeakMapPrototype%":["WeakMap","prototype"],"%WeakSetPrototype%":["WeakSet","prototype"]},b=po(),B=fp(),C=b.call(Function.call,Array.prototype.concat),E=b.call(Function.apply,Array.prototype.splice),P=b.call(Function.call,String.prototype.replace),N=b.call(Function.call,String.prototype.slice),q=b.call(Function.call,RegExp.prototype.exec),R=/[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g,g=/\\(\\)?/g,O=function(H){var V=N(H,0,1),G=N(H,-1);if(V==="%"&&G!=="%")throw new t("invalid intrinsic syntax, expected closing `%`");if(G==="%"&&V!=="%")throw new t("invalid intrinsic syntax, expected opening `%`");var Y=[];return P(H,R,function(_,z,J,ae){Y[Y.length]=J?P(ae,g,"$1"):z||_}),Y},j=function(H,V){var G=H,Y;if(B(A,G)&&(Y=A[G],G="%"+Y[0]+"%"),B(v,G)){var _=v[G];if(_===f&&(_=T(G)),typeof _>"u"&&!V)throw new n("intrinsic "+H+" exists, but is not available. Please file an issue!");return{alias:Y,name:G,value:_}}throw new t("intrinsic "+H+" does not exist!")};return bi=function(H,V){if(typeof H!="string"||H.length===0)throw new n("intrinsic name must be a non-empty string");if(arguments.length>1&&typeof V!="boolean")throw new n('"allowMissing" argument must be a boolean');if(q(/^%?[^%]*%?$/,H)===null)throw new t("`%` may not be present anywhere but at the beginning and end of the intrinsic name");var G=O(H),Y=G.length>0?G[0]:"",_=j("%"+Y+"%",V),z=_.name,J=_.value,ae=!1,Z=_.alias;Z&&(Y=Z[0],E(G,C([0,1],Z)));for(var m=1,S=!0;m<G.length;m+=1){var I=G[m],L=N(I,0,1),$=N(I,-1);if((L==='"'||L==="'"||L==="`"||$==='"'||$==="'"||$==="`")&&L!==$)throw new t("property names with quotes must have matching quotes");if((I==="constructor"||!S)&&(ae=!0),Y+="."+I,z="%"+Y+"%",B(v,z))J=v[z];else if(J!=null){if(!(I in J)){if(!V)throw new n("base intrinsic for "+H+" exists, but the property is not available.");return}if(o&&m+1>=G.length){var te=o(J,I);S=!!te,S&&"get"in te&&!("originalValue"in te.get)?J=te.get:J=J[I]}else S=B(J,I),J=J[I];S&&!ae&&(v[z]=J)}}return J},bi}var Di={exports:{}},Ua;function du(){return Ua||(Ua=1,function(e){var t=po(),r=ho(),n=r("%Function.prototype.apply%"),i=r("%Function.prototype.call%"),o=r("%Reflect.apply%",!0)||t.call(i,n),a=r("%Object.getOwnPropertyDescriptor%",!0),s=r("%Object.defineProperty%",!0),u=r("%Math.max%");if(s)try{s({},"a",{value:1})}catch{s=null}e.exports=function(f){var d=o(t,i,arguments);if(a&&s){var v=a(d,"length");v.configurable&&s(d,"length",{value:1+u(0,f.length-(arguments.length-1))})}return d};var c=function(){return o(t,n,arguments)};s?s(e.exports,"apply",{value:c}):e.exports.apply=c}(Di)),Di.exports}var Ti,ja;function hu(){if(ja)return Ti;ja=1;var e=ho(),t=du(),r=t(e("String.prototype.indexOf"));return Ti=function(i,o){var a=e(i,!!o);return typeof a=="function"&&r(i,".prototype.")>-1?t(a):a},Ti}var wi,qa;function pp(){if(qa)return wi;qa=1;var e=fo()(),t=hu(),r=t("Object.prototype.toString"),n=function(s){return e&&s&&typeof s=="object"&&Symbol.toStringTag in s?!1:r(s)==="[object Arguments]"},i=function(s){return n(s)?!0:s!==null&&typeof s=="object"&&typeof s.length=="number"&&s.length>=0&&r(s)!=="[object Array]"&&r(s.callee)==="[object Function]"},o=function(){return n(arguments)}();return n.isLegacyArguments=i,wi=o?n:i,wi}var Ii,Ha;function dp(){if(Ha)return Ii;Ha=1;var e=Object.prototype.toString,t=Function.prototype.toString,r=/^\s*(?:function)?\*/,n=fo()(),i=Object.getPrototypeOf,o=function(){if(!n)return!1;try{return Function("return function*() {}")()}catch{}},a;return Ii=function(u){if(typeof u!="function")return!1;if(r.test(t.call(u)))return!0;if(!n){var c=e.call(u);return c==="[object GeneratorFunction]"}if(!i)return!1;if(typeof a>"u"){var l=o();a=l?i(l):!1}return i(u)===a},Ii}var Si,Va;function hp(){if(Va)return Si;Va=1;var e=Function.prototype.toString,t=typeof Reflect=="object"&&Reflect!==null&&Reflect.apply,r,n;if(typeof t=="function"&&typeof Object.defineProperty=="function")try{r=Object.defineProperty({},"length",{get:function(){throw n}}),n={},t(function(){throw 42},null,r)}catch(B){B!==n&&(t=null)}else t=null;var i=/^\s*class\b/,o=function(C){try{var E=e.call(C);return i.test(E)}catch{return!1}},a=function(C){try{return o(C)?!1:(e.call(C),!0)}catch{return!1}},s=Object.prototype.toString,u="[object Object]",c="[object Function]",l="[object GeneratorFunction]",f="[object HTMLAllCollection]",d="[object HTML document.all class]",v="[object HTMLCollection]",w=typeof Symbol=="function"&&!!Symbol.toStringTag,T=!(0 in[,]),A=function(){return!1};if(typeof document=="object"){var b=document.all;s.call(b)===s.call(document.all)&&(A=function(C){if((T||!C)&&(typeof C>"u"||typeof C=="object"))try{var E=s.call(C);return(E===f||E===d||E===v||E===u)&&C("")==null}catch{}return!1})}return Si=t?function(C){if(A(C))return!0;if(!C||typeof C!="function"&&typeof C!="object")return!1;try{t(C,null,r)}catch(E){if(E!==n)return!1}return!o(C)&&a(C)}:function(C){if(A(C))return!0;if(!C||typeof C!="function"&&typeof C!="object")return!1;if(w)return a(C);if(o(C))return!1;var E=s.call(C);return E!==c&&E!==l&&!/^\[object HTML/.test(E)?!1:a(C)},Si}var Ni,za;function Ap(){if(za)return Ni;za=1;var e=hp(),t=Object.prototype.toString,r=Object.prototype.hasOwnProperty,n=function(u,c,l){for(var f=0,d=u.length;f<d;f++)r.call(u,f)&&(l==null?c(u[f],f,u):c.call(l,u[f],f,u))},i=function(u,c,l){for(var f=0,d=u.length;f<d;f++)l==null?c(u.charAt(f),f,u):c.call(l,u.charAt(f),f,u)},o=function(u,c,l){for(var f in u)r.call(u,f)&&(l==null?c(u[f],f,u):c.call(l,u[f],f,u))},a=function(u,c,l){if(!e(c))throw new TypeError("iterator must be a function");var f;arguments.length>=3&&(f=l),t.call(u)==="[object Array]"?n(u,c,f):typeof u=="string"?i(u,c,f):o(u,c,f)};return Ni=a,Ni}var Ci,Ga;function vp(){if(Ga)return Ci;Ga=1;var e=["BigInt64Array","BigUint64Array","Float32Array","Float64Array","Int16Array","Int32Array","Int8Array","Uint16Array","Uint32Array","Uint8Array","Uint8ClampedArray"],t=typeof globalThis>"u"?K:globalThis;return Ci=function(){for(var n=[],i=0;i<e.length;i++)typeof t[e[i]]=="function"&&(n[n.length]=e[i]);return n},Ci}var Bi,Xa;function gp(){if(Xa)return Bi;Xa=1;var e=ho(),t=e("%Object.getOwnPropertyDescriptor%",!0);if(t)try{t([],"length")}catch{t=null}return Bi=t,Bi}var Oi,Ja;function Au(){if(Ja)return Oi;Ja=1;var e=Ap(),t=vp(),r=du(),n=hu(),i=gp(),o=n("Object.prototype.toString"),a=fo()(),s=typeof globalThis>"u"?K:globalThis,u=t(),c=n("String.prototype.slice"),l=Object.getPrototypeOf,f=n("Array.prototype.indexOf",!0)||function(A,b){for(var B=0;B<A.length;B+=1)if(A[B]===b)return B;return-1},d={__proto__:null};a&&i&&l?e(u,function(T){var A=new s[T];if(Symbol.toStringTag in A){var b=l(A),B=i(b,Symbol.toStringTag);if(!B){var C=l(b);B=i(C,Symbol.toStringTag)}d["$"+T]=r(B.get)}}):e(u,function(T){var A=new s[T];d["$"+T]=r(A.slice)});var v=function(A){var b=!1;return e(d,function(B,C){if(!b)try{"$"+B(A)===C&&(b=c(C,1))}catch{}}),b},w=function(A){var b=!1;return e(d,function(B,C){if(!b)try{B(A),b=c(C,1)}catch{}}),b};return Oi=function(A){if(!A||typeof A!="object")return!1;if(!a){var b=c(o(A),8,-1);return f(u,b)>-1?b:b!=="Object"?!1:w(A)}return i?v(A):null},Oi}var Pi,Wa;function mp(){if(Wa)return Pi;Wa=1;var e=Au();return Pi=function(r){return!!e(r)},Pi}var Ya;function yp(){return Ya||(Ya=1,function(e){var t=pp(),r=dp(),n=Au(),i=mp();function o(U){return U.call.bind(U)}var a=typeof BigInt<"u",s=typeof Symbol<"u",u=o(Object.prototype.toString),c=o(Number.prototype.valueOf),l=o(String.prototype.valueOf),f=o(Boolean.prototype.valueOf);if(a)var d=o(BigInt.prototype.valueOf);if(s)var v=o(Symbol.prototype.valueOf);function w(U,Jt){if(typeof U!="object")return!1;try{return Jt(U),!0}catch{return!1}}e.isArgumentsObject=t,e.isGeneratorFunction=r,e.isTypedArray=i;function T(U){return typeof Promise<"u"&&U instanceof Promise||U!==null&&typeof U=="object"&&typeof U.then=="function"&&typeof U.catch=="function"}e.isPromise=T;function A(U){return typeof ArrayBuffer<"u"&&ArrayBuffer.isView?ArrayBuffer.isView(U):i(U)||S(U)}e.isArrayBufferView=A;function b(U){return n(U)==="Uint8Array"}e.isUint8Array=b;function B(U){return n(U)==="Uint8ClampedArray"}e.isUint8ClampedArray=B;function C(U){return n(U)==="Uint16Array"}e.isUint16Array=C;function E(U){return n(U)==="Uint32Array"}e.isUint32Array=E;function P(U){return n(U)==="Int8Array"}e.isInt8Array=P;function N(U){return n(U)==="Int16Array"}e.isInt16Array=N;function q(U){return n(U)==="Int32Array"}e.isInt32Array=q;function R(U){return n(U)==="Float32Array"}e.isFloat32Array=R;function g(U){return n(U)==="Float64Array"}e.isFloat64Array=g;function O(U){return n(U)==="BigInt64Array"}e.isBigInt64Array=O;function j(U){return n(U)==="BigUint64Array"}e.isBigUint64Array=j;function Q(U){return u(U)==="[object Map]"}Q.working=typeof Map<"u"&&Q(new Map);function H(U){return typeof Map>"u"?!1:Q.working?Q(U):U instanceof Map}e.isMap=H;function V(U){return u(U)==="[object Set]"}V.working=typeof Set<"u"&&V(new Set);function G(U){return typeof Set>"u"?!1:V.working?V(U):U instanceof Set}e.isSet=G;function Y(U){return u(U)==="[object WeakMap]"}Y.working=typeof WeakMap<"u"&&Y(new WeakMap);function _(U){return typeof WeakMap>"u"?!1:Y.working?Y(U):U instanceof WeakMap}e.isWeakMap=_;function z(U){return u(U)==="[object WeakSet]"}z.working=typeof WeakSet<"u"&&z(new WeakSet);function J(U){return z(U)}e.isWeakSet=J;function ae(U){return u(U)==="[object ArrayBuffer]"}ae.working=typeof ArrayBuffer<"u"&&ae(new ArrayBuffer);function Z(U){return typeof ArrayBuffer>"u"?!1:ae.working?ae(U):U instanceof ArrayBuffer}e.isArrayBuffer=Z;function m(U){return u(U)==="[object DataView]"}m.working=typeof ArrayBuffer<"u"&&typeof DataView<"u"&&m(new DataView(new ArrayBuffer(1),0,1));function S(U){return typeof DataView>"u"?!1:m.working?m(U):U instanceof DataView}e.isDataView=S;var I=typeof SharedArrayBuffer<"u"?SharedArrayBuffer:void 0;function L(U){return u(U)==="[object SharedArrayBuffer]"}function $(U){return typeof I>"u"?!1:(typeof L.working>"u"&&(L.working=L(new I)),L.working?L(U):U instanceof I)}e.isSharedArrayBuffer=$;function te(U){return u(U)==="[object AsyncFunction]"}e.isAsyncFunction=te;function W(U){return u(U)==="[object Map Iterator]"}e.isMapIterator=W;function ne(U){return u(U)==="[object Set Iterator]"}e.isSetIterator=ne;function ce(U){return u(U)==="[object Generator]"}e.isGeneratorObject=ce;function de(U){return u(U)==="[object WebAssembly.Module]"}e.isWebAssemblyCompiledModule=de;function pe(U){return w(U,c)}e.isNumberObject=pe;function Ke(U){return w(U,l)}e.isStringObject=Ke;function De(U){return w(U,f)}e.isBooleanObject=De;function Ze(U){return a&&w(U,d)}e.isBigIntObject=Ze;function Se(U){return s&&w(U,v)}e.isSymbolObject=Se;function Gt(U){return pe(U)||Ke(U)||De(U)||Ze(U)||Se(U)}e.isBoxedPrimitive=Gt;function Xt(U){return typeof Uint8Array<"u"&&(Z(U)||$(U))}e.isAnyArrayBuffer=Xt,["isProxy","isExternal","isModuleNamespaceObject"].forEach(function(U){Object.defineProperty(e,U,{enumerable:!1,value:function(){throw new Error(U+" is not supported in userland")}})})}(di)),di}var Ri,Ka;function Ep(){return Ka||(Ka=1,Ri=function(t){return t&&typeof t=="object"&&typeof t.copy=="function"&&typeof t.fill=="function"&&typeof t.readUInt8=="function"}),Ri}var cn={exports:{}},Za;function bp(){return Za||(Za=1,typeof Object.create=="function"?cn.exports=function(t,r){r&&(t.super_=r,t.prototype=Object.create(r.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}))}:cn.exports=function(t,r){if(r){t.super_=r;var n=function(){};n.prototype=r.prototype,t.prototype=new n,t.prototype.constructor=t}}),cn.exports}var _a;function vu(){return _a||(_a=1,function(e){var t=Object.getOwnPropertyDescriptors||function(S){for(var I=Object.keys(S),L={},$=0;$<I.length;$++)L[I[$]]=Object.getOwnPropertyDescriptor(S,I[$]);return L},r=/%[sdj%]/g;e.format=function(m){if(!P(m)){for(var S=[],I=0;I<arguments.length;I++)S.push(a(arguments[I]));return S.join(" ")}for(var I=1,L=arguments,$=L.length,te=String(m).replace(r,function(ne){if(ne==="%%")return"%";if(I>=$)return ne;switch(ne){case"%s":return String(L[I++]);case"%d":return Number(L[I++]);case"%j":try{return JSON.stringify(L[I++])}catch{return"[Circular]"}default:return ne}}),W=L[I];I<$;W=L[++I])B(W)||!g(W)?te+=" "+W:te+=" "+a(W);return te},e.deprecate=function(m,S){if(typeof process<"u"&&process.noDeprecation===!0)return m;if(typeof process>"u")return function(){return e.deprecate(m,S).apply(this,arguments)};var I=!1;function L(){if(!I){if(process.throwDeprecation)throw new Error(S);process.traceDeprecation?console.trace(S):console.error(S),I=!0}return m.apply(this,arguments)}return L};var n={},i=/^$/;if({}.NODE_DEBUG){var o={}.NODE_DEBUG;o=o.replace(/[|\\{}()[\]^$+?.]/g,"\\$&").replace(/\*/g,".*").replace(/,/g,"$|^").toUpperCase(),i=new RegExp("^"+o+"$","i")}e.debuglog=function(m){if(m=m.toUpperCase(),!n[m])if(i.test(m)){var S=process.pid;n[m]=function(){var I=e.format.apply(e,arguments);console.error("%s %d: %s",m,S,I)}}else n[m]=function(){};return n[m]};function a(m,S){var I={seen:[],stylize:u};return arguments.length>=3&&(I.depth=arguments[2]),arguments.length>=4&&(I.colors=arguments[3]),b(S)?I.showHidden=S:S&&e._extend(I,S),q(I.showHidden)&&(I.showHidden=!1),q(I.depth)&&(I.depth=2),q(I.colors)&&(I.colors=!1),q(I.customInspect)&&(I.customInspect=!0),I.colors&&(I.stylize=s),l(I,m,I.depth)}e.inspect=a,a.colors={bold:[1,22],italic:[3,23],underline:[4,24],inverse:[7,27],white:[37,39],grey:[90,39],black:[30,39],blue:[34,39],cyan:[36,39],green:[32,39],magenta:[35,39],red:[31,39],yellow:[33,39]},a.styles={special:"cyan",number:"yellow",boolean:"yellow",undefined:"grey",null:"bold",string:"green",date:"magenta",regexp:"red"};function s(m,S){var I=a.styles[S];return I?"\x1B["+a.colors[I][0]+"m"+m+"\x1B["+a.colors[I][1]+"m":m}function u(m,S){return m}function c(m){var S={};return m.forEach(function(I,L){S[I]=!0}),S}function l(m,S,I){if(m.customInspect&&S&&Q(S.inspect)&&S.inspect!==e.inspect&&!(S.constructor&&S.constructor.prototype===S)){var L=S.inspect(I,m);return P(L)||(L=l(m,L,I)),L}var $=f(m,S);if($)return $;var te=Object.keys(S),W=c(te);if(m.showHidden&&(te=Object.getOwnPropertyNames(S)),j(S)&&(te.indexOf("message")>=0||te.indexOf("description")>=0))return d(S);if(te.length===0){if(Q(S)){var ne=S.name?": "+S.name:"";return m.stylize("[Function"+ne+"]","special")}if(R(S))return m.stylize(RegExp.prototype.toString.call(S),"regexp");if(O(S))return m.stylize(Date.prototype.toString.call(S),"date");if(j(S))return d(S)}var ce="",de=!1,pe=["{","}"];if(A(S)&&(de=!0,pe=["[","]"]),Q(S)){var Ke=S.name?": "+S.name:"";ce=" [Function"+Ke+"]"}if(R(S)&&(ce=" "+RegExp.prototype.toString.call(S)),O(S)&&(ce=" "+Date.prototype.toUTCString.call(S)),j(S)&&(ce=" "+d(S)),te.length===0&&(!de||S.length==0))return pe[0]+ce+pe[1];if(I<0)return R(S)?m.stylize(RegExp.prototype.toString.call(S),"regexp"):m.stylize("[Object]","special");m.seen.push(S);var De;return de?De=v(m,S,I,W,te):De=te.map(function(Ze){return w(m,S,I,W,Ze,de)}),m.seen.pop(),T(De,ce,pe)}function f(m,S){if(q(S))return m.stylize("undefined","undefined");if(P(S)){var I="'"+JSON.stringify(S).replace(/^"|"$/g,"").replace(/'/g,"\\'").replace(/\\"/g,'"')+"'";return m.stylize(I,"string")}if(E(S))return m.stylize(""+S,"number");if(b(S))return m.stylize(""+S,"boolean");if(B(S))return m.stylize("null","null")}function d(m){return"["+Error.prototype.toString.call(m)+"]"}function v(m,S,I,L,$){for(var te=[],W=0,ne=S.length;W<ne;++W)z(S,String(W))?te.push(w(m,S,I,L,String(W),!0)):te.push("");return $.forEach(function(ce){ce.match(/^\d+$/)||te.push(w(m,S,I,L,ce,!0))}),te}function w(m,S,I,L,$,te){var W,ne,ce;if(ce=Object.getOwnPropertyDescriptor(S,$)||{value:S[$]},ce.get?ce.set?ne=m.stylize("[Getter/Setter]","special"):ne=m.stylize("[Getter]","special"):ce.set&&(ne=m.stylize("[Setter]","special")),z(L,$)||(W="["+$+"]"),ne||(m.seen.indexOf(ce.value)<0?(B(I)?ne=l(m,ce.value,null):ne=l(m,ce.value,I-1),ne.indexOf(`
`)>-1&&(te?ne=ne.split(`
`).map(function(de){return"  "+de}).join(`
`).slice(2):ne=`
`+ne.split(`
`).map(function(de){return"   "+de}).join(`
`))):ne=m.stylize("[Circular]","special")),q(W)){if(te&&$.match(/^\d+$/))return ne;W=JSON.stringify(""+$),W.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)?(W=W.slice(1,-1),W=m.stylize(W,"name")):(W=W.replace(/'/g,"\\'").replace(/\\"/g,'"').replace(/(^"|"$)/g,"'"),W=m.stylize(W,"string"))}return W+": "+ne}function T(m,S,I){var L=m.reduce(function($,te){return te.indexOf(`
`)>=0,$+te.replace(/\u001b\[\d\d?m/g,"").length+1},0);return L>60?I[0]+(S===""?"":S+`
 `)+" "+m.join(`,
  `)+" "+I[1]:I[0]+S+" "+m.join(", ")+" "+I[1]}e.types=yp();function A(m){return Array.isArray(m)}e.isArray=A;function b(m){return typeof m=="boolean"}e.isBoolean=b;function B(m){return m===null}e.isNull=B;function C(m){return m==null}e.isNullOrUndefined=C;function E(m){return typeof m=="number"}e.isNumber=E;function P(m){return typeof m=="string"}e.isString=P;function N(m){return typeof m=="symbol"}e.isSymbol=N;function q(m){return m===void 0}e.isUndefined=q;function R(m){return g(m)&&V(m)==="[object RegExp]"}e.isRegExp=R,e.types.isRegExp=R;function g(m){return typeof m=="object"&&m!==null}e.isObject=g;function O(m){return g(m)&&V(m)==="[object Date]"}e.isDate=O,e.types.isDate=O;function j(m){return g(m)&&(V(m)==="[object Error]"||m instanceof Error)}e.isError=j,e.types.isNativeError=j;function Q(m){return typeof m=="function"}e.isFunction=Q;function H(m){return m===null||typeof m=="boolean"||typeof m=="number"||typeof m=="string"||typeof m=="symbol"||typeof m>"u"}e.isPrimitive=H,e.isBuffer=Ep();function V(m){return Object.prototype.toString.call(m)}function G(m){return m<10?"0"+m.toString(10):m.toString(10)}var Y=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];function _(){var m=new Date,S=[G(m.getHours()),G(m.getMinutes()),G(m.getSeconds())].join(":");return[m.getDate(),Y[m.getMonth()],S].join(" ")}e.log=function(){console.log("%s - %s",_(),e.format.apply(e,arguments))},e.inherits=bp(),e._extend=function(m,S){if(!S||!g(S))return m;for(var I=Object.keys(S),L=I.length;L--;)m[I[L]]=S[I[L]];return m};function z(m,S){return Object.prototype.hasOwnProperty.call(m,S)}var J=typeof Symbol<"u"?Symbol("util.promisify.custom"):void 0;e.promisify=function(S){if(typeof S!="function")throw new TypeError('The "original" argument must be of type Function');if(J&&S[J]){var I=S[J];if(typeof I!="function")throw new TypeError('The "util.promisify.custom" argument must be of type Function');return Object.defineProperty(I,J,{value:I,enumerable:!1,writable:!1,configurable:!0}),I}function I(){for(var L,$,te=new Promise(function(ce,de){L=ce,$=de}),W=[],ne=0;ne<arguments.length;ne++)W.push(arguments[ne]);W.push(function(ce,de){ce?$(ce):L(de)});try{S.apply(this,W)}catch(ce){$(ce)}return te}return Object.setPrototypeOf(I,Object.getPrototypeOf(S)),J&&Object.defineProperty(I,J,{value:I,enumerable:!1,writable:!1,configurable:!0}),Object.defineProperties(I,t(S))},e.promisify.custom=J;function ae(m,S){if(!m){var I=new Error("Promise was rejected with a falsy value");I.reason=m,m=I}return S(m)}function Z(m){if(typeof m!="function")throw new TypeError('The "original" argument must be of type Function');function S(){for(var I=[],L=0;L<arguments.length;L++)I.push(arguments[L]);var $=I.pop();if(typeof $!="function")throw new TypeError("The last argument must be of type Function");var te=this,W=function(){return $.apply(te,arguments)};m.apply(this,I).then(function(ne){process.nextTick(W.bind(null,null,ne))},function(ne){process.nextTick(ae.bind(null,ne,W))})}return Object.setPrototypeOf(S,Object.getPrototypeOf(m)),Object.defineProperties(S,t(m)),S}e.callbackify=Z}(pi)),pi}lo.TextEncoder=typeof TextEncoder<"u"?TextEncoder:vu().TextEncoder;lo.TextDecoder=typeof TextDecoder<"u"?TextDecoder:vu().TextDecoder;Object.defineProperty(et,"__esModule",{value:!0});et.getArrayBuffer=et.decodeBuffer=et.encodeBuffer=void 0;var gu=lo;function Dp(e){var t=new gu.TextEncoder,r=t.encode(e);return mu(r)}et.encodeBuffer=Dp;function Tp(e,t){var r=new gu.TextDecoder(t);return r.decode(e)}et.decodeBuffer=Tp;function mu(e){return e.buffer.slice(e.byteOffset,e.byteOffset+e.byteLength)}et.getArrayBuffer=mu;var Fn={};Object.defineProperty(Fn,"__esModule",{value:!0});Fn.uuidv4=void 0;function wp(){return"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,function(e){var t=Math.random()*16|0,r=e=="x"?t:t&3|8;return r.toString(16)})}Fn.uuidv4=wp;var ki=K&&K.__awaiter||function(e,t,r,n){function i(o){return o instanceof r?o:new r(function(a){a(o)})}return new(r||(r=Promise))(function(o,a){function s(l){try{c(n.next(l))}catch(f){a(f)}}function u(l){try{c(n.throw(l))}catch(f){a(f)}}function c(l){l.done?o(l.value):i(l.value).then(s,u)}c((n=n.apply(e,t||[])).next())})},Li=K&&K.__generator||function(e,t){var r={label:0,sent:function(){if(o[0]&1)throw o[1];return o[1]},trys:[],ops:[]},n,i,o,a;return a={next:s(0),throw:s(1),return:s(2)},typeof Symbol=="function"&&(a[Symbol.iterator]=function(){return this}),a;function s(c){return function(l){return u([c,l])}}function u(c){if(n)throw new TypeError("Generator is already executing.");for(;r;)try{if(n=1,i&&(o=c[0]&2?i.return:c[0]?i.throw||((o=i.return)&&o.call(i),0):i.next)&&!(o=o.call(i,c[1])).done)return o;switch(i=0,o&&(c=[c[0]&2,o.value]),c[0]){case 0:case 1:o=c;break;case 4:return r.label++,{value:c[1],done:!1};case 5:r.label++,i=c[1],c=[0];continue;case 7:c=r.ops.pop(),r.trys.pop();continue;default:if(o=r.trys,!(o=o.length>0&&o[o.length-1])&&(c[0]===6||c[0]===2)){r=0;continue}if(c[0]===3&&(!o||c[1]>o[0]&&c[1]<o[3])){r.label=c[1];break}if(c[0]===6&&r.label<o[1]){r.label=o[1],o=c;break}if(o&&r.label<o[2]){r.label=o[2],r.ops.push(c);break}o[2]&&r.ops.pop(),r.trys.pop();continue}c=t.call(e,r)}catch(l){c=[6,l],i=0}finally{n=o=0}if(c[0]&5)throw c[1];return{value:c[0]?c[1]:void 0,done:!0}}};Object.defineProperty(Vt,"__esModule",{value:!0});Vt.IsomorphicRequest=void 0;var Ip=We,xi=gt,$a=et,Sp=Fn,Np=function(){function e(t,r){r===void 0&&(r={});var n=new ArrayBuffer(0);if(this._bodyUsed=!1,t instanceof e){this.id=t.id,this.url=t.url,this.method=t.method,this.headers=t.headers,this.credentials=t.credentials,this._body=t._body||n;return}this.id=Sp.uuidv4(),this.url=t,this.method=r.method||"GET",this.headers=new Ip.Headers(r.headers),this.credentials=r.credentials||"same-origin",this._body=r.body||n}return Object.defineProperty(e.prototype,"bodyUsed",{get:function(){return this._bodyUsed},enumerable:!1,configurable:!0}),e.prototype.text=function(){return ki(this,void 0,void 0,function(){return Li(this,function(t){return xi.invariant(!this.bodyUsed,'Failed to execute "text" on "IsomorphicRequest": body buffer already read'),this._bodyUsed=!0,[2,$a.decodeBuffer(this._body)]})})},e.prototype.json=function(){return ki(this,void 0,void 0,function(){var t;return Li(this,function(r){return xi.invariant(!this.bodyUsed,'Failed to execute "json" on "IsomorphicRequest": body buffer already read'),this._bodyUsed=!0,t=$a.decodeBuffer(this._body),[2,JSON.parse(t)]})})},e.prototype.arrayBuffer=function(){return ki(this,void 0,void 0,function(){return Li(this,function(t){return xi.invariant(!this.bodyUsed,'Failed to execute "arrayBuffer" on "IsomorphicRequest": body buffer already read'),this._bodyUsed=!0,[2,this._body]})})},e.prototype.clone=function(){return new e(this)},e}();Vt.IsomorphicRequest=Np;var sr={},Mn={},Cp=K&&K.__awaiter||function(e,t,r,n){function i(o){return o instanceof r?o:new r(function(a){a(o)})}return new(r||(r=Promise))(function(o,a){function s(l){try{c(n.next(l))}catch(f){a(f)}}function u(l){try{c(n.throw(l))}catch(f){a(f)}}function c(l){l.done?o(l.value):i(l.value).then(s,u)}c((n=n.apply(e,t||[])).next())})},Bp=K&&K.__generator||function(e,t){var r={label:0,sent:function(){if(o[0]&1)throw o[1];return o[1]},trys:[],ops:[]},n,i,o,a;return a={next:s(0),throw:s(1),return:s(2)},typeof Symbol=="function"&&(a[Symbol.iterator]=function(){return this}),a;function s(c){return function(l){return u([c,l])}}function u(c){if(n)throw new TypeError("Generator is already executing.");for(;r;)try{if(n=1,i&&(o=c[0]&2?i.return:c[0]?i.throw||((o=i.return)&&o.call(i),0):i.next)&&!(o=o.call(i,c[1])).done)return o;switch(i=0,o&&(c=[c[0]&2,o.value]),c[0]){case 0:case 1:o=c;break;case 4:return r.label++,{value:c[1],done:!1};case 5:r.label++,i=c[1],c=[0];continue;case 7:c=r.ops.pop(),r.trys.pop();continue;default:if(o=r.trys,!(o=o.length>0&&o[o.length-1])&&(c[0]===6||c[0]===2)){r=0;continue}if(c[0]===3&&(!o||c[1]>o[0]&&c[1]<o[3])){r.label=c[1];break}if(c[0]===6&&r.label<o[1]){r.label=o[1],o=c;break}if(o&&r.label<o[2]){r.label=o[2],r.ops.push(c);break}o[2]&&r.ops.pop(),r.trys.pop();continue}c=t.call(e,r)}catch(l){c=[6,l],i=0}finally{n=o=0}if(c[0]&5)throw c[1];return{value:c[0]?c[1]:void 0,done:!0}}};Object.defineProperty(Mn,"__esModule",{value:!0});Mn.createLazyCallback=void 0;function Op(e){var t=this;e===void 0&&(e={});var r=0,n,i,o=new Promise(function(s){i=s}).finally(function(){clearTimeout(n)}),a=function(){for(var s,u=[],c=0;c<arguments.length;c++)u[c]=arguments[c];e.maxCalls&&r>=e.maxCalls&&((s=e.maxCallsCallback)===null||s===void 0||s.call(e)),i(u),r++};return a.invoked=function(){return Cp(t,void 0,void 0,function(){return Bp(this,function(s){return n=setTimeout(function(){i([])},0),[2,o]})})},a}Mn.createLazyCallback=Op;var Pp=K&&K.__extends||function(){var e=function(t,r){return e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(n,i){n.__proto__=i}||function(n,i){for(var o in i)Object.prototype.hasOwnProperty.call(i,o)&&(n[o]=i[o])},e(t,r)};return function(t,r){if(typeof r!="function"&&r!==null)throw new TypeError("Class extends value "+String(r)+" is not a constructor or null");e(t,r);function n(){this.constructor=t}t.prototype=r===null?Object.create(r):(n.prototype=r.prototype,new n)}}();Object.defineProperty(sr,"__esModule",{value:!0});sr.InteractiveIsomorphicRequest=void 0;var Rp=gt,kp=Vt,Lp=Mn,xp=function(e){Pp(t,e);function t(r){var n=e.call(this,r)||this;return n.respondWith=Lp.createLazyCallback({maxCalls:1,maxCallsCallback:function(){Rp.invariant(!1,'Failed to respond to "%s %s" request: the "request" event has already been responded to.',n.method,n.url.href)}}),n}return t}(kp.IsomorphicRequest);sr.InteractiveIsomorphicRequest=xp;var zr={};Object.defineProperty(zr,"__esModule",{value:!0});zr.getCleanUrl=void 0;function Fp(e,t){return t===void 0&&(t=!0),[t&&e.origin,e.pathname].filter(Boolean).join("")}zr.getCleanUrl=Fp;(function(e){var t=K&&K.__createBinding||(Object.create?function(o,a,s,u){u===void 0&&(u=s),Object.defineProperty(o,u,{enumerable:!0,get:function(){return a[s]}})}:function(o,a,s,u){u===void 0&&(u=s),o[u]=a[s]}),r=K&&K.__exportStar||function(o,a){for(var s in o)s!=="default"&&!Object.prototype.hasOwnProperty.call(a,s)&&t(a,o,s)};Object.defineProperty(e,"__esModule",{value:!0}),e.decodeBuffer=e.encodeBuffer=e.getCleanUrl=void 0,r(ar,e),r(Vr,e),r(xn,e),r(Vt,e),r(sr,e);var n=zr;Object.defineProperty(e,"getCleanUrl",{enumerable:!0,get:function(){return n.getCleanUrl}});var i=et;Object.defineProperty(e,"encodeBuffer",{enumerable:!0,get:function(){return i.encodeBuffer}}),Object.defineProperty(e,"decodeBuffer",{enumerable:!0,get:function(){return i.decodeBuffer}})})(kn);var Ao={},yu={},Gr={exports:{}},Zt={decodeValues:!0,map:!1,silent:!1};function Xi(e){return typeof e=="string"&&!!e.trim()}function Ji(e,t){var r=e.split(";").filter(Xi),n=r.shift(),i=Mp(n),o=i.name,a=i.value;t=t?Object.assign({},Zt,t):Zt;try{a=t.decodeValues?decodeURIComponent(a):a}catch(u){console.error("set-cookie-parser encountered an error while decoding a cookie with value '"+a+"'. Set options.decodeValues to false to disable this feature.",u)}var s={name:o,value:a};return r.forEach(function(u){var c=u.split("="),l=c.shift().trimLeft().toLowerCase(),f=c.join("=");l==="expires"?s.expires=new Date(f):l==="max-age"?s.maxAge=parseInt(f,10):l==="secure"?s.secure=!0:l==="httponly"?s.httpOnly=!0:l==="samesite"?s.sameSite=f:s[l]=f}),s}function Mp(e){var t="",r="",n=e.split("=");return n.length>1?(t=n.shift(),r=n.join("=")):r=e,{name:t,value:r}}function Eu(e,t){if(t=t?Object.assign({},Zt,t):Zt,!e)return t.map?{}:[];if(e.headers)if(typeof e.headers.getSetCookie=="function")e=e.headers.getSetCookie();else if(e.headers["set-cookie"])e=e.headers["set-cookie"];else{var r=e.headers[Object.keys(e.headers).find(function(i){return i.toLowerCase()==="set-cookie"})];!r&&e.headers.cookie&&!t.silent&&console.warn("Warning: set-cookie-parser appears to have been called on a request object. It is designed to parse Set-Cookie headers from responses, not Cookie headers from requests. Set the option {silent: true} to suppress this warning."),e=r}if(Array.isArray(e)||(e=[e]),t=t?Object.assign({},Zt,t):Zt,t.map){var n={};return e.filter(Xi).reduce(function(i,o){var a=Ji(o,t);return i[a.name]=a,i},n)}else return e.filter(Xi).map(function(i){return Ji(i,t)})}function Qp(e){if(Array.isArray(e))return e;if(typeof e!="string")return[];var t=[],r=0,n,i,o,a,s;function u(){for(;r<e.length&&/\s/.test(e.charAt(r));)r+=1;return r<e.length}function c(){return i=e.charAt(r),i!=="="&&i!==";"&&i!==","}for(;r<e.length;){for(n=r,s=!1;u();)if(i=e.charAt(r),i===","){for(o=r,r+=1,u(),a=r;r<e.length&&c();)r+=1;r<e.length&&e.charAt(r)==="="?(s=!0,r=a,t.push(e.substring(n,o)),n=r):r=o+1}else r+=1;(!s||r>=e.length)&&t.push(e.substring(n,e.length))}return t}Gr.exports=Eu;Gr.exports.parse=Eu;Gr.exports.parseString=Ji;Gr.exports.splitCookiesString=Qp;var Up=Gr.exports;(function(e){var t=K&&K.__rest||function(o,a){var s={};for(var u in o)Object.prototype.hasOwnProperty.call(o,u)&&a.indexOf(u)<0&&(s[u]=o[u]);if(o!=null&&typeof Object.getOwnPropertySymbols=="function")for(var c=0,u=Object.getOwnPropertySymbols(o);c<u.length;c++)a.indexOf(u[c])<0&&Object.prototype.propertyIsEnumerable.call(o,u[c])&&(s[u[c]]=o[u[c]]);return s};Object.defineProperty(e,"__esModule",{value:!0}),e.store=e.PERSISTENCY_KEY=void 0;const r=Up;e.PERSISTENCY_KEY="MSW_COOKIE_STORE";function n(){try{if(localStorage==null)return!1;const o=e.PERSISTENCY_KEY+"_test";return localStorage.setItem(o,"test"),localStorage.getItem(o),localStorage.removeItem(o),!0}catch{return!1}}class i{constructor(){this.store=new Map}add(a,s){if(a.credentials==="omit")return;const u=new URL(a.url),c=s.headers.get("set-cookie");if(!c)return;const l=Date.now(),f=r.parse(c).map(v=>{var{maxAge:w}=v,T=t(v,["maxAge"]);return Object.assign(Object.assign({},T),{expires:w===void 0?T.expires:new Date(l+w*1e3),maxAge:w})}),d=this.store.get(u.origin)||new Map;f.forEach(v=>{this.store.set(u.origin,d.set(v.name,v))})}get(a){this.deleteExpiredCookies();const s=new URL(a.url),u=this.store.get(s.origin)||new Map;switch(a.credentials){case"include":return typeof document>"u"||r.parse(document.cookie).forEach(l=>{u.set(l.name,l)}),u;case"same-origin":return u;default:return new Map}}getAll(){return this.deleteExpiredCookies(),this.store}deleteAll(a){const s=new URL(a.url);this.store.delete(s.origin)}clear(){this.store.clear()}hydrate(){if(!n())return;const a=localStorage.getItem(e.PERSISTENCY_KEY);if(a)try{JSON.parse(a).forEach(([u,c])=>{this.store.set(u,new Map(c.map(l=>{var[f,d]=l,{expires:v}=d,w=t(d,["expires"]);return[f,v===void 0?w:Object.assign(Object.assign({},w),{expires:new Date(v)})]})))})}catch(s){console.warn(`
[virtual-cookie] Failed to parse a stored cookie from the localStorage (key "${e.PERSISTENCY_KEY}").

Stored value:
${localStorage.getItem(e.PERSISTENCY_KEY)}

Thrown exception:
${s}

Invalid value has been removed from localStorage to prevent subsequent failed parsing attempts.`),localStorage.removeItem(e.PERSISTENCY_KEY)}}persist(){if(!n())return;const a=Array.from(this.store.entries()).map(([s,u])=>[s,Array.from(u.entries())]);localStorage.setItem(e.PERSISTENCY_KEY,JSON.stringify(a))}deleteExpiredCookies(){const a=Date.now();this.store.forEach((s,u)=>{s.forEach(({expires:c,name:l})=>{c!==void 0&&c.getTime()<=a&&s.delete(l)}),s.size===0&&this.store.delete(u)})}}e.store=new i})(yu);(function(e){var t=K&&K.__createBinding||(Object.create?function(n,i,o,a){a===void 0&&(a=o),Object.defineProperty(n,a,{enumerable:!0,get:function(){return i[o]}})}:function(n,i,o,a){a===void 0&&(a=o),n[a]=i[o]}),r=K&&K.__exportStar||function(n,i){for(var o in n)o!=="default"&&!Object.prototype.hasOwnProperty.call(i,o)&&t(i,n,o)};Object.defineProperty(e,"__esModule",{value:!0}),r(yu,e)})(Ao);var Fi,es;function jp(){return es||(es=1,Fi=function(){function e(t,r,n,i,o){return t<r||n<r?t>n?n+1:t+1:i===o?r:r+1}return function(t,r){if(t===r)return 0;if(t.length>r.length){var n=t;t=r,r=n}for(var i=t.length,o=r.length;i>0&&t.charCodeAt(i-1)===r.charCodeAt(o-1);)i--,o--;for(var a=0;a<i&&t.charCodeAt(a)===r.charCodeAt(a);)a++;if(i-=a,o-=a,i===0||o<3)return o;var s=0,u,c,l,f,d,v,w,T,A,b,B,C,E=[];for(u=0;u<i;u++)E.push(u+1),E.push(t.charCodeAt(a+u));for(var P=E.length-1;s<o-3;)for(A=r.charCodeAt(a+(c=s)),b=r.charCodeAt(a+(l=s+1)),B=r.charCodeAt(a+(f=s+2)),C=r.charCodeAt(a+(d=s+3)),v=s+=4,u=0;u<P;u+=2)w=E[u],T=E[u+1],c=e(w,c,l,A,T),l=e(c,l,f,b,T),f=e(l,f,d,B,T),v=e(f,d,v,C,T),E[u]=v,d=f,f=l,l=c,c=w;for(;s<o;)for(A=r.charCodeAt(a+(c=s)),v=++s,u=0;u<P;u+=2)w=E[u],E[u]=v=e(w,c,v,A,E[u+1]),c=w;return v}}()),Fi}const qp="16.6.0",Hp=Object.freeze({major:16,minor:6,patch:0,preReleaseTag:null});function ue(e,t){if(!!!e)throw new Error(t)}function qe(e){return typeof e?.then=="function"}function He(e){return typeof e=="object"&&e!==null}function Ie(e,t){if(!!!e)throw new Error(t??"Unexpected invariant triggered.")}const Vp=/\r\n|[\n\r]/g;function Dn(e,t){let r=0,n=1;for(const i of e.body.matchAll(Vp)){if(typeof i.index=="number"||Ie(!1),i.index>=t)break;r=i.index+i[0].length,n+=1}return{line:n,column:t+1-r}}function bu(e){return vo(e.source,Dn(e.source,e.start))}function vo(e,t){const r=e.locationOffset.column-1,n="".padStart(r)+e.body,i=t.line-1,o=e.locationOffset.line-1,a=t.line+o,s=t.line===1?r:0,u=t.column+s,c=`${e.name}:${a}:${u}
`,l=n.split(/\r\n|[\n\r]/g),f=l[i];if(f.length>120){const d=Math.floor(u/80),v=u%80,w=[];for(let T=0;T<f.length;T+=80)w.push(f.slice(T,T+80));return c+ts([[`${a} |`,w[0]],...w.slice(1,d+1).map(T=>["|",T]),["|","^".padStart(v)],["|",w[d+1]]])}return c+ts([[`${a-1} |`,l[i-1]],[`${a} |`,f],["|","^".padStart(u)],[`${a+1} |`,l[i+1]]])}function ts(e){const t=e.filter(([n,i])=>i!==void 0),r=Math.max(...t.map(([n])=>n.length));return t.map(([n,i])=>n.padStart(r)+(i?" "+i:"")).join(`
`)}function zp(e){const t=e[0];return t==null||"kind"in t||"length"in t?{nodes:t,source:e[1],positions:e[2],path:e[3],originalError:e[4],extensions:e[5]}:t}class x extends Error{constructor(t,...r){var n,i,o;const{nodes:a,source:s,positions:u,path:c,originalError:l,extensions:f}=zp(r);super(t),this.name="GraphQLError",this.path=c??void 0,this.originalError=l??void 0,this.nodes=rs(Array.isArray(a)?a:a?[a]:void 0);const d=rs((n=this.nodes)===null||n===void 0?void 0:n.map(w=>w.loc).filter(w=>w!=null));this.source=s??(d==null||(i=d[0])===null||i===void 0?void 0:i.source),this.positions=u??d?.map(w=>w.start),this.locations=u&&s?u.map(w=>Dn(s,w)):d?.map(w=>Dn(w.source,w.start));const v=He(l?.extensions)?l?.extensions:void 0;this.extensions=(o=f??v)!==null&&o!==void 0?o:Object.create(null),Object.defineProperties(this,{message:{writable:!0,enumerable:!0},name:{enumerable:!1},nodes:{enumerable:!1},source:{enumerable:!1},positions:{enumerable:!1},originalError:{enumerable:!1}}),l!=null&&l.stack?Object.defineProperty(this,"stack",{value:l.stack,writable:!0,configurable:!0}):Error.captureStackTrace?Error.captureStackTrace(this,x):Object.defineProperty(this,"stack",{value:Error().stack,writable:!0,configurable:!0})}get[Symbol.toStringTag](){return"GraphQLError"}toString(){let t=this.message;if(this.nodes)for(const r of this.nodes)r.loc&&(t+=`

`+bu(r.loc));else if(this.source&&this.locations)for(const r of this.locations)t+=`

`+vo(this.source,r);return t}toJSON(){const t={message:this.message};return this.locations!=null&&(t.locations=this.locations),this.path!=null&&(t.path=this.path),this.extensions!=null&&Object.keys(this.extensions).length>0&&(t.extensions=this.extensions),t}}function rs(e){return e===void 0||e.length===0?void 0:e}function Gp(e){return e.toString()}function Xp(e){return e.toJSON()}function Be(e,t,r){return new x(`Syntax Error: ${r}`,{source:e,positions:[t]})}class Du{constructor(t,r,n){this.start=t.start,this.end=r.end,this.startToken=t,this.endToken=r,this.source=n}get[Symbol.toStringTag](){return"Location"}toJSON(){return{start:this.start,end:this.end}}}class go{constructor(t,r,n,i,o,a){this.kind=t,this.start=r,this.end=n,this.line=i,this.column=o,this.value=a,this.prev=null,this.next=null}get[Symbol.toStringTag](){return"Token"}toJSON(){return{kind:this.kind,value:this.value,line:this.line,column:this.column}}}const Tu={Name:[],Document:["definitions"],OperationDefinition:["name","variableDefinitions","directives","selectionSet"],VariableDefinition:["variable","type","defaultValue","directives"],Variable:["name"],SelectionSet:["selections"],Field:["alias","name","arguments","directives","selectionSet"],Argument:["name","value"],FragmentSpread:["name","directives"],InlineFragment:["typeCondition","directives","selectionSet"],FragmentDefinition:["name","variableDefinitions","typeCondition","directives","selectionSet"],IntValue:[],FloatValue:[],StringValue:[],BooleanValue:[],NullValue:[],EnumValue:[],ListValue:["values"],ObjectValue:["fields"],ObjectField:["name","value"],Directive:["name","arguments"],NamedType:["name"],ListType:["type"],NonNullType:["type"],SchemaDefinition:["description","directives","operationTypes"],OperationTypeDefinition:["type"],ScalarTypeDefinition:["description","name","directives"],ObjectTypeDefinition:["description","name","interfaces","directives","fields"],FieldDefinition:["description","name","arguments","type","directives"],InputValueDefinition:["description","name","type","defaultValue","directives"],InterfaceTypeDefinition:["description","name","interfaces","directives","fields"],UnionTypeDefinition:["description","name","directives","types"],EnumTypeDefinition:["description","name","directives","values"],EnumValueDefinition:["description","name","directives"],InputObjectTypeDefinition:["description","name","directives","fields"],DirectiveDefinition:["description","name","arguments","locations"],SchemaExtension:["directives","operationTypes"],ScalarTypeExtension:["name","directives"],ObjectTypeExtension:["name","interfaces","directives","fields"],InterfaceTypeExtension:["name","interfaces","directives","fields"],UnionTypeExtension:["name","directives","types"],EnumTypeExtension:["name","directives","values"],InputObjectTypeExtension:["name","directives","fields"]},Jp=new Set(Object.keys(Tu));function Wi(e){const t=e?.kind;return typeof t=="string"&&Jp.has(t)}var Oe;(function(e){e.QUERY="query",e.MUTATION="mutation",e.SUBSCRIPTION="subscription"})(Oe||(Oe={}));var re;(function(e){e.QUERY="QUERY",e.MUTATION="MUTATION",e.SUBSCRIPTION="SUBSCRIPTION",e.FIELD="FIELD",e.FRAGMENT_DEFINITION="FRAGMENT_DEFINITION",e.FRAGMENT_SPREAD="FRAGMENT_SPREAD",e.INLINE_FRAGMENT="INLINE_FRAGMENT",e.VARIABLE_DEFINITION="VARIABLE_DEFINITION",e.SCHEMA="SCHEMA",e.SCALAR="SCALAR",e.OBJECT="OBJECT",e.FIELD_DEFINITION="FIELD_DEFINITION",e.ARGUMENT_DEFINITION="ARGUMENT_DEFINITION",e.INTERFACE="INTERFACE",e.UNION="UNION",e.ENUM="ENUM",e.ENUM_VALUE="ENUM_VALUE",e.INPUT_OBJECT="INPUT_OBJECT",e.INPUT_FIELD_DEFINITION="INPUT_FIELD_DEFINITION"})(re||(re={}));var y;(function(e){e.NAME="Name",e.DOCUMENT="Document",e.OPERATION_DEFINITION="OperationDefinition",e.VARIABLE_DEFINITION="VariableDefinition",e.SELECTION_SET="SelectionSet",e.FIELD="Field",e.ARGUMENT="Argument",e.FRAGMENT_SPREAD="FragmentSpread",e.INLINE_FRAGMENT="InlineFragment",e.FRAGMENT_DEFINITION="FragmentDefinition",e.VARIABLE="Variable",e.INT="IntValue",e.FLOAT="FloatValue",e.STRING="StringValue",e.BOOLEAN="BooleanValue",e.NULL="NullValue",e.ENUM="EnumValue",e.LIST="ListValue",e.OBJECT="ObjectValue",e.OBJECT_FIELD="ObjectField",e.DIRECTIVE="Directive",e.NAMED_TYPE="NamedType",e.LIST_TYPE="ListType",e.NON_NULL_TYPE="NonNullType",e.SCHEMA_DEFINITION="SchemaDefinition",e.OPERATION_TYPE_DEFINITION="OperationTypeDefinition",e.SCALAR_TYPE_DEFINITION="ScalarTypeDefinition",e.OBJECT_TYPE_DEFINITION="ObjectTypeDefinition",e.FIELD_DEFINITION="FieldDefinition",e.INPUT_VALUE_DEFINITION="InputValueDefinition",e.INTERFACE_TYPE_DEFINITION="InterfaceTypeDefinition",e.UNION_TYPE_DEFINITION="UnionTypeDefinition",e.ENUM_TYPE_DEFINITION="EnumTypeDefinition",e.ENUM_VALUE_DEFINITION="EnumValueDefinition",e.INPUT_OBJECT_TYPE_DEFINITION="InputObjectTypeDefinition",e.DIRECTIVE_DEFINITION="DirectiveDefinition",e.SCHEMA_EXTENSION="SchemaExtension",e.SCALAR_TYPE_EXTENSION="ScalarTypeExtension",e.OBJECT_TYPE_EXTENSION="ObjectTypeExtension",e.INTERFACE_TYPE_EXTENSION="InterfaceTypeExtension",e.UNION_TYPE_EXTENSION="UnionTypeExtension",e.ENUM_TYPE_EXTENSION="EnumTypeExtension",e.INPUT_OBJECT_TYPE_EXTENSION="InputObjectTypeExtension"})(y||(y={}));function Yi(e){return e===9||e===32}function xr(e){return e>=48&&e<=57}function wu(e){return e>=97&&e<=122||e>=65&&e<=90}function mo(e){return wu(e)||e===95}function Iu(e){return wu(e)||xr(e)||e===95}function Wp(e){var t;let r=Number.MAX_SAFE_INTEGER,n=null,i=-1;for(let a=0;a<e.length;++a){var o;const s=e[a],u=Yp(s);u!==s.length&&(n=(o=n)!==null&&o!==void 0?o:a,i=a,a!==0&&u<r&&(r=u))}return e.map((a,s)=>s===0?a:a.slice(r)).slice((t=n)!==null&&t!==void 0?t:0,i+1)}function Yp(e){let t=0;for(;t<e.length&&Yi(e.charCodeAt(t));)++t;return t}function Kp(e){if(e==="")return!0;let t=!0,r=!1,n=!0,i=!1;for(let o=0;o<e.length;++o)switch(e.codePointAt(o)){case 0:case 1:case 2:case 3:case 4:case 5:case 6:case 7:case 8:case 11:case 12:case 14:case 15:return!1;case 13:return!1;case 10:if(t&&!i)return!1;i=!0,t=!0,r=!1;break;case 9:case 32:r||(r=t);break;default:n&&(n=r),t=!1}return!(t||n&&i)}function Su(e,t){const r=e.replace(/"""/g,'\\"""'),n=r.split(/\r\n|[\n\r]/g),i=n.length===1,o=n.length>1&&n.slice(1).every(v=>v.length===0||Yi(v.charCodeAt(0))),a=r.endsWith('\\"""'),s=e.endsWith('"')&&!a,u=e.endsWith("\\"),c=s||u,l=!(t!=null&&t.minimize)&&(!i||e.length>70||c||o||a);let f="";const d=i&&Yi(e.charCodeAt(0));return(l&&!d||o)&&(f+=`
`),f+=r,(l||c)&&(f+=`
`),'"""'+f+'"""'}var F;(function(e){e.SOF="<SOF>",e.EOF="<EOF>",e.BANG="!",e.DOLLAR="$",e.AMP="&",e.PAREN_L="(",e.PAREN_R=")",e.SPREAD="...",e.COLON=":",e.EQUALS="=",e.AT="@",e.BRACKET_L="[",e.BRACKET_R="]",e.BRACE_L="{",e.PIPE="|",e.BRACE_R="}",e.NAME="Name",e.INT="Int",e.FLOAT="Float",e.STRING="String",e.BLOCK_STRING="BlockString",e.COMMENT="Comment"})(F||(F={}));class yo{constructor(t){const r=new go(F.SOF,0,0,0,0);this.source=t,this.lastToken=r,this.token=r,this.line=1,this.lineStart=0}get[Symbol.toStringTag](){return"Lexer"}advance(){return this.lastToken=this.token,this.token=this.lookahead()}lookahead(){let t=this.token;if(t.kind!==F.EOF)do if(t.next)t=t.next;else{const r=Zp(this,t.end);t.next=r,r.prev=t,t=r}while(t.kind===F.COMMENT);return t}}function Nu(e){return e===F.BANG||e===F.DOLLAR||e===F.AMP||e===F.PAREN_L||e===F.PAREN_R||e===F.SPREAD||e===F.COLON||e===F.EQUALS||e===F.AT||e===F.BRACKET_L||e===F.BRACKET_R||e===F.BRACE_L||e===F.PIPE||e===F.BRACE_R}function ur(e){return e>=0&&e<=55295||e>=57344&&e<=1114111}function Qn(e,t){return Cu(e.charCodeAt(t))&&Bu(e.charCodeAt(t+1))}function Cu(e){return e>=55296&&e<=56319}function Bu(e){return e>=56320&&e<=57343}function qt(e,t){const r=e.source.body.codePointAt(t);if(r===void 0)return F.EOF;if(r>=32&&r<=126){const n=String.fromCodePoint(r);return n==='"'?`'"'`:`"${n}"`}return"U+"+r.toString(16).toUpperCase().padStart(4,"0")}function Ne(e,t,r,n,i){const o=e.line,a=1+r-e.lineStart;return new go(t,r,n,o,a,i)}function Zp(e,t){const r=e.source.body,n=r.length;let i=t;for(;i<n;){const o=r.charCodeAt(i);switch(o){case 65279:case 9:case 32:case 44:++i;continue;case 10:++i,++e.line,e.lineStart=i;continue;case 13:r.charCodeAt(i+1)===10?i+=2:++i,++e.line,e.lineStart=i;continue;case 35:return _p(e,i);case 33:return Ne(e,F.BANG,i,i+1);case 36:return Ne(e,F.DOLLAR,i,i+1);case 38:return Ne(e,F.AMP,i,i+1);case 40:return Ne(e,F.PAREN_L,i,i+1);case 41:return Ne(e,F.PAREN_R,i,i+1);case 46:if(r.charCodeAt(i+1)===46&&r.charCodeAt(i+2)===46)return Ne(e,F.SPREAD,i,i+3);break;case 58:return Ne(e,F.COLON,i,i+1);case 61:return Ne(e,F.EQUALS,i,i+1);case 64:return Ne(e,F.AT,i,i+1);case 91:return Ne(e,F.BRACKET_L,i,i+1);case 93:return Ne(e,F.BRACKET_R,i,i+1);case 123:return Ne(e,F.BRACE_L,i,i+1);case 124:return Ne(e,F.PIPE,i,i+1);case 125:return Ne(e,F.BRACE_R,i,i+1);case 34:return r.charCodeAt(i+1)===34&&r.charCodeAt(i+2)===34?id(e,i):ed(e,i)}if(xr(o)||o===45)return $p(e,i,o);if(mo(o))return od(e,i);throw Be(e.source,i,o===39?`Unexpected single quote character ('), did you mean to use a double quote (")?`:ur(o)||Qn(r,i)?`Unexpected character: ${qt(e,i)}.`:`Invalid character: ${qt(e,i)}.`)}return Ne(e,F.EOF,n,n)}function _p(e,t){const r=e.source.body,n=r.length;let i=t+1;for(;i<n;){const o=r.charCodeAt(i);if(o===10||o===13)break;if(ur(o))++i;else if(Qn(r,i))i+=2;else break}return Ne(e,F.COMMENT,t,i,r.slice(t+1,i))}function $p(e,t,r){const n=e.source.body;let i=t,o=r,a=!1;if(o===45&&(o=n.charCodeAt(++i)),o===48){if(o=n.charCodeAt(++i),xr(o))throw Be(e.source,i,`Invalid number, unexpected digit after 0: ${qt(e,i)}.`)}else i=Mi(e,i,o),o=n.charCodeAt(i);if(o===46&&(a=!0,o=n.charCodeAt(++i),i=Mi(e,i,o),o=n.charCodeAt(i)),(o===69||o===101)&&(a=!0,o=n.charCodeAt(++i),(o===43||o===45)&&(o=n.charCodeAt(++i)),i=Mi(e,i,o),o=n.charCodeAt(i)),o===46||mo(o))throw Be(e.source,i,`Invalid number, expected digit but got: ${qt(e,i)}.`);return Ne(e,a?F.FLOAT:F.INT,t,i,n.slice(t,i))}function Mi(e,t,r){if(!xr(r))throw Be(e.source,t,`Invalid number, expected digit but got: ${qt(e,t)}.`);const n=e.source.body;let i=t+1;for(;xr(n.charCodeAt(i));)++i;return i}function ed(e,t){const r=e.source.body,n=r.length;let i=t+1,o=i,a="";for(;i<n;){const s=r.charCodeAt(i);if(s===34)return a+=r.slice(o,i),Ne(e,F.STRING,t,i+1,a);if(s===92){a+=r.slice(o,i);const u=r.charCodeAt(i+1)===117?r.charCodeAt(i+2)===123?td(e,i):rd(e,i):nd(e,i);a+=u.value,i+=u.size,o=i;continue}if(s===10||s===13)break;if(ur(s))++i;else if(Qn(r,i))i+=2;else throw Be(e.source,i,`Invalid character within String: ${qt(e,i)}.`)}throw Be(e.source,i,"Unterminated string.")}function td(e,t){const r=e.source.body;let n=0,i=3;for(;i<12;){const o=r.charCodeAt(t+i++);if(o===125){if(i<5||!ur(n))break;return{value:String.fromCodePoint(n),size:i}}if(n=n<<4|Or(o),n<0)break}throw Be(e.source,t,`Invalid Unicode escape sequence: "${r.slice(t,t+i)}".`)}function rd(e,t){const r=e.source.body,n=ns(r,t+2);if(ur(n))return{value:String.fromCodePoint(n),size:6};if(Cu(n)&&r.charCodeAt(t+6)===92&&r.charCodeAt(t+7)===117){const i=ns(r,t+8);if(Bu(i))return{value:String.fromCodePoint(n,i),size:12}}throw Be(e.source,t,`Invalid Unicode escape sequence: "${r.slice(t,t+6)}".`)}function ns(e,t){return Or(e.charCodeAt(t))<<12|Or(e.charCodeAt(t+1))<<8|Or(e.charCodeAt(t+2))<<4|Or(e.charCodeAt(t+3))}function Or(e){return e>=48&&e<=57?e-48:e>=65&&e<=70?e-55:e>=97&&e<=102?e-87:-1}function nd(e,t){const r=e.source.body;switch(r.charCodeAt(t+1)){case 34:return{value:'"',size:2};case 92:return{value:"\\",size:2};case 47:return{value:"/",size:2};case 98:return{value:"\b",size:2};case 102:return{value:"\f",size:2};case 110:return{value:`
`,size:2};case 114:return{value:"\r",size:2};case 116:return{value:"	",size:2}}throw Be(e.source,t,`Invalid character escape sequence: "${r.slice(t,t+2)}".`)}function id(e,t){const r=e.source.body,n=r.length;let i=e.lineStart,o=t+3,a=o,s="";const u=[];for(;o<n;){const c=r.charCodeAt(o);if(c===34&&r.charCodeAt(o+1)===34&&r.charCodeAt(o+2)===34){s+=r.slice(a,o),u.push(s);const l=Ne(e,F.BLOCK_STRING,t,o+3,Wp(u).join(`
`));return e.line+=u.length-1,e.lineStart=i,l}if(c===92&&r.charCodeAt(o+1)===34&&r.charCodeAt(o+2)===34&&r.charCodeAt(o+3)===34){s+=r.slice(a,o),a=o+1,o+=4;continue}if(c===10||c===13){s+=r.slice(a,o),u.push(s),c===13&&r.charCodeAt(o+1)===10?o+=2:++o,s="",a=o,i=o;continue}if(ur(c))++o;else if(Qn(r,o))o+=2;else throw Be(e.source,o,`Invalid character within String: ${qt(e,o)}.`)}throw Be(e.source,o,"Unterminated string.")}function od(e,t){const r=e.source.body,n=r.length;let i=t+1;for(;i<n;){const o=r.charCodeAt(i);if(Iu(o))++i;else break}return Ne(e,F.NAME,t,i,r.slice(t,i))}const ad=10,Ou=2;function M(e){return Un(e,[])}function Un(e,t){switch(typeof e){case"string":return JSON.stringify(e);case"function":return e.name?`[function ${e.name}]`:"[function]";case"object":return sd(e,t);default:return String(e)}}function sd(e,t){if(e===null)return"null";if(t.includes(e))return"[Circular]";const r=[...t,e];if(ud(e)){const n=e.toJSON();if(n!==e)return typeof n=="string"?n:Un(n,r)}else if(Array.isArray(e))return ld(e,r);return cd(e,r)}function ud(e){return typeof e.toJSON=="function"}function cd(e,t){const r=Object.entries(e);return r.length===0?"{}":t.length>Ou?"["+fd(e)+"]":"{ "+r.map(([i,o])=>i+": "+Un(o,t)).join(", ")+" }"}function ld(e,t){if(e.length===0)return"[]";if(t.length>Ou)return"[Array]";const r=Math.min(ad,e.length),n=e.length-r,i=[];for(let o=0;o<r;++o)i.push(Un(e[o],t));return n===1?i.push("... 1 more item"):n>1&&i.push(`... ${n} more items`),"["+i.join(", ")+"]"}function fd(e){const t=Object.prototype.toString.call(e).replace(/^\[object /,"").replace(/]$/,"");if(t==="Object"&&typeof e.constructor=="function"){const r=e.constructor.name;if(typeof r=="string"&&r!=="")return r}return t}const rt=function(t,r){return t instanceof r};class jn{constructor(t,r="GraphQL request",n={line:1,column:1}){typeof t=="string"||ue(!1,`Body must be a string. Received: ${M(t)}.`),this.body=t,this.name=r,this.locationOffset=n,this.locationOffset.line>0||ue(!1,"line in locationOffset is 1-indexed and must be positive."),this.locationOffset.column>0||ue(!1,"column in locationOffset is 1-indexed and must be positive.")}get[Symbol.toStringTag](){return"Source"}}function Pu(e){return rt(e,jn)}function qn(e,t){return new Hn(e,t).parseDocument()}function Ru(e,t){const r=new Hn(e,t);r.expectToken(F.SOF);const n=r.parseValueLiteral(!1);return r.expectToken(F.EOF),n}function pd(e,t){const r=new Hn(e,t);r.expectToken(F.SOF);const n=r.parseConstValueLiteral();return r.expectToken(F.EOF),n}function dd(e,t){const r=new Hn(e,t);r.expectToken(F.SOF);const n=r.parseTypeReference();return r.expectToken(F.EOF),n}class Hn{constructor(t,r={}){const n=Pu(t)?t:new jn(t);this._lexer=new yo(n),this._options=r,this._tokenCounter=0}parseName(){const t=this.expectToken(F.NAME);return this.node(t,{kind:y.NAME,value:t.value})}parseDocument(){return this.node(this._lexer.token,{kind:y.DOCUMENT,definitions:this.many(F.SOF,this.parseDefinition,F.EOF)})}parseDefinition(){if(this.peek(F.BRACE_L))return this.parseOperationDefinition();const t=this.peekDescription(),r=t?this._lexer.lookahead():this._lexer.token;if(r.kind===F.NAME){switch(r.value){case"schema":return this.parseSchemaDefinition();case"scalar":return this.parseScalarTypeDefinition();case"type":return this.parseObjectTypeDefinition();case"interface":return this.parseInterfaceTypeDefinition();case"union":return this.parseUnionTypeDefinition();case"enum":return this.parseEnumTypeDefinition();case"input":return this.parseInputObjectTypeDefinition();case"directive":return this.parseDirectiveDefinition()}if(t)throw Be(this._lexer.source,this._lexer.token.start,"Unexpected description, descriptions are supported only on type definitions.");switch(r.value){case"query":case"mutation":case"subscription":return this.parseOperationDefinition();case"fragment":return this.parseFragmentDefinition();case"extend":return this.parseTypeSystemExtension()}}throw this.unexpected(r)}parseOperationDefinition(){const t=this._lexer.token;if(this.peek(F.BRACE_L))return this.node(t,{kind:y.OPERATION_DEFINITION,operation:Oe.QUERY,name:void 0,variableDefinitions:[],directives:[],selectionSet:this.parseSelectionSet()});const r=this.parseOperationType();let n;return this.peek(F.NAME)&&(n=this.parseName()),this.node(t,{kind:y.OPERATION_DEFINITION,operation:r,name:n,variableDefinitions:this.parseVariableDefinitions(),directives:this.parseDirectives(!1),selectionSet:this.parseSelectionSet()})}parseOperationType(){const t=this.expectToken(F.NAME);switch(t.value){case"query":return Oe.QUERY;case"mutation":return Oe.MUTATION;case"subscription":return Oe.SUBSCRIPTION}throw this.unexpected(t)}parseVariableDefinitions(){return this.optionalMany(F.PAREN_L,this.parseVariableDefinition,F.PAREN_R)}parseVariableDefinition(){return this.node(this._lexer.token,{kind:y.VARIABLE_DEFINITION,variable:this.parseVariable(),type:(this.expectToken(F.COLON),this.parseTypeReference()),defaultValue:this.expectOptionalToken(F.EQUALS)?this.parseConstValueLiteral():void 0,directives:this.parseConstDirectives()})}parseVariable(){const t=this._lexer.token;return this.expectToken(F.DOLLAR),this.node(t,{kind:y.VARIABLE,name:this.parseName()})}parseSelectionSet(){return this.node(this._lexer.token,{kind:y.SELECTION_SET,selections:this.many(F.BRACE_L,this.parseSelection,F.BRACE_R)})}parseSelection(){return this.peek(F.SPREAD)?this.parseFragment():this.parseField()}parseField(){const t=this._lexer.token,r=this.parseName();let n,i;return this.expectOptionalToken(F.COLON)?(n=r,i=this.parseName()):i=r,this.node(t,{kind:y.FIELD,alias:n,name:i,arguments:this.parseArguments(!1),directives:this.parseDirectives(!1),selectionSet:this.peek(F.BRACE_L)?this.parseSelectionSet():void 0})}parseArguments(t){const r=t?this.parseConstArgument:this.parseArgument;return this.optionalMany(F.PAREN_L,r,F.PAREN_R)}parseArgument(t=!1){const r=this._lexer.token,n=this.parseName();return this.expectToken(F.COLON),this.node(r,{kind:y.ARGUMENT,name:n,value:this.parseValueLiteral(t)})}parseConstArgument(){return this.parseArgument(!0)}parseFragment(){const t=this._lexer.token;this.expectToken(F.SPREAD);const r=this.expectOptionalKeyword("on");return!r&&this.peek(F.NAME)?this.node(t,{kind:y.FRAGMENT_SPREAD,name:this.parseFragmentName(),directives:this.parseDirectives(!1)}):this.node(t,{kind:y.INLINE_FRAGMENT,typeCondition:r?this.parseNamedType():void 0,directives:this.parseDirectives(!1),selectionSet:this.parseSelectionSet()})}parseFragmentDefinition(){const t=this._lexer.token;return this.expectKeyword("fragment"),this._options.allowLegacyFragmentVariables===!0?this.node(t,{kind:y.FRAGMENT_DEFINITION,name:this.parseFragmentName(),variableDefinitions:this.parseVariableDefinitions(),typeCondition:(this.expectKeyword("on"),this.parseNamedType()),directives:this.parseDirectives(!1),selectionSet:this.parseSelectionSet()}):this.node(t,{kind:y.FRAGMENT_DEFINITION,name:this.parseFragmentName(),typeCondition:(this.expectKeyword("on"),this.parseNamedType()),directives:this.parseDirectives(!1),selectionSet:this.parseSelectionSet()})}parseFragmentName(){if(this._lexer.token.value==="on")throw this.unexpected();return this.parseName()}parseValueLiteral(t){const r=this._lexer.token;switch(r.kind){case F.BRACKET_L:return this.parseList(t);case F.BRACE_L:return this.parseObject(t);case F.INT:return this.advanceLexer(),this.node(r,{kind:y.INT,value:r.value});case F.FLOAT:return this.advanceLexer(),this.node(r,{kind:y.FLOAT,value:r.value});case F.STRING:case F.BLOCK_STRING:return this.parseStringLiteral();case F.NAME:switch(this.advanceLexer(),r.value){case"true":return this.node(r,{kind:y.BOOLEAN,value:!0});case"false":return this.node(r,{kind:y.BOOLEAN,value:!1});case"null":return this.node(r,{kind:y.NULL});default:return this.node(r,{kind:y.ENUM,value:r.value})}case F.DOLLAR:if(t)if(this.expectToken(F.DOLLAR),this._lexer.token.kind===F.NAME){const n=this._lexer.token.value;throw Be(this._lexer.source,r.start,`Unexpected variable "$${n}" in constant value.`)}else throw this.unexpected(r);return this.parseVariable();default:throw this.unexpected()}}parseConstValueLiteral(){return this.parseValueLiteral(!0)}parseStringLiteral(){const t=this._lexer.token;return this.advanceLexer(),this.node(t,{kind:y.STRING,value:t.value,block:t.kind===F.BLOCK_STRING})}parseList(t){const r=()=>this.parseValueLiteral(t);return this.node(this._lexer.token,{kind:y.LIST,values:this.any(F.BRACKET_L,r,F.BRACKET_R)})}parseObject(t){const r=()=>this.parseObjectField(t);return this.node(this._lexer.token,{kind:y.OBJECT,fields:this.any(F.BRACE_L,r,F.BRACE_R)})}parseObjectField(t){const r=this._lexer.token,n=this.parseName();return this.expectToken(F.COLON),this.node(r,{kind:y.OBJECT_FIELD,name:n,value:this.parseValueLiteral(t)})}parseDirectives(t){const r=[];for(;this.peek(F.AT);)r.push(this.parseDirective(t));return r}parseConstDirectives(){return this.parseDirectives(!0)}parseDirective(t){const r=this._lexer.token;return this.expectToken(F.AT),this.node(r,{kind:y.DIRECTIVE,name:this.parseName(),arguments:this.parseArguments(t)})}parseTypeReference(){const t=this._lexer.token;let r;if(this.expectOptionalToken(F.BRACKET_L)){const n=this.parseTypeReference();this.expectToken(F.BRACKET_R),r=this.node(t,{kind:y.LIST_TYPE,type:n})}else r=this.parseNamedType();return this.expectOptionalToken(F.BANG)?this.node(t,{kind:y.NON_NULL_TYPE,type:r}):r}parseNamedType(){return this.node(this._lexer.token,{kind:y.NAMED_TYPE,name:this.parseName()})}peekDescription(){return this.peek(F.STRING)||this.peek(F.BLOCK_STRING)}parseDescription(){if(this.peekDescription())return this.parseStringLiteral()}parseSchemaDefinition(){const t=this._lexer.token,r=this.parseDescription();this.expectKeyword("schema");const n=this.parseConstDirectives(),i=this.many(F.BRACE_L,this.parseOperationTypeDefinition,F.BRACE_R);return this.node(t,{kind:y.SCHEMA_DEFINITION,description:r,directives:n,operationTypes:i})}parseOperationTypeDefinition(){const t=this._lexer.token,r=this.parseOperationType();this.expectToken(F.COLON);const n=this.parseNamedType();return this.node(t,{kind:y.OPERATION_TYPE_DEFINITION,operation:r,type:n})}parseScalarTypeDefinition(){const t=this._lexer.token,r=this.parseDescription();this.expectKeyword("scalar");const n=this.parseName(),i=this.parseConstDirectives();return this.node(t,{kind:y.SCALAR_TYPE_DEFINITION,description:r,name:n,directives:i})}parseObjectTypeDefinition(){const t=this._lexer.token,r=this.parseDescription();this.expectKeyword("type");const n=this.parseName(),i=this.parseImplementsInterfaces(),o=this.parseConstDirectives(),a=this.parseFieldsDefinition();return this.node(t,{kind:y.OBJECT_TYPE_DEFINITION,description:r,name:n,interfaces:i,directives:o,fields:a})}parseImplementsInterfaces(){return this.expectOptionalKeyword("implements")?this.delimitedMany(F.AMP,this.parseNamedType):[]}parseFieldsDefinition(){return this.optionalMany(F.BRACE_L,this.parseFieldDefinition,F.BRACE_R)}parseFieldDefinition(){const t=this._lexer.token,r=this.parseDescription(),n=this.parseName(),i=this.parseArgumentDefs();this.expectToken(F.COLON);const o=this.parseTypeReference(),a=this.parseConstDirectives();return this.node(t,{kind:y.FIELD_DEFINITION,description:r,name:n,arguments:i,type:o,directives:a})}parseArgumentDefs(){return this.optionalMany(F.PAREN_L,this.parseInputValueDef,F.PAREN_R)}parseInputValueDef(){const t=this._lexer.token,r=this.parseDescription(),n=this.parseName();this.expectToken(F.COLON);const i=this.parseTypeReference();let o;this.expectOptionalToken(F.EQUALS)&&(o=this.parseConstValueLiteral());const a=this.parseConstDirectives();return this.node(t,{kind:y.INPUT_VALUE_DEFINITION,description:r,name:n,type:i,defaultValue:o,directives:a})}parseInterfaceTypeDefinition(){const t=this._lexer.token,r=this.parseDescription();this.expectKeyword("interface");const n=this.parseName(),i=this.parseImplementsInterfaces(),o=this.parseConstDirectives(),a=this.parseFieldsDefinition();return this.node(t,{kind:y.INTERFACE_TYPE_DEFINITION,description:r,name:n,interfaces:i,directives:o,fields:a})}parseUnionTypeDefinition(){const t=this._lexer.token,r=this.parseDescription();this.expectKeyword("union");const n=this.parseName(),i=this.parseConstDirectives(),o=this.parseUnionMemberTypes();return this.node(t,{kind:y.UNION_TYPE_DEFINITION,description:r,name:n,directives:i,types:o})}parseUnionMemberTypes(){return this.expectOptionalToken(F.EQUALS)?this.delimitedMany(F.PIPE,this.parseNamedType):[]}parseEnumTypeDefinition(){const t=this._lexer.token,r=this.parseDescription();this.expectKeyword("enum");const n=this.parseName(),i=this.parseConstDirectives(),o=this.parseEnumValuesDefinition();return this.node(t,{kind:y.ENUM_TYPE_DEFINITION,description:r,name:n,directives:i,values:o})}parseEnumValuesDefinition(){return this.optionalMany(F.BRACE_L,this.parseEnumValueDefinition,F.BRACE_R)}parseEnumValueDefinition(){const t=this._lexer.token,r=this.parseDescription(),n=this.parseEnumValueName(),i=this.parseConstDirectives();return this.node(t,{kind:y.ENUM_VALUE_DEFINITION,description:r,name:n,directives:i})}parseEnumValueName(){if(this._lexer.token.value==="true"||this._lexer.token.value==="false"||this._lexer.token.value==="null")throw Be(this._lexer.source,this._lexer.token.start,`${ln(this._lexer.token)} is reserved and cannot be used for an enum value.`);return this.parseName()}parseInputObjectTypeDefinition(){const t=this._lexer.token,r=this.parseDescription();this.expectKeyword("input");const n=this.parseName(),i=this.parseConstDirectives(),o=this.parseInputFieldsDefinition();return this.node(t,{kind:y.INPUT_OBJECT_TYPE_DEFINITION,description:r,name:n,directives:i,fields:o})}parseInputFieldsDefinition(){return this.optionalMany(F.BRACE_L,this.parseInputValueDef,F.BRACE_R)}parseTypeSystemExtension(){const t=this._lexer.lookahead();if(t.kind===F.NAME)switch(t.value){case"schema":return this.parseSchemaExtension();case"scalar":return this.parseScalarTypeExtension();case"type":return this.parseObjectTypeExtension();case"interface":return this.parseInterfaceTypeExtension();case"union":return this.parseUnionTypeExtension();case"enum":return this.parseEnumTypeExtension();case"input":return this.parseInputObjectTypeExtension()}throw this.unexpected(t)}parseSchemaExtension(){const t=this._lexer.token;this.expectKeyword("extend"),this.expectKeyword("schema");const r=this.parseConstDirectives(),n=this.optionalMany(F.BRACE_L,this.parseOperationTypeDefinition,F.BRACE_R);if(r.length===0&&n.length===0)throw this.unexpected();return this.node(t,{kind:y.SCHEMA_EXTENSION,directives:r,operationTypes:n})}parseScalarTypeExtension(){const t=this._lexer.token;this.expectKeyword("extend"),this.expectKeyword("scalar");const r=this.parseName(),n=this.parseConstDirectives();if(n.length===0)throw this.unexpected();return this.node(t,{kind:y.SCALAR_TYPE_EXTENSION,name:r,directives:n})}parseObjectTypeExtension(){const t=this._lexer.token;this.expectKeyword("extend"),this.expectKeyword("type");const r=this.parseName(),n=this.parseImplementsInterfaces(),i=this.parseConstDirectives(),o=this.parseFieldsDefinition();if(n.length===0&&i.length===0&&o.length===0)throw this.unexpected();return this.node(t,{kind:y.OBJECT_TYPE_EXTENSION,name:r,interfaces:n,directives:i,fields:o})}parseInterfaceTypeExtension(){const t=this._lexer.token;this.expectKeyword("extend"),this.expectKeyword("interface");const r=this.parseName(),n=this.parseImplementsInterfaces(),i=this.parseConstDirectives(),o=this.parseFieldsDefinition();if(n.length===0&&i.length===0&&o.length===0)throw this.unexpected();return this.node(t,{kind:y.INTERFACE_TYPE_EXTENSION,name:r,interfaces:n,directives:i,fields:o})}parseUnionTypeExtension(){const t=this._lexer.token;this.expectKeyword("extend"),this.expectKeyword("union");const r=this.parseName(),n=this.parseConstDirectives(),i=this.parseUnionMemberTypes();if(n.length===0&&i.length===0)throw this.unexpected();return this.node(t,{kind:y.UNION_TYPE_EXTENSION,name:r,directives:n,types:i})}parseEnumTypeExtension(){const t=this._lexer.token;this.expectKeyword("extend"),this.expectKeyword("enum");const r=this.parseName(),n=this.parseConstDirectives(),i=this.parseEnumValuesDefinition();if(n.length===0&&i.length===0)throw this.unexpected();return this.node(t,{kind:y.ENUM_TYPE_EXTENSION,name:r,directives:n,values:i})}parseInputObjectTypeExtension(){const t=this._lexer.token;this.expectKeyword("extend"),this.expectKeyword("input");const r=this.parseName(),n=this.parseConstDirectives(),i=this.parseInputFieldsDefinition();if(n.length===0&&i.length===0)throw this.unexpected();return this.node(t,{kind:y.INPUT_OBJECT_TYPE_EXTENSION,name:r,directives:n,fields:i})}parseDirectiveDefinition(){const t=this._lexer.token,r=this.parseDescription();this.expectKeyword("directive"),this.expectToken(F.AT);const n=this.parseName(),i=this.parseArgumentDefs(),o=this.expectOptionalKeyword("repeatable");this.expectKeyword("on");const a=this.parseDirectiveLocations();return this.node(t,{kind:y.DIRECTIVE_DEFINITION,description:r,name:n,arguments:i,repeatable:o,locations:a})}parseDirectiveLocations(){return this.delimitedMany(F.PIPE,this.parseDirectiveLocation)}parseDirectiveLocation(){const t=this._lexer.token,r=this.parseName();if(Object.prototype.hasOwnProperty.call(re,r.value))return r;throw this.unexpected(t)}node(t,r){return this._options.noLocation!==!0&&(r.loc=new Du(t,this._lexer.lastToken,this._lexer.source)),r}peek(t){return this._lexer.token.kind===t}expectToken(t){const r=this._lexer.token;if(r.kind===t)return this.advanceLexer(),r;throw Be(this._lexer.source,r.start,`Expected ${ku(t)}, found ${ln(r)}.`)}expectOptionalToken(t){return this._lexer.token.kind===t?(this.advanceLexer(),!0):!1}expectKeyword(t){const r=this._lexer.token;if(r.kind===F.NAME&&r.value===t)this.advanceLexer();else throw Be(this._lexer.source,r.start,`Expected "${t}", found ${ln(r)}.`)}expectOptionalKeyword(t){const r=this._lexer.token;return r.kind===F.NAME&&r.value===t?(this.advanceLexer(),!0):!1}unexpected(t){const r=t??this._lexer.token;return Be(this._lexer.source,r.start,`Unexpected ${ln(r)}.`)}any(t,r,n){this.expectToken(t);const i=[];for(;!this.expectOptionalToken(n);)i.push(r.call(this));return i}optionalMany(t,r,n){if(this.expectOptionalToken(t)){const i=[];do i.push(r.call(this));while(!this.expectOptionalToken(n));return i}return[]}many(t,r,n){this.expectToken(t);const i=[];do i.push(r.call(this));while(!this.expectOptionalToken(n));return i}delimitedMany(t,r){this.expectOptionalToken(t);const n=[];do n.push(r.call(this));while(this.expectOptionalToken(t));return n}advanceLexer(){const{maxTokens:t}=this._options,r=this._lexer.advance();if(t!==void 0&&r.kind!==F.EOF&&(++this._tokenCounter,this._tokenCounter>t))throw Be(this._lexer.source,r.start,`Document contains more that ${t} tokens. Parsing aborted.`)}}function ln(e){const t=e.value;return ku(e.kind)+(t!=null?` "${t}"`:"")}function ku(e){return Nu(e)?`"${e}"`:e}const hd=5;function ht(e,t){const[r,n]=t?[e,t]:[void 0,e];let i=" Did you mean ";r&&(i+=r+" ");const o=n.map(u=>`"${u}"`);switch(o.length){case 0:return"";case 1:return i+o[0]+"?";case 2:return i+o[0]+" or "+o[1]+"?"}const a=o.slice(0,hd),s=a.pop();return i+a.join(", ")+", or "+s+"?"}function is(e){return e}function At(e,t){const r=Object.create(null);for(const n of e)r[t(n)]=n;return r}function bt(e,t,r){const n=Object.create(null);for(const i of e)n[t(i)]=r(i);return n}function dt(e,t){const r=Object.create(null);for(const n of Object.keys(e))r[n]=t(e[n],n);return r}function Xr(e,t){let r=0,n=0;for(;r<e.length&&n<t.length;){let i=e.charCodeAt(r),o=t.charCodeAt(n);if(fn(i)&&fn(o)){let a=0;do++r,a=a*10+i-Ki,i=e.charCodeAt(r);while(fn(i)&&a>0);let s=0;do++n,s=s*10+o-Ki,o=t.charCodeAt(n);while(fn(o)&&s>0);if(a<s)return-1;if(a>s)return 1}else{if(i<o)return-1;if(i>o)return 1;++r,++n}}return e.length-t.length}const Ki=48,Ad=57;function fn(e){return!isNaN(e)&&Ki<=e&&e<=Ad}function Nt(e,t){const r=Object.create(null),n=new vd(e),i=Math.floor(e.length*.4)+1;for(const o of t){const a=n.measure(o,i);a!==void 0&&(r[o]=a)}return Object.keys(r).sort((o,a)=>{const s=r[o]-r[a];return s!==0?s:Xr(o,a)})}class vd{constructor(t){this._input=t,this._inputLowerCase=t.toLowerCase(),this._inputArray=os(this._inputLowerCase),this._rows=[new Array(t.length+1).fill(0),new Array(t.length+1).fill(0),new Array(t.length+1).fill(0)]}measure(t,r){if(this._input===t)return 0;const n=t.toLowerCase();if(this._inputLowerCase===n)return 1;let i=os(n),o=this._inputArray;if(i.length<o.length){const l=i;i=o,o=l}const a=i.length,s=o.length;if(a-s>r)return;const u=this._rows;for(let l=0;l<=s;l++)u[0][l]=l;for(let l=1;l<=a;l++){const f=u[(l-1)%3],d=u[l%3];let v=d[0]=l;for(let w=1;w<=s;w++){const T=i[l-1]===o[w-1]?0:1;let A=Math.min(f[w]+1,d[w-1]+1,f[w-1]+T);if(l>1&&w>1&&i[l-1]===o[w-2]&&i[l-2]===o[w-1]){const b=u[(l-2)%3][w-2];A=Math.min(A,b+1)}A<v&&(v=A),d[w]=A}if(v>r)return}const c=u[a%3][s];return c<=r?c:void 0}}function os(e){const t=e.length,r=new Array(t);for(let n=0;n<t;++n)r[n]=e.charCodeAt(n);return r}function Ye(e){if(e==null)return Object.create(null);if(Object.getPrototypeOf(e)===null)return e;const t=Object.create(null);for(const[r,n]of Object.entries(e))t[r]=n;return t}function gd(e){return`"${e.replace(md,yd)}"`}const md=/[\x00-\x1f\x22\x5c\x7f-\x9f]/g;function yd(e){return Ed[e.charCodeAt(0)]}const Ed=["\\u0000","\\u0001","\\u0002","\\u0003","\\u0004","\\u0005","\\u0006","\\u0007","\\b","\\t","\\n","\\u000B","\\f","\\r","\\u000E","\\u000F","\\u0010","\\u0011","\\u0012","\\u0013","\\u0014","\\u0015","\\u0016","\\u0017","\\u0018","\\u0019","\\u001A","\\u001B","\\u001C","\\u001D","\\u001E","\\u001F","","",'\\"',"","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","\\\\","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","\\u007F","\\u0080","\\u0081","\\u0082","\\u0083","\\u0084","\\u0085","\\u0086","\\u0087","\\u0088","\\u0089","\\u008A","\\u008B","\\u008C","\\u008D","\\u008E","\\u008F","\\u0090","\\u0091","\\u0092","\\u0093","\\u0094","\\u0095","\\u0096","\\u0097","\\u0098","\\u0099","\\u009A","\\u009B","\\u009C","\\u009D","\\u009E","\\u009F"],_t=Object.freeze({});function cr(e,t,r=Tu){const n=new Map;for(const b of Object.values(y))n.set(b,er(t,b));let i,o=Array.isArray(e),a=[e],s=-1,u=[],c=e,l,f;const d=[],v=[];do{s++;const b=s===a.length,B=b&&u.length!==0;if(b){if(l=v.length===0?void 0:d[d.length-1],c=f,f=v.pop(),B)if(o){c=c.slice();let E=0;for(const[P,N]of u){const q=P-E;N===null?(c.splice(q,1),E++):c[q]=N}}else{c=Object.defineProperties({},Object.getOwnPropertyDescriptors(c));for(const[E,P]of u)c[E]=P}s=i.index,a=i.keys,u=i.edits,o=i.inArray,i=i.prev}else if(f){if(l=o?s:a[s],c=f[l],c==null)continue;d.push(l)}let C;if(!Array.isArray(c)){var w,T;Wi(c)||ue(!1,`Invalid AST Node: ${M(c)}.`);const E=b?(w=n.get(c.kind))===null||w===void 0?void 0:w.leave:(T=n.get(c.kind))===null||T===void 0?void 0:T.enter;if(C=E?.call(t,c,l,f,d,v),C===_t)break;if(C===!1){if(!b){d.pop();continue}}else if(C!==void 0&&(u.push([l,C]),!b))if(Wi(C))c=C;else{d.pop();continue}}if(C===void 0&&B&&u.push([l,c]),b)d.pop();else{var A;i={inArray:o,index:s,keys:a,edits:u,prev:i},o=Array.isArray(c),a=o?c:(A=r[c.kind])!==null&&A!==void 0?A:[],s=-1,u=[],f&&v.push(f),f=c}}while(i!==void 0);return u.length!==0?u[u.length-1][1]:e}function Eo(e){const t=new Array(e.length).fill(null),r=Object.create(null);for(const n of Object.values(y)){let i=!1;const o=new Array(e.length).fill(void 0),a=new Array(e.length).fill(void 0);for(let u=0;u<e.length;++u){const{enter:c,leave:l}=er(e[u],n);i||(i=c!=null||l!=null),o[u]=c,a[u]=l}if(!i)continue;const s={enter(...u){const c=u[0];for(let f=0;f<e.length;f++)if(t[f]===null){var l;const d=(l=o[f])===null||l===void 0?void 0:l.apply(e[f],u);if(d===!1)t[f]=c;else if(d===_t)t[f]=_t;else if(d!==void 0)return d}},leave(...u){const c=u[0];for(let f=0;f<e.length;f++)if(t[f]===null){var l;const d=(l=a[f])===null||l===void 0?void 0:l.apply(e[f],u);if(d===_t)t[f]=_t;else if(d!==void 0&&d!==!1)return d}else t[f]===c&&(t[f]=null)}};r[n]=s}return r}function er(e,t){const r=e[t];return typeof r=="object"?r:typeof r=="function"?{enter:r,leave:void 0}:{enter:e.enter,leave:e.leave}}function bd(e,t,r){const{enter:n,leave:i}=er(e,t);return r?i:n}function ye(e){return cr(e,Td)}const Dd=80,Td={Name:{leave:e=>e.value},Variable:{leave:e=>"$"+e.name},Document:{leave:e=>ee(e.definitions,`

`)},OperationDefinition:{leave(e){const t=le("(",ee(e.variableDefinitions,", "),")"),r=ee([e.operation,ee([e.name,t]),ee(e.directives," ")]," ");return(r==="query"?"":r+" ")+e.selectionSet}},VariableDefinition:{leave:({variable:e,type:t,defaultValue:r,directives:n})=>e+": "+t+le(" = ",r)+le(" ",ee(n," "))},SelectionSet:{leave:({selections:e})=>_e(e)},Field:{leave({alias:e,name:t,arguments:r,directives:n,selectionSet:i}){const o=le("",e,": ")+t;let a=o+le("(",ee(r,", "),")");return a.length>Dd&&(a=o+le(`(
`,mn(ee(r,`
`)),`
)`)),ee([a,ee(n," "),i]," ")}},Argument:{leave:({name:e,value:t})=>e+": "+t},FragmentSpread:{leave:({name:e,directives:t})=>"..."+e+le(" ",ee(t," "))},InlineFragment:{leave:({typeCondition:e,directives:t,selectionSet:r})=>ee(["...",le("on ",e),ee(t," "),r]," ")},FragmentDefinition:{leave:({name:e,typeCondition:t,variableDefinitions:r,directives:n,selectionSet:i})=>`fragment ${e}${le("(",ee(r,", "),")")} on ${t} ${le("",ee(n," ")," ")}`+i},IntValue:{leave:({value:e})=>e},FloatValue:{leave:({value:e})=>e},StringValue:{leave:({value:e,block:t})=>t?Su(e):gd(e)},BooleanValue:{leave:({value:e})=>e?"true":"false"},NullValue:{leave:()=>"null"},EnumValue:{leave:({value:e})=>e},ListValue:{leave:({values:e})=>"["+ee(e,", ")+"]"},ObjectValue:{leave:({fields:e})=>"{"+ee(e,", ")+"}"},ObjectField:{leave:({name:e,value:t})=>e+": "+t},Directive:{leave:({name:e,arguments:t})=>"@"+e+le("(",ee(t,", "),")")},NamedType:{leave:({name:e})=>e},ListType:{leave:({type:e})=>"["+e+"]"},NonNullType:{leave:({type:e})=>e+"!"},SchemaDefinition:{leave:({description:e,directives:t,operationTypes:r})=>le("",e,`
`)+ee(["schema",ee(t," "),_e(r)]," ")},OperationTypeDefinition:{leave:({operation:e,type:t})=>e+": "+t},ScalarTypeDefinition:{leave:({description:e,name:t,directives:r})=>le("",e,`
`)+ee(["scalar",t,ee(r," ")]," ")},ObjectTypeDefinition:{leave:({description:e,name:t,interfaces:r,directives:n,fields:i})=>le("",e,`
`)+ee(["type",t,le("implements ",ee(r," & ")),ee(n," "),_e(i)]," ")},FieldDefinition:{leave:({description:e,name:t,arguments:r,type:n,directives:i})=>le("",e,`
`)+t+(as(r)?le(`(
`,mn(ee(r,`
`)),`
)`):le("(",ee(r,", "),")"))+": "+n+le(" ",ee(i," "))},InputValueDefinition:{leave:({description:e,name:t,type:r,defaultValue:n,directives:i})=>le("",e,`
`)+ee([t+": "+r,le("= ",n),ee(i," ")]," ")},InterfaceTypeDefinition:{leave:({description:e,name:t,interfaces:r,directives:n,fields:i})=>le("",e,`
`)+ee(["interface",t,le("implements ",ee(r," & ")),ee(n," "),_e(i)]," ")},UnionTypeDefinition:{leave:({description:e,name:t,directives:r,types:n})=>le("",e,`
`)+ee(["union",t,ee(r," "),le("= ",ee(n," | "))]," ")},EnumTypeDefinition:{leave:({description:e,name:t,directives:r,values:n})=>le("",e,`
`)+ee(["enum",t,ee(r," "),_e(n)]," ")},EnumValueDefinition:{leave:({description:e,name:t,directives:r})=>le("",e,`
`)+ee([t,ee(r," ")]," ")},InputObjectTypeDefinition:{leave:({description:e,name:t,directives:r,fields:n})=>le("",e,`
`)+ee(["input",t,ee(r," "),_e(n)]," ")},DirectiveDefinition:{leave:({description:e,name:t,arguments:r,repeatable:n,locations:i})=>le("",e,`
`)+"directive @"+t+(as(r)?le(`(
`,mn(ee(r,`
`)),`
)`):le("(",ee(r,", "),")"))+(n?" repeatable":"")+" on "+ee(i," | ")},SchemaExtension:{leave:({directives:e,operationTypes:t})=>ee(["extend schema",ee(e," "),_e(t)]," ")},ScalarTypeExtension:{leave:({name:e,directives:t})=>ee(["extend scalar",e,ee(t," ")]," ")},ObjectTypeExtension:{leave:({name:e,interfaces:t,directives:r,fields:n})=>ee(["extend type",e,le("implements ",ee(t," & ")),ee(r," "),_e(n)]," ")},InterfaceTypeExtension:{leave:({name:e,interfaces:t,directives:r,fields:n})=>ee(["extend interface",e,le("implements ",ee(t," & ")),ee(r," "),_e(n)]," ")},UnionTypeExtension:{leave:({name:e,directives:t,types:r})=>ee(["extend union",e,ee(t," "),le("= ",ee(r," | "))]," ")},EnumTypeExtension:{leave:({name:e,directives:t,values:r})=>ee(["extend enum",e,ee(t," "),_e(r)]," ")},InputObjectTypeExtension:{leave:({name:e,directives:t,fields:r})=>ee(["extend input",e,ee(t," "),_e(r)]," ")}};function ee(e,t=""){var r;return(r=e?.filter(n=>n).join(t))!==null&&r!==void 0?r:""}function _e(e){return le(`{
`,mn(ee(e,`
`)),`
}`)}function le(e,t,r=""){return t!=null&&t!==""?e+t+r:""}function mn(e){return le("  ",e.replace(/\n/g,`
  `))}function as(e){var t;return(t=e?.some(r=>r.includes(`
`)))!==null&&t!==void 0?t:!1}function Tn(e,t){switch(e.kind){case y.NULL:return null;case y.INT:return parseInt(e.value,10);case y.FLOAT:return parseFloat(e.value);case y.STRING:case y.ENUM:case y.BOOLEAN:return e.value;case y.LIST:return e.values.map(r=>Tn(r,t));case y.OBJECT:return bt(e.fields,r=>r.name.value,r=>Tn(r.value,t));case y.VARIABLE:return t?.[e.name.value]}}function Ve(e){if(e!=null||ue(!1,"Must provide name."),typeof e=="string"||ue(!1,"Expected name to be a string."),e.length===0)throw new x("Expected name to be a non-empty string.");for(let t=1;t<e.length;++t)if(!Iu(e.charCodeAt(t)))throw new x(`Names must only contain [_a-zA-Z0-9] but "${e}" does not.`);if(!mo(e.charCodeAt(0)))throw new x(`Names must start with [_a-zA-Z] but "${e}" does not.`);return e}function Lu(e){if(e==="true"||e==="false"||e==="null")throw new x(`Enum values cannot be named: ${e}`);return Ve(e)}function Jr(e){return ze(e)||fe(e)||Ae(e)||Pe(e)||Ce(e)||be(e)||Ee(e)||oe(e)}function wd(e){if(!Jr(e))throw new Error(`Expected ${M(e)} to be a GraphQL type.`);return e}function ze(e){return rt(e,ut)}function Id(e){if(!ze(e))throw new Error(`Expected ${M(e)} to be a GraphQL Scalar type.`);return e}function fe(e){return rt(e,Xe)}function xu(e){if(!fe(e))throw new Error(`Expected ${M(e)} to be a GraphQL Object type.`);return e}function Ae(e){return rt(e,tr)}function Fu(e){if(!Ae(e))throw new Error(`Expected ${M(e)} to be a GraphQL Interface type.`);return e}function Pe(e){return rt(e,rr)}function Sd(e){if(!Pe(e))throw new Error(`Expected ${M(e)} to be a GraphQL Union type.`);return e}function Ce(e){return rt(e,It)}function Nd(e){if(!Ce(e))throw new Error(`Expected ${M(e)} to be a GraphQL Enum type.`);return e}function be(e){return rt(e,nr)}function Cd(e){if(!be(e))throw new Error(`Expected ${M(e)} to be a GraphQL Input Object type.`);return e}function Ee(e){return rt(e,ke)}function Bd(e){if(!Ee(e))throw new Error(`Expected ${M(e)} to be a GraphQL List type.`);return e}function oe(e){return rt(e,se)}function Od(e){if(!oe(e))throw new Error(`Expected ${M(e)} to be a GraphQL Non-Null type.`);return e}function Me(e){return ze(e)||Ce(e)||be(e)||Wr(e)&&Me(e.ofType)}function Pd(e){if(!Me(e))throw new Error(`Expected ${M(e)} to be a GraphQL input type.`);return e}function Tt(e){return ze(e)||fe(e)||Ae(e)||Pe(e)||Ce(e)||Wr(e)&&Tt(e.ofType)}function Rd(e){if(!Tt(e))throw new Error(`Expected ${M(e)} to be a GraphQL output type.`);return e}function at(e){return ze(e)||Ce(e)}function kd(e){if(!at(e))throw new Error(`Expected ${M(e)} to be a GraphQL leaf type.`);return e}function st(e){return fe(e)||Ae(e)||Pe(e)}function Ld(e){if(!st(e))throw new Error(`Expected ${M(e)} to be a GraphQL composite type.`);return e}function ot(e){return Ae(e)||Pe(e)}function xd(e){if(!ot(e))throw new Error(`Expected ${M(e)} to be a GraphQL abstract type.`);return e}class ke{constructor(t){Jr(t)||ue(!1,`Expected ${M(t)} to be a GraphQL type.`),this.ofType=t}get[Symbol.toStringTag](){return"GraphQLList"}toString(){return"["+String(this.ofType)+"]"}toJSON(){return this.toString()}}class se{constructor(t){bo(t)||ue(!1,`Expected ${M(t)} to be a GraphQL nullable type.`),this.ofType=t}get[Symbol.toStringTag](){return"GraphQLNonNull"}toString(){return String(this.ofType)+"!"}toJSON(){return this.toString()}}function Wr(e){return Ee(e)||oe(e)}function Fd(e){if(!Wr(e))throw new Error(`Expected ${M(e)} to be a GraphQL wrapping type.`);return e}function bo(e){return Jr(e)&&!oe(e)}function Mu(e){if(!bo(e))throw new Error(`Expected ${M(e)} to be a GraphQL nullable type.`);return e}function Do(e){if(e)return oe(e)?e.ofType:e}function Yr(e){return ze(e)||fe(e)||Ae(e)||Pe(e)||Ce(e)||be(e)}function Md(e){if(!Yr(e))throw new Error(`Expected ${M(e)} to be a GraphQL named type.`);return e}function xe(e){if(e){let t=e;for(;Wr(t);)t=t.ofType;return t}}function To(e){return typeof e=="function"?e():e}function wo(e){return typeof e=="function"?e():e}class ut{constructor(t){var r,n,i,o;const a=(r=t.parseValue)!==null&&r!==void 0?r:is;this.name=Ve(t.name),this.description=t.description,this.specifiedByURL=t.specifiedByURL,this.serialize=(n=t.serialize)!==null&&n!==void 0?n:is,this.parseValue=a,this.parseLiteral=(i=t.parseLiteral)!==null&&i!==void 0?i:(s,u)=>a(Tn(s,u)),this.extensions=Ye(t.extensions),this.astNode=t.astNode,this.extensionASTNodes=(o=t.extensionASTNodes)!==null&&o!==void 0?o:[],t.specifiedByURL==null||typeof t.specifiedByURL=="string"||ue(!1,`${this.name} must provide "specifiedByURL" as a string, but got: ${M(t.specifiedByURL)}.`),t.serialize==null||typeof t.serialize=="function"||ue(!1,`${this.name} must provide "serialize" function. If this custom Scalar is also used as an input type, ensure "parseValue" and "parseLiteral" functions are also provided.`),t.parseLiteral&&(typeof t.parseValue=="function"&&typeof t.parseLiteral=="function"||ue(!1,`${this.name} must provide both "parseValue" and "parseLiteral" functions.`))}get[Symbol.toStringTag](){return"GraphQLScalarType"}toConfig(){return{name:this.name,description:this.description,specifiedByURL:this.specifiedByURL,serialize:this.serialize,parseValue:this.parseValue,parseLiteral:this.parseLiteral,extensions:this.extensions,astNode:this.astNode,extensionASTNodes:this.extensionASTNodes}}toString(){return this.name}toJSON(){return this.toString()}}class Xe{constructor(t){var r;this.name=Ve(t.name),this.description=t.description,this.isTypeOf=t.isTypeOf,this.extensions=Ye(t.extensions),this.astNode=t.astNode,this.extensionASTNodes=(r=t.extensionASTNodes)!==null&&r!==void 0?r:[],this._fields=()=>Uu(t),this._interfaces=()=>Qu(t),t.isTypeOf==null||typeof t.isTypeOf=="function"||ue(!1,`${this.name} must provide "isTypeOf" as a function, but got: ${M(t.isTypeOf)}.`)}get[Symbol.toStringTag](){return"GraphQLObjectType"}getFields(){return typeof this._fields=="function"&&(this._fields=this._fields()),this._fields}getInterfaces(){return typeof this._interfaces=="function"&&(this._interfaces=this._interfaces()),this._interfaces}toConfig(){return{name:this.name,description:this.description,interfaces:this.getInterfaces(),fields:qu(this.getFields()),isTypeOf:this.isTypeOf,extensions:this.extensions,astNode:this.astNode,extensionASTNodes:this.extensionASTNodes}}toString(){return this.name}toJSON(){return this.toString()}}function Qu(e){var t;const r=To((t=e.interfaces)!==null&&t!==void 0?t:[]);return Array.isArray(r)||ue(!1,`${e.name} interfaces must be an Array or a function which returns an Array.`),r}function Uu(e){const t=wo(e.fields);return $t(t)||ue(!1,`${e.name} fields must be an object with field names as keys or a function which returns such an object.`),dt(t,(r,n)=>{var i;$t(r)||ue(!1,`${e.name}.${n} field config must be an object.`),r.resolve==null||typeof r.resolve=="function"||ue(!1,`${e.name}.${n} field resolver must be a function if provided, but got: ${M(r.resolve)}.`);const o=(i=r.args)!==null&&i!==void 0?i:{};return $t(o)||ue(!1,`${e.name}.${n} args must be an object with argument names as keys.`),{name:Ve(n),description:r.description,type:r.type,args:ju(o),resolve:r.resolve,subscribe:r.subscribe,deprecationReason:r.deprecationReason,extensions:Ye(r.extensions),astNode:r.astNode}})}function ju(e){return Object.entries(e).map(([t,r])=>({name:Ve(t),description:r.description,type:r.type,defaultValue:r.defaultValue,deprecationReason:r.deprecationReason,extensions:Ye(r.extensions),astNode:r.astNode}))}function $t(e){return He(e)&&!Array.isArray(e)}function qu(e){return dt(e,t=>({description:t.description,type:t.type,args:Hu(t.args),resolve:t.resolve,subscribe:t.subscribe,deprecationReason:t.deprecationReason,extensions:t.extensions,astNode:t.astNode}))}function Hu(e){return bt(e,t=>t.name,t=>({description:t.description,type:t.type,defaultValue:t.defaultValue,deprecationReason:t.deprecationReason,extensions:t.extensions,astNode:t.astNode}))}function Ct(e){return oe(e.type)&&e.defaultValue===void 0}class tr{constructor(t){var r;this.name=Ve(t.name),this.description=t.description,this.resolveType=t.resolveType,this.extensions=Ye(t.extensions),this.astNode=t.astNode,this.extensionASTNodes=(r=t.extensionASTNodes)!==null&&r!==void 0?r:[],this._fields=Uu.bind(void 0,t),this._interfaces=Qu.bind(void 0,t),t.resolveType==null||typeof t.resolveType=="function"||ue(!1,`${this.name} must provide "resolveType" as a function, but got: ${M(t.resolveType)}.`)}get[Symbol.toStringTag](){return"GraphQLInterfaceType"}getFields(){return typeof this._fields=="function"&&(this._fields=this._fields()),this._fields}getInterfaces(){return typeof this._interfaces=="function"&&(this._interfaces=this._interfaces()),this._interfaces}toConfig(){return{name:this.name,description:this.description,interfaces:this.getInterfaces(),fields:qu(this.getFields()),resolveType:this.resolveType,extensions:this.extensions,astNode:this.astNode,extensionASTNodes:this.extensionASTNodes}}toString(){return this.name}toJSON(){return this.toString()}}class rr{constructor(t){var r;this.name=Ve(t.name),this.description=t.description,this.resolveType=t.resolveType,this.extensions=Ye(t.extensions),this.astNode=t.astNode,this.extensionASTNodes=(r=t.extensionASTNodes)!==null&&r!==void 0?r:[],this._types=Qd.bind(void 0,t),t.resolveType==null||typeof t.resolveType=="function"||ue(!1,`${this.name} must provide "resolveType" as a function, but got: ${M(t.resolveType)}.`)}get[Symbol.toStringTag](){return"GraphQLUnionType"}getTypes(){return typeof this._types=="function"&&(this._types=this._types()),this._types}toConfig(){return{name:this.name,description:this.description,types:this.getTypes(),resolveType:this.resolveType,extensions:this.extensions,astNode:this.astNode,extensionASTNodes:this.extensionASTNodes}}toString(){return this.name}toJSON(){return this.toString()}}function Qd(e){const t=To(e.types);return Array.isArray(t)||ue(!1,`Must provide Array of types or a function which returns such an array for Union ${e.name}.`),t}class It{constructor(t){var r;this.name=Ve(t.name),this.description=t.description,this.extensions=Ye(t.extensions),this.astNode=t.astNode,this.extensionASTNodes=(r=t.extensionASTNodes)!==null&&r!==void 0?r:[],this._values=Ud(this.name,t.values),this._valueLookup=new Map(this._values.map(n=>[n.value,n])),this._nameLookup=At(this._values,n=>n.name)}get[Symbol.toStringTag](){return"GraphQLEnumType"}getValues(){return this._values}getValue(t){return this._nameLookup[t]}serialize(t){const r=this._valueLookup.get(t);if(r===void 0)throw new x(`Enum "${this.name}" cannot represent value: ${M(t)}`);return r.name}parseValue(t){if(typeof t!="string"){const n=M(t);throw new x(`Enum "${this.name}" cannot represent non-string value: ${n}.`+pn(this,n))}const r=this.getValue(t);if(r==null)throw new x(`Value "${t}" does not exist in "${this.name}" enum.`+pn(this,t));return r.value}parseLiteral(t,r){if(t.kind!==y.ENUM){const i=ye(t);throw new x(`Enum "${this.name}" cannot represent non-enum value: ${i}.`+pn(this,i),{nodes:t})}const n=this.getValue(t.value);if(n==null){const i=ye(t);throw new x(`Value "${i}" does not exist in "${this.name}" enum.`+pn(this,i),{nodes:t})}return n.value}toConfig(){const t=bt(this.getValues(),r=>r.name,r=>({description:r.description,value:r.value,deprecationReason:r.deprecationReason,extensions:r.extensions,astNode:r.astNode}));return{name:this.name,description:this.description,values:t,extensions:this.extensions,astNode:this.astNode,extensionASTNodes:this.extensionASTNodes}}toString(){return this.name}toJSON(){return this.toString()}}function pn(e,t){const r=e.getValues().map(i=>i.name),n=Nt(t,r);return ht("the enum value",n)}function Ud(e,t){return $t(t)||ue(!1,`${e} values must be an object with value names as keys.`),Object.entries(t).map(([r,n])=>($t(n)||ue(!1,`${e}.${r} must refer to an object with a "value" key representing an internal value but got: ${M(n)}.`),{name:Lu(r),description:n.description,value:n.value!==void 0?n.value:r,deprecationReason:n.deprecationReason,extensions:Ye(n.extensions),astNode:n.astNode}))}class nr{constructor(t){var r;this.name=Ve(t.name),this.description=t.description,this.extensions=Ye(t.extensions),this.astNode=t.astNode,this.extensionASTNodes=(r=t.extensionASTNodes)!==null&&r!==void 0?r:[],this._fields=jd.bind(void 0,t)}get[Symbol.toStringTag](){return"GraphQLInputObjectType"}getFields(){return typeof this._fields=="function"&&(this._fields=this._fields()),this._fields}toConfig(){const t=dt(this.getFields(),r=>({description:r.description,type:r.type,defaultValue:r.defaultValue,deprecationReason:r.deprecationReason,extensions:r.extensions,astNode:r.astNode}));return{name:this.name,description:this.description,fields:t,extensions:this.extensions,astNode:this.astNode,extensionASTNodes:this.extensionASTNodes}}toString(){return this.name}toJSON(){return this.toString()}}function jd(e){const t=wo(e.fields);return $t(t)||ue(!1,`${e.name} fields must be an object with field names as keys or a function which returns such an object.`),dt(t,(r,n)=>(!("resolve"in r)||ue(!1,`${e.name}.${n} field has a resolve property, but Input Types cannot define resolvers.`),{name:Ve(n),description:r.description,type:r.type,defaultValue:r.defaultValue,deprecationReason:r.deprecationReason,extensions:Ye(r.extensions),astNode:r.astNode}))}function Vn(e){return oe(e.type)&&e.defaultValue===void 0}function wn(e,t){return e===t?!0:oe(e)&&oe(t)||Ee(e)&&Ee(t)?wn(e.ofType,t.ofType):!1}function Ut(e,t,r){return t===r?!0:oe(r)?oe(t)?Ut(e,t.ofType,r.ofType):!1:oe(t)?Ut(e,t.ofType,r):Ee(r)?Ee(t)?Ut(e,t.ofType,r.ofType):!1:Ee(t)?!1:ot(r)&&(Ae(t)||fe(t))&&e.isSubType(r,t)}function Zi(e,t,r){return t===r?!0:ot(t)?ot(r)?e.getPossibleTypes(t).some(n=>e.isSubType(r,n)):e.isSubType(t,r):ot(r)?e.isSubType(r,t):!1}const yn=2147483647,En=-2147483648,Vu=new ut({name:"Int",description:"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.",serialize(e){const t=Zr(e);if(typeof t=="boolean")return t?1:0;let r=t;if(typeof t=="string"&&t!==""&&(r=Number(t)),typeof r!="number"||!Number.isInteger(r))throw new x(`Int cannot represent non-integer value: ${M(t)}`);if(r>yn||r<En)throw new x("Int cannot represent non 32-bit signed integer value: "+M(t));return r},parseValue(e){if(typeof e!="number"||!Number.isInteger(e))throw new x(`Int cannot represent non-integer value: ${M(e)}`);if(e>yn||e<En)throw new x(`Int cannot represent non 32-bit signed integer value: ${e}`);return e},parseLiteral(e){if(e.kind!==y.INT)throw new x(`Int cannot represent non-integer value: ${ye(e)}`,{nodes:e});const t=parseInt(e.value,10);if(t>yn||t<En)throw new x(`Int cannot represent non 32-bit signed integer value: ${e.value}`,{nodes:e});return t}}),zu=new ut({name:"Float",description:"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point).",serialize(e){const t=Zr(e);if(typeof t=="boolean")return t?1:0;let r=t;if(typeof t=="string"&&t!==""&&(r=Number(t)),typeof r!="number"||!Number.isFinite(r))throw new x(`Float cannot represent non numeric value: ${M(t)}`);return r},parseValue(e){if(typeof e!="number"||!Number.isFinite(e))throw new x(`Float cannot represent non numeric value: ${M(e)}`);return e},parseLiteral(e){if(e.kind!==y.FLOAT&&e.kind!==y.INT)throw new x(`Float cannot represent non numeric value: ${ye(e)}`,e);return parseFloat(e.value)}}),we=new ut({name:"String",description:"The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.",serialize(e){const t=Zr(e);if(typeof t=="string")return t;if(typeof t=="boolean")return t?"true":"false";if(typeof t=="number"&&Number.isFinite(t))return t.toString();throw new x(`String cannot represent value: ${M(e)}`)},parseValue(e){if(typeof e!="string")throw new x(`String cannot represent a non string value: ${M(e)}`);return e},parseLiteral(e){if(e.kind!==y.STRING)throw new x(`String cannot represent a non string value: ${ye(e)}`,{nodes:e});return e.value}}),je=new ut({name:"Boolean",description:"The `Boolean` scalar type represents `true` or `false`.",serialize(e){const t=Zr(e);if(typeof t=="boolean")return t;if(Number.isFinite(t))return t!==0;throw new x(`Boolean cannot represent a non boolean value: ${M(t)}`)},parseValue(e){if(typeof e!="boolean")throw new x(`Boolean cannot represent a non boolean value: ${M(e)}`);return e},parseLiteral(e){if(e.kind!==y.BOOLEAN)throw new x(`Boolean cannot represent a non boolean value: ${ye(e)}`,{nodes:e});return e.value}}),Io=new ut({name:"ID",description:'The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.',serialize(e){const t=Zr(e);if(typeof t=="string")return t;if(Number.isInteger(t))return String(t);throw new x(`ID cannot represent value: ${M(e)}`)},parseValue(e){if(typeof e=="string")return e;if(typeof e=="number"&&Number.isInteger(e))return e.toString();throw new x(`ID cannot represent value: ${M(e)}`)},parseLiteral(e){if(e.kind!==y.STRING&&e.kind!==y.INT)throw new x("ID cannot represent a non-string and non-integer value: "+ye(e),{nodes:e});return e.value}}),Kr=Object.freeze([we,Vu,zu,je,Io]);function zn(e){return Kr.some(({name:t})=>e.name===t)}function Zr(e){if(He(e)){if(typeof e.valueOf=="function"){const t=e.valueOf();if(!He(t))return t}if(typeof e.toJSON=="function")return e.toJSON()}return e}function Gn(e){return rt(e,ct)}function qd(e){if(!Gn(e))throw new Error(`Expected ${M(e)} to be a GraphQL directive.`);return e}class ct{constructor(t){var r,n;this.name=Ve(t.name),this.description=t.description,this.locations=t.locations,this.isRepeatable=(r=t.isRepeatable)!==null&&r!==void 0?r:!1,this.extensions=Ye(t.extensions),this.astNode=t.astNode,Array.isArray(t.locations)||ue(!1,`@${t.name} locations must be an Array.`);const i=(n=t.args)!==null&&n!==void 0?n:{};He(i)&&!Array.isArray(i)||ue(!1,`@${t.name} args must be an object with argument names as keys.`),this.args=ju(i)}get[Symbol.toStringTag](){return"GraphQLDirective"}toConfig(){return{name:this.name,description:this.description,locations:this.locations,args:Hu(this.args),isRepeatable:this.isRepeatable,extensions:this.extensions,astNode:this.astNode}}toString(){return"@"+this.name}toJSON(){return this.toString()}}const So=new ct({name:"include",description:"Directs the executor to include this field or fragment only when the `if` argument is true.",locations:[re.FIELD,re.FRAGMENT_SPREAD,re.INLINE_FRAGMENT],args:{if:{type:new se(je),description:"Included when true."}}}),No=new ct({name:"skip",description:"Directs the executor to skip this field or fragment when the `if` argument is true.",locations:[re.FIELD,re.FRAGMENT_SPREAD,re.INLINE_FRAGMENT],args:{if:{type:new se(je),description:"Skipped when true."}}}),Co="No longer supported",Xn=new ct({name:"deprecated",description:"Marks an element of a GraphQL schema as no longer supported.",locations:[re.FIELD_DEFINITION,re.ARGUMENT_DEFINITION,re.INPUT_FIELD_DEFINITION,re.ENUM_VALUE],args:{reason:{type:we,description:"Explains why this element was deprecated, usually also including a suggestion for how to access supported similar data. Formatted using the Markdown syntax, as specified by [CommonMark](https://commonmark.org/).",defaultValue:Co}}}),Bo=new ct({name:"specifiedBy",description:"Exposes a URL that specifies the behavior of this scalar.",locations:[re.SCALAR],args:{url:{type:new se(we),description:"The URL that specifies the behavior of this scalar."}}}),Bt=Object.freeze([So,No,Xn,Bo]);function Oo(e){return Bt.some(({name:t})=>t===e.name)}function Po(e){return typeof e=="object"&&typeof e?.[Symbol.iterator]=="function"}function Dt(e,t){if(oe(t)){const r=Dt(e,t.ofType);return r?.kind===y.NULL?null:r}if(e===null)return{kind:y.NULL};if(e===void 0)return null;if(Ee(t)){const r=t.ofType;if(Po(e)){const n=[];for(const i of e){const o=Dt(i,r);o!=null&&n.push(o)}return{kind:y.LIST,values:n}}return Dt(e,r)}if(be(t)){if(!He(e))return null;const r=[];for(const n of Object.values(t.getFields())){const i=Dt(e[n.name],n.type);i&&r.push({kind:y.OBJECT_FIELD,name:{kind:y.NAME,value:n.name},value:i})}return{kind:y.OBJECT,fields:r}}if(at(t)){const r=t.serialize(e);if(r==null)return null;if(typeof r=="boolean")return{kind:y.BOOLEAN,value:r};if(typeof r=="number"&&Number.isFinite(r)){const n=String(r);return ss.test(n)?{kind:y.INT,value:n}:{kind:y.FLOAT,value:n}}if(typeof r=="string")return Ce(t)?{kind:y.ENUM,value:r}:t===Io&&ss.test(r)?{kind:y.INT,value:r}:{kind:y.STRING,value:r};throw new TypeError(`Cannot convert value to AST: ${M(r)}.`)}Ie(!1,"Unexpected input type: "+M(t))}const ss=/^-?(?:0|[1-9][0-9]*)$/,Jn=new Xe({name:"__Schema",description:"A GraphQL Schema defines the capabilities of a GraphQL server. It exposes all available types and directives on the server, as well as the entry points for query, mutation, and subscription operations.",fields:()=>({description:{type:we,resolve:e=>e.description},types:{description:"A list of all types supported by this server.",type:new se(new ke(new se(Ge))),resolve(e){return Object.values(e.getTypeMap())}},queryType:{description:"The type that query operations will be rooted at.",type:new se(Ge),resolve:e=>e.getQueryType()},mutationType:{description:"If this server supports mutation, the type that mutation operations will be rooted at.",type:Ge,resolve:e=>e.getMutationType()},subscriptionType:{description:"If this server support subscription, the type that subscription operations will be rooted at.",type:Ge,resolve:e=>e.getSubscriptionType()},directives:{description:"A list of all directives supported by this server.",type:new se(new ke(new se(Ro))),resolve:e=>e.getDirectives()}})}),Ro=new Xe({name:"__Directive",description:`A Directive provides a way to describe alternate runtime execution and type validation behavior in a GraphQL document.

In some cases, you need to provide options to alter GraphQL's execution behavior in ways field arguments will not suffice, such as conditionally including or skipping a field. Directives provide this by describing additional information to the executor.`,fields:()=>({name:{type:new se(we),resolve:e=>e.name},description:{type:we,resolve:e=>e.description},isRepeatable:{type:new se(je),resolve:e=>e.isRepeatable},locations:{type:new se(new ke(new se(ko))),resolve:e=>e.locations},args:{type:new se(new ke(new se(_r))),args:{includeDeprecated:{type:je,defaultValue:!1}},resolve(e,{includeDeprecated:t}){return t?e.args:e.args.filter(r=>r.deprecationReason==null)}}})}),ko=new It({name:"__DirectiveLocation",description:"A Directive can be adjacent to many parts of the GraphQL language, a __DirectiveLocation describes one such possible adjacencies.",values:{QUERY:{value:re.QUERY,description:"Location adjacent to a query operation."},MUTATION:{value:re.MUTATION,description:"Location adjacent to a mutation operation."},SUBSCRIPTION:{value:re.SUBSCRIPTION,description:"Location adjacent to a subscription operation."},FIELD:{value:re.FIELD,description:"Location adjacent to a field."},FRAGMENT_DEFINITION:{value:re.FRAGMENT_DEFINITION,description:"Location adjacent to a fragment definition."},FRAGMENT_SPREAD:{value:re.FRAGMENT_SPREAD,description:"Location adjacent to a fragment spread."},INLINE_FRAGMENT:{value:re.INLINE_FRAGMENT,description:"Location adjacent to an inline fragment."},VARIABLE_DEFINITION:{value:re.VARIABLE_DEFINITION,description:"Location adjacent to a variable definition."},SCHEMA:{value:re.SCHEMA,description:"Location adjacent to a schema definition."},SCALAR:{value:re.SCALAR,description:"Location adjacent to a scalar definition."},OBJECT:{value:re.OBJECT,description:"Location adjacent to an object type definition."},FIELD_DEFINITION:{value:re.FIELD_DEFINITION,description:"Location adjacent to a field definition."},ARGUMENT_DEFINITION:{value:re.ARGUMENT_DEFINITION,description:"Location adjacent to an argument definition."},INTERFACE:{value:re.INTERFACE,description:"Location adjacent to an interface definition."},UNION:{value:re.UNION,description:"Location adjacent to a union definition."},ENUM:{value:re.ENUM,description:"Location adjacent to an enum definition."},ENUM_VALUE:{value:re.ENUM_VALUE,description:"Location adjacent to an enum value definition."},INPUT_OBJECT:{value:re.INPUT_OBJECT,description:"Location adjacent to an input object type definition."},INPUT_FIELD_DEFINITION:{value:re.INPUT_FIELD_DEFINITION,description:"Location adjacent to an input object field definition."}}}),Ge=new Xe({name:"__Type",description:"The fundamental unit of any GraphQL Schema is the type. There are many kinds of types in GraphQL as represented by the `__TypeKind` enum.\n\nDepending on the kind of a type, certain fields describe information about that type. Scalar types provide no information beyond a name, description and optional `specifiedByURL`, while Enum types provide their values. Object and Interface types provide the fields they describe. Abstract types, Union and Interface, provide the Object types possible at runtime. List and NonNull types compose other types.",fields:()=>({kind:{type:new se(Fo),resolve(e){if(ze(e))return ge.SCALAR;if(fe(e))return ge.OBJECT;if(Ae(e))return ge.INTERFACE;if(Pe(e))return ge.UNION;if(Ce(e))return ge.ENUM;if(be(e))return ge.INPUT_OBJECT;if(Ee(e))return ge.LIST;if(oe(e))return ge.NON_NULL;Ie(!1,`Unexpected type: "${M(e)}".`)}},name:{type:we,resolve:e=>"name"in e?e.name:void 0},description:{type:we,resolve:e=>"description"in e?e.description:void 0},specifiedByURL:{type:we,resolve:e=>"specifiedByURL"in e?e.specifiedByURL:void 0},fields:{type:new ke(new se(Lo)),args:{includeDeprecated:{type:je,defaultValue:!1}},resolve(e,{includeDeprecated:t}){if(fe(e)||Ae(e)){const r=Object.values(e.getFields());return t?r:r.filter(n=>n.deprecationReason==null)}}},interfaces:{type:new ke(new se(Ge)),resolve(e){if(fe(e)||Ae(e))return e.getInterfaces()}},possibleTypes:{type:new ke(new se(Ge)),resolve(e,t,r,{schema:n}){if(ot(e))return n.getPossibleTypes(e)}},enumValues:{type:new ke(new se(xo)),args:{includeDeprecated:{type:je,defaultValue:!1}},resolve(e,{includeDeprecated:t}){if(Ce(e)){const r=e.getValues();return t?r:r.filter(n=>n.deprecationReason==null)}}},inputFields:{type:new ke(new se(_r)),args:{includeDeprecated:{type:je,defaultValue:!1}},resolve(e,{includeDeprecated:t}){if(be(e)){const r=Object.values(e.getFields());return t?r:r.filter(n=>n.deprecationReason==null)}}},ofType:{type:Ge,resolve:e=>"ofType"in e?e.ofType:void 0}})}),Lo=new Xe({name:"__Field",description:"Object and Interface types are described by a list of Fields, each of which has a name, potentially a list of arguments, and a return type.",fields:()=>({name:{type:new se(we),resolve:e=>e.name},description:{type:we,resolve:e=>e.description},args:{type:new se(new ke(new se(_r))),args:{includeDeprecated:{type:je,defaultValue:!1}},resolve(e,{includeDeprecated:t}){return t?e.args:e.args.filter(r=>r.deprecationReason==null)}},type:{type:new se(Ge),resolve:e=>e.type},isDeprecated:{type:new se(je),resolve:e=>e.deprecationReason!=null},deprecationReason:{type:we,resolve:e=>e.deprecationReason}})}),_r=new Xe({name:"__InputValue",description:"Arguments provided to Fields or Directives and the input fields of an InputObject are represented as Input Values which describe their type and optionally a default value.",fields:()=>({name:{type:new se(we),resolve:e=>e.name},description:{type:we,resolve:e=>e.description},type:{type:new se(Ge),resolve:e=>e.type},defaultValue:{type:we,description:"A GraphQL-formatted string representing the default value for this input value.",resolve(e){const{type:t,defaultValue:r}=e,n=Dt(r,t);return n?ye(n):null}},isDeprecated:{type:new se(je),resolve:e=>e.deprecationReason!=null},deprecationReason:{type:we,resolve:e=>e.deprecationReason}})}),xo=new Xe({name:"__EnumValue",description:"One possible value for a given Enum. Enum values are unique values, not a placeholder for a string or numeric value. However an Enum value is returned in a JSON response as a string.",fields:()=>({name:{type:new se(we),resolve:e=>e.name},description:{type:we,resolve:e=>e.description},isDeprecated:{type:new se(je),resolve:e=>e.deprecationReason!=null},deprecationReason:{type:we,resolve:e=>e.deprecationReason}})});var ge;(function(e){e.SCALAR="SCALAR",e.OBJECT="OBJECT",e.INTERFACE="INTERFACE",e.UNION="UNION",e.ENUM="ENUM",e.INPUT_OBJECT="INPUT_OBJECT",e.LIST="LIST",e.NON_NULL="NON_NULL"})(ge||(ge={}));const Fo=new It({name:"__TypeKind",description:"An enum describing what kind of type a given `__Type` is.",values:{SCALAR:{value:ge.SCALAR,description:"Indicates this type is a scalar."},OBJECT:{value:ge.OBJECT,description:"Indicates this type is an object. `fields` and `interfaces` are valid fields."},INTERFACE:{value:ge.INTERFACE,description:"Indicates this type is an interface. `fields`, `interfaces`, and `possibleTypes` are valid fields."},UNION:{value:ge.UNION,description:"Indicates this type is a union. `possibleTypes` is a valid field."},ENUM:{value:ge.ENUM,description:"Indicates this type is an enum. `enumValues` is a valid field."},INPUT_OBJECT:{value:ge.INPUT_OBJECT,description:"Indicates this type is an input object. `inputFields` is a valid field."},LIST:{value:ge.LIST,description:"Indicates this type is a list. `ofType` is a valid field."},NON_NULL:{value:ge.NON_NULL,description:"Indicates this type is a non-null. `ofType` is a valid field."}}}),Fr={name:"__schema",type:new se(Jn),description:"Access the current type schema of this server.",args:[],resolve:(e,t,r,{schema:n})=>n,deprecationReason:void 0,extensions:Object.create(null),astNode:void 0},Mr={name:"__type",type:Ge,description:"Request the type information of a single type.",args:[{name:"name",description:void 0,type:new se(we),defaultValue:void 0,deprecationReason:void 0,extensions:Object.create(null),astNode:void 0}],resolve:(e,{name:t},r,{schema:n})=>n.getType(t),deprecationReason:void 0,extensions:Object.create(null),astNode:void 0},Qr={name:"__typename",type:new se(we),description:"The name of the current Object type at runtime.",args:[],resolve:(e,t,r,{parentType:n})=>n.name,deprecationReason:void 0,extensions:Object.create(null),astNode:void 0},$r=Object.freeze([Jn,Ro,ko,Ge,Lo,_r,xo,Fo]);function zt(e){return $r.some(({name:t})=>e.name===t)}function Gu(e){return rt(e,lr)}function Mo(e){if(!Gu(e))throw new Error(`Expected ${M(e)} to be a GraphQL schema.`);return e}class lr{constructor(t){var r,n;this.__validationErrors=t.assumeValid===!0?[]:void 0,He(t)||ue(!1,"Must provide configuration object."),!t.types||Array.isArray(t.types)||ue(!1,`"types" must be Array if provided but got: ${M(t.types)}.`),!t.directives||Array.isArray(t.directives)||ue(!1,`"directives" must be Array if provided but got: ${M(t.directives)}.`),this.description=t.description,this.extensions=Ye(t.extensions),this.astNode=t.astNode,this.extensionASTNodes=(r=t.extensionASTNodes)!==null&&r!==void 0?r:[],this._queryType=t.query,this._mutationType=t.mutation,this._subscriptionType=t.subscription,this._directives=(n=t.directives)!==null&&n!==void 0?n:Bt;const i=new Set(t.types);if(t.types!=null)for(const o of t.types)i.delete(o),$e(o,i);this._queryType!=null&&$e(this._queryType,i),this._mutationType!=null&&$e(this._mutationType,i),this._subscriptionType!=null&&$e(this._subscriptionType,i);for(const o of this._directives)if(Gn(o))for(const a of o.args)$e(a.type,i);$e(Jn,i),this._typeMap=Object.create(null),this._subTypeMap=Object.create(null),this._implementationsMap=Object.create(null);for(const o of i){if(o==null)continue;const a=o.name;if(a||ue(!1,"One of the provided types for building the Schema is missing a name."),this._typeMap[a]!==void 0)throw new Error(`Schema must contain uniquely named types but contains multiple types named "${a}".`);if(this._typeMap[a]=o,Ae(o)){for(const s of o.getInterfaces())if(Ae(s)){let u=this._implementationsMap[s.name];u===void 0&&(u=this._implementationsMap[s.name]={objects:[],interfaces:[]}),u.interfaces.push(o)}}else if(fe(o)){for(const s of o.getInterfaces())if(Ae(s)){let u=this._implementationsMap[s.name];u===void 0&&(u=this._implementationsMap[s.name]={objects:[],interfaces:[]}),u.objects.push(o)}}}}get[Symbol.toStringTag](){return"GraphQLSchema"}getQueryType(){return this._queryType}getMutationType(){return this._mutationType}getSubscriptionType(){return this._subscriptionType}getRootType(t){switch(t){case Oe.QUERY:return this.getQueryType();case Oe.MUTATION:return this.getMutationType();case Oe.SUBSCRIPTION:return this.getSubscriptionType()}}getTypeMap(){return this._typeMap}getType(t){return this.getTypeMap()[t]}getPossibleTypes(t){return Pe(t)?t.getTypes():this.getImplementations(t).objects}getImplementations(t){const r=this._implementationsMap[t.name];return r??{objects:[],interfaces:[]}}isSubType(t,r){let n=this._subTypeMap[t.name];if(n===void 0){if(n=Object.create(null),Pe(t))for(const i of t.getTypes())n[i.name]=!0;else{const i=this.getImplementations(t);for(const o of i.objects)n[o.name]=!0;for(const o of i.interfaces)n[o.name]=!0}this._subTypeMap[t.name]=n}return n[r.name]!==void 0}getDirectives(){return this._directives}getDirective(t){return this.getDirectives().find(r=>r.name===t)}toConfig(){return{description:this.description,query:this.getQueryType(),mutation:this.getMutationType(),subscription:this.getSubscriptionType(),types:Object.values(this.getTypeMap()),directives:this.getDirectives(),extensions:this.extensions,astNode:this.astNode,extensionASTNodes:this.extensionASTNodes,assumeValid:this.__validationErrors!==void 0}}}function $e(e,t){const r=xe(e);if(!t.has(r)){if(t.add(r),Pe(r))for(const n of r.getTypes())$e(n,t);else if(fe(r)||Ae(r)){for(const n of r.getInterfaces())$e(n,t);for(const n of Object.values(r.getFields())){$e(n.type,t);for(const i of n.args)$e(i.type,t)}}else if(be(r))for(const n of Object.values(r.getFields()))$e(n.type,t)}return t}function Qo(e){if(Mo(e),e.__validationErrors)return e.__validationErrors;const t=new Hd(e);Vd(t),zd(t),Gd(t);const r=t.getErrors();return e.__validationErrors=r,r}function Uo(e){const t=Qo(e);if(t.length!==0)throw new Error(t.map(r=>r.message).join(`

`))}class Hd{constructor(t){this._errors=[],this.schema=t}reportError(t,r){const n=Array.isArray(r)?r.filter(Boolean):r;this._errors.push(new x(t,{nodes:n}))}getErrors(){return this._errors}}function Vd(e){const t=e.schema,r=t.getQueryType();if(!r)e.reportError("Query root type must be provided.",t.astNode);else if(!fe(r)){var n;e.reportError(`Query root type must be Object type, it cannot be ${M(r)}.`,(n=Qi(t,Oe.QUERY))!==null&&n!==void 0?n:r.astNode)}const i=t.getMutationType();if(i&&!fe(i)){var o;e.reportError(`Mutation root type must be Object type if provided, it cannot be ${M(i)}.`,(o=Qi(t,Oe.MUTATION))!==null&&o!==void 0?o:i.astNode)}const a=t.getSubscriptionType();if(a&&!fe(a)){var s;e.reportError(`Subscription root type must be Object type if provided, it cannot be ${M(a)}.`,(s=Qi(t,Oe.SUBSCRIPTION))!==null&&s!==void 0?s:a.astNode)}}function Qi(e,t){var r;return(r=[e.astNode,...e.extensionASTNodes].flatMap(n=>{var i;return(i=n?.operationTypes)!==null&&i!==void 0?i:[]}).find(n=>n.operation===t))===null||r===void 0?void 0:r.type}function zd(e){for(const r of e.schema.getDirectives()){if(!Gn(r)){e.reportError(`Expected directive but got: ${M(r)}.`,r?.astNode);continue}Ht(e,r);for(const n of r.args)if(Ht(e,n),Me(n.type)||e.reportError(`The type of @${r.name}(${n.name}:) must be Input Type but got: ${M(n.type)}.`,n.astNode),Ct(n)&&n.deprecationReason!=null){var t;e.reportError(`Required argument @${r.name}(${n.name}:) cannot be deprecated.`,[jo(n.astNode),(t=n.astNode)===null||t===void 0?void 0:t.type])}}}function Ht(e,t){t.name.startsWith("__")&&e.reportError(`Name "${t.name}" must not begin with "__", which is reserved by GraphQL introspection.`,t.astNode)}function Gd(e){const t=Zd(e),r=e.schema.getTypeMap();for(const n of Object.values(r)){if(!Yr(n)){e.reportError(`Expected GraphQL named type but got: ${M(n)}.`,n.astNode);continue}zt(n)||Ht(e,n),fe(n)||Ae(n)?(us(e,n),cs(e,n)):Pe(n)?Wd(e,n):Ce(n)?Yd(e,n):be(n)&&(Kd(e,n),t(n))}}function us(e,t){const r=Object.values(t.getFields());r.length===0&&e.reportError(`Type ${t.name} must define one or more fields.`,[t.astNode,...t.extensionASTNodes]);for(const a of r){if(Ht(e,a),!Tt(a.type)){var n;e.reportError(`The type of ${t.name}.${a.name} must be Output Type but got: ${M(a.type)}.`,(n=a.astNode)===null||n===void 0?void 0:n.type)}for(const s of a.args){const u=s.name;if(Ht(e,s),!Me(s.type)){var i;e.reportError(`The type of ${t.name}.${a.name}(${u}:) must be Input Type but got: ${M(s.type)}.`,(i=s.astNode)===null||i===void 0?void 0:i.type)}if(Ct(s)&&s.deprecationReason!=null){var o;e.reportError(`Required argument ${t.name}.${a.name}(${u}:) cannot be deprecated.`,[jo(s.astNode),(o=s.astNode)===null||o===void 0?void 0:o.type])}}}}function cs(e,t){const r=Object.create(null);for(const n of t.getInterfaces()){if(!Ae(n)){e.reportError(`Type ${M(t)} must only implement Interface types, it cannot implement ${M(n)}.`,kr(t,n));continue}if(t===n){e.reportError(`Type ${t.name} cannot implement itself because it would create a circular reference.`,kr(t,n));continue}if(r[n.name]){e.reportError(`Type ${t.name} can only implement ${n.name} once.`,kr(t,n));continue}r[n.name]=!0,Jd(e,t,n),Xd(e,t,n)}}function Xd(e,t,r){const n=t.getFields();for(const u of Object.values(r.getFields())){const c=u.name,l=n[c];if(!l){e.reportError(`Interface field ${r.name}.${c} expected but ${t.name} does not provide it.`,[u.astNode,t.astNode,...t.extensionASTNodes]);continue}if(!Ut(e.schema,l.type,u.type)){var i,o;e.reportError(`Interface field ${r.name}.${c} expects type ${M(u.type)} but ${t.name}.${c} is type ${M(l.type)}.`,[(i=u.astNode)===null||i===void 0?void 0:i.type,(o=l.astNode)===null||o===void 0?void 0:o.type])}for(const f of u.args){const d=f.name,v=l.args.find(w=>w.name===d);if(!v){e.reportError(`Interface field argument ${r.name}.${c}(${d}:) expected but ${t.name}.${c} does not provide it.`,[f.astNode,l.astNode]);continue}if(!wn(f.type,v.type)){var a,s;e.reportError(`Interface field argument ${r.name}.${c}(${d}:) expects type ${M(f.type)} but ${t.name}.${c}(${d}:) is type ${M(v.type)}.`,[(a=f.astNode)===null||a===void 0?void 0:a.type,(s=v.astNode)===null||s===void 0?void 0:s.type])}}for(const f of l.args){const d=f.name;!u.args.find(w=>w.name===d)&&Ct(f)&&e.reportError(`Object field ${t.name}.${c} includes required argument ${d} that is missing from the Interface field ${r.name}.${c}.`,[f.astNode,u.astNode])}}}function Jd(e,t,r){const n=t.getInterfaces();for(const i of r.getInterfaces())n.includes(i)||e.reportError(i===t?`Type ${t.name} cannot implement ${r.name} because it would create a circular reference.`:`Type ${t.name} must implement ${i.name} because it is implemented by ${r.name}.`,[...kr(r,i),...kr(t,r)])}function Wd(e,t){const r=t.getTypes();r.length===0&&e.reportError(`Union type ${t.name} must define one or more member types.`,[t.astNode,...t.extensionASTNodes]);const n=Object.create(null);for(const i of r){if(n[i.name]){e.reportError(`Union type ${t.name} can only include type ${i.name} once.`,ls(t,i.name));continue}n[i.name]=!0,fe(i)||e.reportError(`Union type ${t.name} can only include Object types, it cannot include ${M(i)}.`,ls(t,String(i)))}}function Yd(e,t){const r=t.getValues();r.length===0&&e.reportError(`Enum type ${t.name} must define one or more values.`,[t.astNode,...t.extensionASTNodes]);for(const n of r)Ht(e,n)}function Kd(e,t){const r=Object.values(t.getFields());r.length===0&&e.reportError(`Input Object type ${t.name} must define one or more fields.`,[t.astNode,...t.extensionASTNodes]);for(const o of r){if(Ht(e,o),!Me(o.type)){var n;e.reportError(`The type of ${t.name}.${o.name} must be Input Type but got: ${M(o.type)}.`,(n=o.astNode)===null||n===void 0?void 0:n.type)}if(Vn(o)&&o.deprecationReason!=null){var i;e.reportError(`Required input field ${t.name}.${o.name} cannot be deprecated.`,[jo(o.astNode),(i=o.astNode)===null||i===void 0?void 0:i.type])}}}function Zd(e){const t=Object.create(null),r=[],n=Object.create(null);return i;function i(o){if(t[o.name])return;t[o.name]=!0,n[o.name]=r.length;const a=Object.values(o.getFields());for(const s of a)if(oe(s.type)&&be(s.type.ofType)){const u=s.type.ofType,c=n[u.name];if(r.push(s),c===void 0)i(u);else{const l=r.slice(c),f=l.map(d=>d.name).join(".");e.reportError(`Cannot reference Input Object "${u.name}" within itself through a series of non-null fields: "${f}".`,l.map(d=>d.astNode))}r.pop()}n[o.name]=void 0}}function kr(e,t){const{astNode:r,extensionASTNodes:n}=e;return(r!=null?[r,...n]:n).flatMap(o=>{var a;return(a=o.interfaces)!==null&&a!==void 0?a:[]}).filter(o=>o.name.value===t.name)}function ls(e,t){const{astNode:r,extensionASTNodes:n}=e;return(r!=null?[r,...n]:n).flatMap(o=>{var a;return(a=o.types)!==null&&a!==void 0?a:[]}).filter(o=>o.name.value===t)}function jo(e){var t;return e==null||(t=e.directives)===null||t===void 0?void 0:t.find(r=>r.name.value===Xn.name)}function Qe(e,t){switch(t.kind){case y.LIST_TYPE:{const r=Qe(e,t.type);return r&&new ke(r)}case y.NON_NULL_TYPE:{const r=Qe(e,t.type);return r&&new se(r)}case y.NAMED_TYPE:return e.getType(t.name.value)}}class qo{constructor(t,r,n){this._schema=t,this._typeStack=[],this._parentTypeStack=[],this._inputTypeStack=[],this._fieldDefStack=[],this._defaultValueStack=[],this._directive=null,this._argument=null,this._enumValue=null,this._getFieldDef=n??_d,r&&(Me(r)&&this._inputTypeStack.push(r),st(r)&&this._parentTypeStack.push(r),Tt(r)&&this._typeStack.push(r))}get[Symbol.toStringTag](){return"TypeInfo"}getType(){if(this._typeStack.length>0)return this._typeStack[this._typeStack.length-1]}getParentType(){if(this._parentTypeStack.length>0)return this._parentTypeStack[this._parentTypeStack.length-1]}getInputType(){if(this._inputTypeStack.length>0)return this._inputTypeStack[this._inputTypeStack.length-1]}getParentInputType(){if(this._inputTypeStack.length>1)return this._inputTypeStack[this._inputTypeStack.length-2]}getFieldDef(){if(this._fieldDefStack.length>0)return this._fieldDefStack[this._fieldDefStack.length-1]}getDefaultValue(){if(this._defaultValueStack.length>0)return this._defaultValueStack[this._defaultValueStack.length-1]}getDirective(){return this._directive}getArgument(){return this._argument}getEnumValue(){return this._enumValue}enter(t){const r=this._schema;switch(t.kind){case y.SELECTION_SET:{const i=xe(this.getType());this._parentTypeStack.push(st(i)?i:void 0);break}case y.FIELD:{const i=this.getParentType();let o,a;i&&(o=this._getFieldDef(r,i,t),o&&(a=o.type)),this._fieldDefStack.push(o),this._typeStack.push(Tt(a)?a:void 0);break}case y.DIRECTIVE:this._directive=r.getDirective(t.name.value);break;case y.OPERATION_DEFINITION:{const i=r.getRootType(t.operation);this._typeStack.push(fe(i)?i:void 0);break}case y.INLINE_FRAGMENT:case y.FRAGMENT_DEFINITION:{const i=t.typeCondition,o=i?Qe(r,i):xe(this.getType());this._typeStack.push(Tt(o)?o:void 0);break}case y.VARIABLE_DEFINITION:{const i=Qe(r,t.type);this._inputTypeStack.push(Me(i)?i:void 0);break}case y.ARGUMENT:{var n;let i,o;const a=(n=this.getDirective())!==null&&n!==void 0?n:this.getFieldDef();a&&(i=a.args.find(s=>s.name===t.name.value),i&&(o=i.type)),this._argument=i,this._defaultValueStack.push(i?i.defaultValue:void 0),this._inputTypeStack.push(Me(o)?o:void 0);break}case y.LIST:{const i=Do(this.getInputType()),o=Ee(i)?i.ofType:i;this._defaultValueStack.push(void 0),this._inputTypeStack.push(Me(o)?o:void 0);break}case y.OBJECT_FIELD:{const i=xe(this.getInputType());let o,a;be(i)&&(a=i.getFields()[t.name.value],a&&(o=a.type)),this._defaultValueStack.push(a?a.defaultValue:void 0),this._inputTypeStack.push(Me(o)?o:void 0);break}case y.ENUM:{const i=xe(this.getInputType());let o;Ce(i)&&(o=i.getValue(t.value)),this._enumValue=o;break}}}leave(t){switch(t.kind){case y.SELECTION_SET:this._parentTypeStack.pop();break;case y.FIELD:this._fieldDefStack.pop(),this._typeStack.pop();break;case y.DIRECTIVE:this._directive=null;break;case y.OPERATION_DEFINITION:case y.INLINE_FRAGMENT:case y.FRAGMENT_DEFINITION:this._typeStack.pop();break;case y.VARIABLE_DEFINITION:this._inputTypeStack.pop();break;case y.ARGUMENT:this._argument=null,this._defaultValueStack.pop(),this._inputTypeStack.pop();break;case y.LIST:case y.OBJECT_FIELD:this._defaultValueStack.pop(),this._inputTypeStack.pop();break;case y.ENUM:this._enumValue=null;break}}}function _d(e,t,r){const n=r.name.value;if(n===Fr.name&&e.getQueryType()===t)return Fr;if(n===Mr.name&&e.getQueryType()===t)return Mr;if(n===Qr.name&&st(t))return Qr;if(fe(t)||Ae(t))return t.getFields()[n]}function Ho(e,t){return{enter(...r){const n=r[0];e.enter(n);const i=er(t,n.kind).enter;if(i){const o=i.apply(t,r);return o!==void 0&&(e.leave(n),Wi(o)&&e.enter(o)),o}},leave(...r){const n=r[0],i=er(t,n.kind).leave;let o;return i&&(o=i.apply(t,r)),e.leave(n),o}}}function $d(e){return Vo(e)||zo(e)||Go(e)}function Vo(e){return e.kind===y.OPERATION_DEFINITION||e.kind===y.FRAGMENT_DEFINITION}function eh(e){return e.kind===y.FIELD||e.kind===y.FRAGMENT_SPREAD||e.kind===y.INLINE_FRAGMENT}function Xu(e){return e.kind===y.VARIABLE||e.kind===y.INT||e.kind===y.FLOAT||e.kind===y.STRING||e.kind===y.BOOLEAN||e.kind===y.NULL||e.kind===y.ENUM||e.kind===y.LIST||e.kind===y.OBJECT}function _i(e){return Xu(e)&&(e.kind===y.LIST?e.values.some(_i):e.kind===y.OBJECT?e.fields.some(t=>_i(t.value)):e.kind!==y.VARIABLE)}function th(e){return e.kind===y.NAMED_TYPE||e.kind===y.LIST_TYPE||e.kind===y.NON_NULL_TYPE}function zo(e){return e.kind===y.SCHEMA_DEFINITION||fr(e)||e.kind===y.DIRECTIVE_DEFINITION}function fr(e){return e.kind===y.SCALAR_TYPE_DEFINITION||e.kind===y.OBJECT_TYPE_DEFINITION||e.kind===y.INTERFACE_TYPE_DEFINITION||e.kind===y.UNION_TYPE_DEFINITION||e.kind===y.ENUM_TYPE_DEFINITION||e.kind===y.INPUT_OBJECT_TYPE_DEFINITION}function Go(e){return e.kind===y.SCHEMA_EXTENSION||Wn(e)}function Wn(e){return e.kind===y.SCALAR_TYPE_EXTENSION||e.kind===y.OBJECT_TYPE_EXTENSION||e.kind===y.INTERFACE_TYPE_EXTENSION||e.kind===y.UNION_TYPE_EXTENSION||e.kind===y.ENUM_TYPE_EXTENSION||e.kind===y.INPUT_OBJECT_TYPE_EXTENSION}function Ju(e){return{Document(t){for(const r of t.definitions)if(!Vo(r)){const n=r.kind===y.SCHEMA_DEFINITION||r.kind===y.SCHEMA_EXTENSION?"schema":'"'+r.name.value+'"';e.reportError(new x(`The ${n} definition is not executable.`,{nodes:r}))}return!1}}}function Wu(e){return{Field(t){const r=e.getParentType();if(r&&!e.getFieldDef()){const i=e.getSchema(),o=t.name.value;let a=ht("to use an inline fragment on",rh(i,r,o));a===""&&(a=ht(nh(r,o))),e.reportError(new x(`Cannot query field "${o}" on type "${r.name}".`+a,{nodes:t}))}}}}function rh(e,t,r){if(!ot(t))return[];const n=new Set,i=Object.create(null);for(const a of e.getPossibleTypes(t))if(a.getFields()[r]){n.add(a),i[a.name]=1;for(const s of a.getInterfaces()){var o;s.getFields()[r]&&(n.add(s),i[s.name]=((o=i[s.name])!==null&&o!==void 0?o:0)+1)}}return[...n].sort((a,s)=>{const u=i[s.name]-i[a.name];return u!==0?u:Ae(a)&&e.isSubType(a,s)?-1:Ae(s)&&e.isSubType(s,a)?1:Xr(a.name,s.name)}).map(a=>a.name)}function nh(e,t){if(fe(e)||Ae(e)){const r=Object.keys(e.getFields());return Nt(t,r)}return[]}function Yu(e){return{InlineFragment(t){const r=t.typeCondition;if(r){const n=Qe(e.getSchema(),r);if(n&&!st(n)){const i=ye(r);e.reportError(new x(`Fragment cannot condition on non composite type "${i}".`,{nodes:r}))}}},FragmentDefinition(t){const r=Qe(e.getSchema(),t.typeCondition);if(r&&!st(r)){const n=ye(t.typeCondition);e.reportError(new x(`Fragment "${t.name.value}" cannot condition on non composite type "${n}".`,{nodes:t.typeCondition}))}}}}function Ku(e){return{...Zu(e),Argument(t){const r=e.getArgument(),n=e.getFieldDef(),i=e.getParentType();if(!r&&n&&i){const o=t.name.value,a=n.args.map(u=>u.name),s=Nt(o,a);e.reportError(new x(`Unknown argument "${o}" on field "${i.name}.${n.name}".`+ht(s),{nodes:t}))}}}}function Zu(e){const t=Object.create(null),r=e.getSchema(),n=r?r.getDirectives():Bt;for(const a of n)t[a.name]=a.args.map(s=>s.name);const i=e.getDocument().definitions;for(const a of i)if(a.kind===y.DIRECTIVE_DEFINITION){var o;const s=(o=a.arguments)!==null&&o!==void 0?o:[];t[a.name.value]=s.map(u=>u.name.value)}return{Directive(a){const s=a.name.value,u=t[s];if(a.arguments&&u)for(const c of a.arguments){const l=c.name.value;if(!u.includes(l)){const f=Nt(l,u);e.reportError(new x(`Unknown argument "${l}" on directive "@${s}".`+ht(f),{nodes:c}))}}return!1}}}function Xo(e){const t=Object.create(null),r=e.getSchema(),n=r?r.getDirectives():Bt;for(const o of n)t[o.name]=o.locations;const i=e.getDocument().definitions;for(const o of i)o.kind===y.DIRECTIVE_DEFINITION&&(t[o.name.value]=o.locations.map(a=>a.value));return{Directive(o,a,s,u,c){const l=o.name.value,f=t[l];if(!f){e.reportError(new x(`Unknown directive "@${l}".`,{nodes:o}));return}const d=ih(c);d&&!f.includes(d)&&e.reportError(new x(`Directive "@${l}" may not be used on ${d}.`,{nodes:o}))}}}function ih(e){const t=e[e.length-1];switch("kind"in t||Ie(!1),t.kind){case y.OPERATION_DEFINITION:return oh(t.operation);case y.FIELD:return re.FIELD;case y.FRAGMENT_SPREAD:return re.FRAGMENT_SPREAD;case y.INLINE_FRAGMENT:return re.INLINE_FRAGMENT;case y.FRAGMENT_DEFINITION:return re.FRAGMENT_DEFINITION;case y.VARIABLE_DEFINITION:return re.VARIABLE_DEFINITION;case y.SCHEMA_DEFINITION:case y.SCHEMA_EXTENSION:return re.SCHEMA;case y.SCALAR_TYPE_DEFINITION:case y.SCALAR_TYPE_EXTENSION:return re.SCALAR;case y.OBJECT_TYPE_DEFINITION:case y.OBJECT_TYPE_EXTENSION:return re.OBJECT;case y.FIELD_DEFINITION:return re.FIELD_DEFINITION;case y.INTERFACE_TYPE_DEFINITION:case y.INTERFACE_TYPE_EXTENSION:return re.INTERFACE;case y.UNION_TYPE_DEFINITION:case y.UNION_TYPE_EXTENSION:return re.UNION;case y.ENUM_TYPE_DEFINITION:case y.ENUM_TYPE_EXTENSION:return re.ENUM;case y.ENUM_VALUE_DEFINITION:return re.ENUM_VALUE;case y.INPUT_OBJECT_TYPE_DEFINITION:case y.INPUT_OBJECT_TYPE_EXTENSION:return re.INPUT_OBJECT;case y.INPUT_VALUE_DEFINITION:{const r=e[e.length-3];return"kind"in r||Ie(!1),r.kind===y.INPUT_OBJECT_TYPE_DEFINITION?re.INPUT_FIELD_DEFINITION:re.ARGUMENT_DEFINITION}default:Ie(!1,"Unexpected kind: "+M(t.kind))}}function oh(e){switch(e){case Oe.QUERY:return re.QUERY;case Oe.MUTATION:return re.MUTATION;case Oe.SUBSCRIPTION:return re.SUBSCRIPTION}}function _u(e){return{FragmentSpread(t){const r=t.name.value;e.getFragment(r)||e.reportError(new x(`Unknown fragment "${r}".`,{nodes:t.name}))}}}function Jo(e){const t=e.getSchema(),r=t?t.getTypeMap():Object.create(null),n=Object.create(null);for(const o of e.getDocument().definitions)fr(o)&&(n[o.name.value]=!0);const i=[...Object.keys(r),...Object.keys(n)];return{NamedType(o,a,s,u,c){const l=o.name.value;if(!r[l]&&!n[l]){var f;const d=(f=c[2])!==null&&f!==void 0?f:s,v=d!=null&&ah(d);if(v&&fs.includes(l))return;const w=Nt(l,v?fs.concat(i):i);e.reportError(new x(`Unknown type "${l}".`+ht(w),{nodes:o}))}}}}const fs=[...Kr,...$r].map(e=>e.name);function ah(e){return"kind"in e&&(zo(e)||Go(e))}function $u(e){let t=0;return{Document(r){t=r.definitions.filter(n=>n.kind===y.OPERATION_DEFINITION).length},OperationDefinition(r){!r.name&&t>1&&e.reportError(new x("This anonymous operation must be the only defined operation.",{nodes:r}))}}}function ec(e){var t,r,n;const i=e.getSchema(),o=(t=(r=(n=i?.astNode)!==null&&n!==void 0?n:i?.getQueryType())!==null&&r!==void 0?r:i?.getMutationType())!==null&&t!==void 0?t:i?.getSubscriptionType();let a=0;return{SchemaDefinition(s){if(o){e.reportError(new x("Cannot define a new schema within a schema extension.",{nodes:s}));return}a>0&&e.reportError(new x("Must provide only one schema definition.",{nodes:s})),++a}}}function tc(e){const t=Object.create(null),r=[],n=Object.create(null);return{OperationDefinition:()=>!1,FragmentDefinition(o){return i(o),!1}};function i(o){if(t[o.name.value])return;const a=o.name.value;t[a]=!0;const s=e.getFragmentSpreads(o.selectionSet);if(s.length!==0){n[a]=r.length;for(const u of s){const c=u.name.value,l=n[c];if(r.push(u),l===void 0){const f=e.getFragment(c);f&&i(f)}else{const f=r.slice(l),d=f.slice(0,-1).map(v=>'"'+v.name.value+'"').join(", ");e.reportError(new x(`Cannot spread fragment "${c}" within itself`+(d!==""?` via ${d}.`:"."),{nodes:f}))}r.pop()}n[a]=void 0}}}function rc(e){let t=Object.create(null);return{OperationDefinition:{enter(){t=Object.create(null)},leave(r){const n=e.getRecursiveVariableUsages(r);for(const{node:i}of n){const o=i.name.value;t[o]!==!0&&e.reportError(new x(r.name?`Variable "$${o}" is not defined by operation "${r.name.value}".`:`Variable "$${o}" is not defined.`,{nodes:[i,r]}))}}},VariableDefinition(r){t[r.variable.name.value]=!0}}}function nc(e){const t=[],r=[];return{OperationDefinition(n){return t.push(n),!1},FragmentDefinition(n){return r.push(n),!1},Document:{leave(){const n=Object.create(null);for(const i of t)for(const o of e.getRecursivelyReferencedFragments(i))n[o.name.value]=!0;for(const i of r){const o=i.name.value;n[o]!==!0&&e.reportError(new x(`Fragment "${o}" is never used.`,{nodes:i}))}}}}}function ic(e){let t=[];return{OperationDefinition:{enter(){t=[]},leave(r){const n=Object.create(null),i=e.getRecursiveVariableUsages(r);for(const{node:o}of i)n[o.name.value]=!0;for(const o of t){const a=o.variable.name.value;n[a]!==!0&&e.reportError(new x(r.name?`Variable "$${a}" is never used in operation "${r.name.value}".`:`Variable "$${a}" is never used.`,{nodes:o}))}}},VariableDefinition(r){t.push(r)}}}function Yn(e){switch(e.kind){case y.OBJECT:return{...e,fields:sh(e.fields)};case y.LIST:return{...e,values:e.values.map(Yn)};case y.INT:case y.FLOAT:case y.STRING:case y.BOOLEAN:case y.NULL:case y.ENUM:case y.VARIABLE:return e}}function sh(e){return e.map(t=>({...t,value:Yn(t.value)})).sort((t,r)=>Xr(t.name.value,r.name.value))}function oc(e){return Array.isArray(e)?e.map(([t,r])=>`subfields "${t}" conflict because `+oc(r)).join(" and "):e}function ac(e){const t=new ph,r=new Map;return{SelectionSet(n){const i=uh(e,r,t,e.getParentType(),n);for(const[[o,a],s,u]of i){const c=oc(a);e.reportError(new x(`Fields "${o}" conflict because ${c}. Use different aliases on the fields to fetch both if this was intentional.`,{nodes:s.concat(u)}))}}}}function uh(e,t,r,n,i){const o=[],[a,s]=Nn(e,t,n,i);if(lh(e,o,t,r,a),s.length!==0)for(let u=0;u<s.length;u++){In(e,o,t,r,!1,a,s[u]);for(let c=u+1;c<s.length;c++)Sn(e,o,t,r,!1,s[u],s[c])}return o}function In(e,t,r,n,i,o,a){const s=e.getFragment(a);if(!s)return;const[u,c]=eo(e,r,s);if(o!==u){Wo(e,t,r,n,i,o,u);for(const l of c)n.has(l,a,i)||(n.add(l,a,i),In(e,t,r,n,i,o,l))}}function Sn(e,t,r,n,i,o,a){if(o===a||n.has(o,a,i))return;n.add(o,a,i);const s=e.getFragment(o),u=e.getFragment(a);if(!s||!u)return;const[c,l]=eo(e,r,s),[f,d]=eo(e,r,u);Wo(e,t,r,n,i,c,f);for(const v of d)Sn(e,t,r,n,i,o,v);for(const v of l)Sn(e,t,r,n,i,v,a)}function ch(e,t,r,n,i,o,a,s){const u=[],[c,l]=Nn(e,t,i,o),[f,d]=Nn(e,t,a,s);Wo(e,u,t,r,n,c,f);for(const v of d)In(e,u,t,r,n,c,v);for(const v of l)In(e,u,t,r,n,f,v);for(const v of l)for(const w of d)Sn(e,u,t,r,n,v,w);return u}function lh(e,t,r,n,i){for(const[o,a]of Object.entries(i))if(a.length>1)for(let s=0;s<a.length;s++)for(let u=s+1;u<a.length;u++){const c=sc(e,r,n,!1,o,a[s],a[u]);c&&t.push(c)}}function Wo(e,t,r,n,i,o,a){for(const[s,u]of Object.entries(o)){const c=a[s];if(c)for(const l of u)for(const f of c){const d=sc(e,r,n,i,s,l,f);d&&t.push(d)}}}function sc(e,t,r,n,i,o,a){const[s,u,c]=o,[l,f,d]=a,v=n||s!==l&&fe(s)&&fe(l);if(!v){const B=u.name.value,C=f.name.value;if(B!==C)return[[i,`"${B}" and "${C}" are different fields`],[u],[f]];if(ps(u)!==ps(f))return[[i,"they have differing arguments"],[u],[f]]}const w=c?.type,T=d?.type;if(w&&T&&$i(w,T))return[[i,`they return conflicting types "${M(w)}" and "${M(T)}"`],[u],[f]];const A=u.selectionSet,b=f.selectionSet;if(A&&b){const B=ch(e,t,r,v,xe(w),A,xe(T),b);return fh(B,i,u,f)}}function ps(e){var t;const r=(t=e.arguments)!==null&&t!==void 0?t:[],n={kind:y.OBJECT,fields:r.map(i=>({kind:y.OBJECT_FIELD,name:i.name,value:i.value}))};return ye(Yn(n))}function $i(e,t){return Ee(e)?Ee(t)?$i(e.ofType,t.ofType):!0:Ee(t)?!0:oe(e)?oe(t)?$i(e.ofType,t.ofType):!0:oe(t)?!0:at(e)||at(t)?e!==t:!1}function Nn(e,t,r,n){const i=t.get(n);if(i)return i;const o=Object.create(null),a=Object.create(null);uc(e,r,n,o,a);const s=[o,Object.keys(a)];return t.set(n,s),s}function eo(e,t,r){const n=t.get(r.selectionSet);if(n)return n;const i=Qe(e.getSchema(),r.typeCondition);return Nn(e,t,i,r.selectionSet)}function uc(e,t,r,n,i){for(const o of r.selections)switch(o.kind){case y.FIELD:{const a=o.name.value;let s;(fe(t)||Ae(t))&&(s=t.getFields()[a]);const u=o.alias?o.alias.value:a;n[u]||(n[u]=[]),n[u].push([t,o,s]);break}case y.FRAGMENT_SPREAD:i[o.name.value]=!0;break;case y.INLINE_FRAGMENT:{const a=o.typeCondition,s=a?Qe(e.getSchema(),a):t;uc(e,s,o.selectionSet,n,i);break}}}function fh(e,t,r,n){if(e.length>0)return[[t,e.map(([i])=>i)],[r,...e.map(([,i])=>i).flat()],[n,...e.map(([,,i])=>i).flat()]]}class ph{constructor(){this._data=new Map}has(t,r,n){var i;const[o,a]=t<r?[t,r]:[r,t],s=(i=this._data.get(o))===null||i===void 0?void 0:i.get(a);return s===void 0?!1:n?!0:n===s}add(t,r,n){const[i,o]=t<r?[t,r]:[r,t],a=this._data.get(i);a===void 0?this._data.set(i,new Map([[o,n]])):a.set(o,n)}}function cc(e){return{InlineFragment(t){const r=e.getType(),n=e.getParentType();if(st(r)&&st(n)&&!Zi(e.getSchema(),r,n)){const i=M(n),o=M(r);e.reportError(new x(`Fragment cannot be spread here as objects of type "${i}" can never be of type "${o}".`,{nodes:t}))}},FragmentSpread(t){const r=t.name.value,n=dh(e,r),i=e.getParentType();if(n&&i&&!Zi(e.getSchema(),n,i)){const o=M(i),a=M(n);e.reportError(new x(`Fragment "${r}" cannot be spread here as objects of type "${o}" can never be of type "${a}".`,{nodes:t}))}}}}function dh(e,t){const r=e.getFragment(t);if(r){const n=Qe(e.getSchema(),r.typeCondition);if(st(n))return n}}function lc(e){const t=e.getSchema(),r=Object.create(null);for(const i of e.getDocument().definitions)fr(i)&&(r[i.name.value]=i);return{ScalarTypeExtension:n,ObjectTypeExtension:n,InterfaceTypeExtension:n,UnionTypeExtension:n,EnumTypeExtension:n,InputObjectTypeExtension:n};function n(i){const o=i.name.value,a=r[o],s=t?.getType(o);let u;if(a?u=hh[a.kind]:s&&(u=Ah(s)),u){if(u!==i.kind){const c=vh(i.kind);e.reportError(new x(`Cannot extend non-${c} type "${o}".`,{nodes:a?[a,i]:i}))}}else{const c=Object.keys({...r,...t?.getTypeMap()}),l=Nt(o,c);e.reportError(new x(`Cannot extend type "${o}" because it is not defined.`+ht(l),{nodes:i.name}))}}}const hh={[y.SCALAR_TYPE_DEFINITION]:y.SCALAR_TYPE_EXTENSION,[y.OBJECT_TYPE_DEFINITION]:y.OBJECT_TYPE_EXTENSION,[y.INTERFACE_TYPE_DEFINITION]:y.INTERFACE_TYPE_EXTENSION,[y.UNION_TYPE_DEFINITION]:y.UNION_TYPE_EXTENSION,[y.ENUM_TYPE_DEFINITION]:y.ENUM_TYPE_EXTENSION,[y.INPUT_OBJECT_TYPE_DEFINITION]:y.INPUT_OBJECT_TYPE_EXTENSION};function Ah(e){if(ze(e))return y.SCALAR_TYPE_EXTENSION;if(fe(e))return y.OBJECT_TYPE_EXTENSION;if(Ae(e))return y.INTERFACE_TYPE_EXTENSION;if(Pe(e))return y.UNION_TYPE_EXTENSION;if(Ce(e))return y.ENUM_TYPE_EXTENSION;if(be(e))return y.INPUT_OBJECT_TYPE_EXTENSION;Ie(!1,"Unexpected type: "+M(e))}function vh(e){switch(e){case y.SCALAR_TYPE_EXTENSION:return"scalar";case y.OBJECT_TYPE_EXTENSION:return"object";case y.INTERFACE_TYPE_EXTENSION:return"interface";case y.UNION_TYPE_EXTENSION:return"union";case y.ENUM_TYPE_EXTENSION:return"enum";case y.INPUT_OBJECT_TYPE_EXTENSION:return"input object";default:Ie(!1,"Unexpected kind: "+M(e))}}function fc(e){return{...pc(e),Field:{leave(t){var r;const n=e.getFieldDef();if(!n)return!1;const i=new Set((r=t.arguments)===null||r===void 0?void 0:r.map(o=>o.name.value));for(const o of n.args)if(!i.has(o.name)&&Ct(o)){const a=M(o.type);e.reportError(new x(`Field "${n.name}" argument "${o.name}" of type "${a}" is required, but it was not provided.`,{nodes:t}))}}}}}function pc(e){var t;const r=Object.create(null),n=e.getSchema(),i=(t=n?.getDirectives())!==null&&t!==void 0?t:Bt;for(const s of i)r[s.name]=At(s.args.filter(Ct),u=>u.name);const o=e.getDocument().definitions;for(const s of o)if(s.kind===y.DIRECTIVE_DEFINITION){var a;const u=(a=s.arguments)!==null&&a!==void 0?a:[];r[s.name.value]=At(u.filter(gh),c=>c.name.value)}return{Directive:{leave(s){const u=s.name.value,c=r[u];if(c){var l;const f=(l=s.arguments)!==null&&l!==void 0?l:[],d=new Set(f.map(v=>v.name.value));for(const[v,w]of Object.entries(c))if(!d.has(v)){const T=Jr(w.type)?M(w.type):ye(w.type);e.reportError(new x(`Directive "@${u}" argument "${v}" of type "${T}" is required, but it was not provided.`,{nodes:s}))}}}}}}function gh(e){return e.type.kind===y.NON_NULL_TYPE&&e.defaultValue==null}function dc(e){return{Field(t){const r=e.getType(),n=t.selectionSet;if(r){if(at(xe(r))){if(n){const i=t.name.value,o=M(r);e.reportError(new x(`Field "${i}" must not have a selection since type "${o}" has no subfields.`,{nodes:n}))}}else if(!n){const i=t.name.value,o=M(r);e.reportError(new x(`Field "${i}" of type "${o}" must have a selection of subfields. Did you mean "${i} { ... }"?`,{nodes:t}))}}}}}function hc(e){return e.map(t=>typeof t=="number"?"["+t.toString()+"]":"."+t).join("")}function ir(e,t,r){return{prev:e,key:t,typename:r}}function Ue(e){const t=[];let r=e;for(;r;)t.push(r.key),r=r.prev;return t.reverse()}function Ac(e,t,r=mh){return Pr(e,t,r,void 0)}function mh(e,t,r){let n="Invalid value "+M(t);throw e.length>0&&(n+=` at "value${hc(e)}"`),r.message=n+": "+r.message,r}function Pr(e,t,r,n){if(oe(t)){if(e!=null)return Pr(e,t.ofType,r,n);r(Ue(n),e,new x(`Expected non-nullable type "${M(t)}" not to be null.`));return}if(e==null)return null;if(Ee(t)){const i=t.ofType;return Po(e)?Array.from(e,(o,a)=>{const s=ir(n,a,void 0);return Pr(o,i,r,s)}):[Pr(e,i,r,n)]}if(be(t)){if(!He(e)){r(Ue(n),e,new x(`Expected type "${t.name}" to be an object.`));return}const i={},o=t.getFields();for(const a of Object.values(o)){const s=e[a.name];if(s===void 0){if(a.defaultValue!==void 0)i[a.name]=a.defaultValue;else if(oe(a.type)){const u=M(a.type);r(Ue(n),e,new x(`Field "${a.name}" of required type "${u}" was not provided.`))}continue}i[a.name]=Pr(s,a.type,r,ir(n,a.name,t.name))}for(const a of Object.keys(e))if(!o[a]){const s=Nt(a,Object.keys(t.getFields()));r(Ue(n),e,new x(`Field "${a}" is not defined by type "${t.name}".`+ht(s)))}return i}if(at(t)){let i;try{i=t.parseValue(e)}catch(o){o instanceof x?r(Ue(n),e,o):r(Ue(n),e,new x(`Expected type "${t.name}". `+o.message,{originalError:o}));return}return i===void 0&&r(Ue(n),e,new x(`Expected type "${t.name}".`)),i}Ie(!1,"Unexpected input type: "+M(t))}function it(e,t,r){if(e){if(e.kind===y.VARIABLE){const n=e.name.value;if(r==null||r[n]===void 0)return;const i=r[n];return i===null&&oe(t)?void 0:i}if(oe(t))return e.kind===y.NULL?void 0:it(e,t.ofType,r);if(e.kind===y.NULL)return null;if(Ee(t)){const n=t.ofType;if(e.kind===y.LIST){const o=[];for(const a of e.values)if(ds(a,r)){if(oe(n))return;o.push(null)}else{const s=it(a,n,r);if(s===void 0)return;o.push(s)}return o}const i=it(e,n,r);return i===void 0?void 0:[i]}if(be(t)){if(e.kind!==y.OBJECT)return;const n=Object.create(null),i=At(e.fields,o=>o.name.value);for(const o of Object.values(t.getFields())){const a=i[o.name];if(!a||ds(a.value,r)){if(o.defaultValue!==void 0)n[o.name]=o.defaultValue;else if(oe(o.type))return;continue}const s=it(a.value,o.type,r);if(s===void 0)return;n[o.name]=s}return n}if(at(t)){let n;try{n=t.parseLiteral(e,r)}catch{return}return n===void 0?void 0:n}Ie(!1,"Unexpected input type: "+M(t))}}function ds(e,t){return e.kind===y.VARIABLE&&(t==null||t[e.name.value]===void 0)}function vc(e,t,r,n){const i=[],o=n?.maxErrors;try{const a=yh(e,t,r,s=>{if(o!=null&&i.length>=o)throw new x("Too many errors processing variables, error limit reached. Execution aborted.");i.push(s)});if(i.length===0)return{coerced:a}}catch(a){i.push(a)}return{errors:i}}function yh(e,t,r,n){const i={};for(const o of t){const a=o.variable.name.value,s=Qe(e,o.type);if(!Me(s)){const c=ye(o.type);n(new x(`Variable "$${a}" expected value of type "${c}" which cannot be used as an input type.`,{nodes:o.type}));continue}if(!gc(r,a)){if(o.defaultValue)i[a]=it(o.defaultValue,s);else if(oe(s)){const c=M(s);n(new x(`Variable "$${a}" of required type "${c}" was not provided.`,{nodes:o}))}continue}const u=r[a];if(u===null&&oe(s)){const c=M(s);n(new x(`Variable "$${a}" of non-null type "${c}" must not be null.`,{nodes:o}));continue}i[a]=Ac(u,s,(c,l,f)=>{let d=`Variable "$${a}" got invalid value `+M(l);c.length>0&&(d+=` at "${a}${hc(c)}"`),n(new x(d+"; "+f.message,{nodes:o,originalError:f.originalError}))})}return i}function Kn(e,t,r){var n;const i={},o=(n=t.arguments)!==null&&n!==void 0?n:[],a=At(o,s=>s.name.value);for(const s of e.args){const u=s.name,c=s.type,l=a[u];if(!l){if(s.defaultValue!==void 0)i[u]=s.defaultValue;else if(oe(c))throw new x(`Argument "${u}" of required type "${M(c)}" was not provided.`,{nodes:t});continue}const f=l.value;let d=f.kind===y.NULL;if(f.kind===y.VARIABLE){const w=f.name.value;if(r==null||!gc(r,w)){if(s.defaultValue!==void 0)i[u]=s.defaultValue;else if(oe(c))throw new x(`Argument "${u}" of required type "${M(c)}" was provided the variable "$${w}" which was not provided a runtime value.`,{nodes:f});continue}d=r[w]==null}if(d&&oe(c))throw new x(`Argument "${u}" of non-null type "${M(c)}" must not be null.`,{nodes:f});const v=it(f,c,r);if(v===void 0)throw new x(`Argument "${u}" has invalid value ${ye(f)}.`,{nodes:f});i[u]=v}return i}function Ur(e,t,r){var n;const i=(n=t.directives)===null||n===void 0?void 0:n.find(o=>o.name.value===e.name);if(i)return Kn(e,i,r)}function gc(e,t){return Object.prototype.hasOwnProperty.call(e,t)}function Yo(e,t,r,n,i){const o=new Map;return Cn(e,t,r,n,i,o,new Set),o}function Eh(e,t,r,n,i){const o=new Map,a=new Set;for(const s of i)s.selectionSet&&Cn(e,t,r,n,s.selectionSet,o,a);return o}function Cn(e,t,r,n,i,o,a){for(const s of i.selections)switch(s.kind){case y.FIELD:{if(!Ui(r,s))continue;const u=bh(s),c=o.get(u);c!==void 0?c.push(s):o.set(u,[s]);break}case y.INLINE_FRAGMENT:{if(!Ui(r,s)||!hs(e,s,n))continue;Cn(e,t,r,n,s.selectionSet,o,a);break}case y.FRAGMENT_SPREAD:{const u=s.name.value;if(a.has(u)||!Ui(r,s))continue;a.add(u);const c=t[u];if(!c||!hs(e,c,n))continue;Cn(e,t,r,n,c.selectionSet,o,a);break}}}function Ui(e,t){const r=Ur(No,t,e);if(r?.if===!0)return!1;const n=Ur(So,t,e);return n?.if!==!1}function hs(e,t,r){const n=t.typeCondition;if(!n)return!0;const i=Qe(e,n);return i===r?!0:ot(i)?e.isSubType(i,r):!1}function bh(e){return e.alias?e.alias.value:e.name.value}function mc(e){return{OperationDefinition(t){if(t.operation==="subscription"){const r=e.getSchema(),n=r.getSubscriptionType();if(n){const i=t.name?t.name.value:null,o=Object.create(null),a=e.getDocument(),s=Object.create(null);for(const c of a.definitions)c.kind===y.FRAGMENT_DEFINITION&&(s[c.name.value]=c);const u=Yo(r,s,o,n,t.selectionSet);if(u.size>1){const f=[...u.values()].slice(1).flat();e.reportError(new x(i!=null?`Subscription "${i}" must select only one top level field.`:"Anonymous Subscription must select only one top level field.",{nodes:f}))}for(const c of u.values())c[0].name.value.startsWith("__")&&e.reportError(new x(i!=null?`Subscription "${i}" must not select an introspection top level field.`:"Anonymous Subscription must not select an introspection top level field.",{nodes:c}))}}}}}function Ko(e,t){const r=new Map;for(const n of e){const i=t(n),o=r.get(i);o===void 0?r.set(i,[n]):o.push(n)}return r}function yc(e){return{DirectiveDefinition(n){var i;const o=(i=n.arguments)!==null&&i!==void 0?i:[];return r(`@${n.name.value}`,o)},InterfaceTypeDefinition:t,InterfaceTypeExtension:t,ObjectTypeDefinition:t,ObjectTypeExtension:t};function t(n){var i;const o=n.name.value,a=(i=n.fields)!==null&&i!==void 0?i:[];for(const u of a){var s;const c=u.name.value,l=(s=u.arguments)!==null&&s!==void 0?s:[];r(`${o}.${c}`,l)}return!1}function r(n,i){const o=Ko(i,a=>a.name.value);for(const[a,s]of o)s.length>1&&e.reportError(new x(`Argument "${n}(${a}:)" can only be defined once.`,{nodes:s.map(u=>u.name)}));return!1}}function Zo(e){return{Field:t,Directive:t};function t(r){var n;const i=(n=r.arguments)!==null&&n!==void 0?n:[],o=Ko(i,a=>a.name.value);for(const[a,s]of o)s.length>1&&e.reportError(new x(`There can be only one argument named "${a}".`,{nodes:s.map(u=>u.name)}))}}function Ec(e){const t=Object.create(null),r=e.getSchema();return{DirectiveDefinition(n){const i=n.name.value;if(r!=null&&r.getDirective(i)){e.reportError(new x(`Directive "@${i}" already exists in the schema. It cannot be redefined.`,{nodes:n.name}));return}return t[i]?e.reportError(new x(`There can be only one directive named "@${i}".`,{nodes:[t[i],n.name]})):t[i]=n.name,!1}}}function _o(e){const t=Object.create(null),r=e.getSchema(),n=r?r.getDirectives():Bt;for(const s of n)t[s.name]=!s.isRepeatable;const i=e.getDocument().definitions;for(const s of i)s.kind===y.DIRECTIVE_DEFINITION&&(t[s.name.value]=!s.repeatable);const o=Object.create(null),a=Object.create(null);return{enter(s){if(!("directives"in s)||!s.directives)return;let u;if(s.kind===y.SCHEMA_DEFINITION||s.kind===y.SCHEMA_EXTENSION)u=o;else if(fr(s)||Wn(s)){const c=s.name.value;u=a[c],u===void 0&&(a[c]=u=Object.create(null))}else u=Object.create(null);for(const c of s.directives){const l=c.name.value;t[l]&&(u[l]?e.reportError(new x(`The directive "@${l}" can only be used once at this location.`,{nodes:[u[l],c]})):u[l]=c)}}}}function bc(e){const t=e.getSchema(),r=t?t.getTypeMap():Object.create(null),n=Object.create(null);return{EnumTypeDefinition:i,EnumTypeExtension:i};function i(o){var a;const s=o.name.value;n[s]||(n[s]=Object.create(null));const u=(a=o.values)!==null&&a!==void 0?a:[],c=n[s];for(const l of u){const f=l.name.value,d=r[s];Ce(d)&&d.getValue(f)?e.reportError(new x(`Enum value "${s}.${f}" already exists in the schema. It cannot also be defined in this type extension.`,{nodes:l.name})):c[f]?e.reportError(new x(`Enum value "${s}.${f}" can only be defined once.`,{nodes:[c[f],l.name]})):c[f]=l.name}return!1}}function Dc(e){const t=e.getSchema(),r=t?t.getTypeMap():Object.create(null),n=Object.create(null);return{InputObjectTypeDefinition:i,InputObjectTypeExtension:i,InterfaceTypeDefinition:i,InterfaceTypeExtension:i,ObjectTypeDefinition:i,ObjectTypeExtension:i};function i(o){var a;const s=o.name.value;n[s]||(n[s]=Object.create(null));const u=(a=o.fields)!==null&&a!==void 0?a:[],c=n[s];for(const l of u){const f=l.name.value;Dh(r[s],f)?e.reportError(new x(`Field "${s}.${f}" already exists in the schema. It cannot also be defined in this type extension.`,{nodes:l.name})):c[f]?e.reportError(new x(`Field "${s}.${f}" can only be defined once.`,{nodes:[c[f],l.name]})):c[f]=l.name}return!1}}function Dh(e,t){return fe(e)||Ae(e)||be(e)?e.getFields()[t]!=null:!1}function Tc(e){const t=Object.create(null);return{OperationDefinition:()=>!1,FragmentDefinition(r){const n=r.name.value;return t[n]?e.reportError(new x(`There can be only one fragment named "${n}".`,{nodes:[t[n],r.name]})):t[n]=r.name,!1}}}function $o(e){const t=[];let r=Object.create(null);return{ObjectValue:{enter(){t.push(r),r=Object.create(null)},leave(){const n=t.pop();n||Ie(!1),r=n}},ObjectField(n){const i=n.name.value;r[i]?e.reportError(new x(`There can be only one input field named "${i}".`,{nodes:[r[i],n.name]})):r[i]=n.name}}}function wc(e){const t=Object.create(null);return{OperationDefinition(r){const n=r.name;return n&&(t[n.value]?e.reportError(new x(`There can be only one operation named "${n.value}".`,{nodes:[t[n.value],n]})):t[n.value]=n),!1},FragmentDefinition:()=>!1}}function Ic(e){const t=e.getSchema(),r=Object.create(null),n=t?{query:t.getQueryType(),mutation:t.getMutationType(),subscription:t.getSubscriptionType()}:{};return{SchemaDefinition:i,SchemaExtension:i};function i(o){var a;const s=(a=o.operationTypes)!==null&&a!==void 0?a:[];for(const u of s){const c=u.operation,l=r[c];n[c]?e.reportError(new x(`Type for ${c} already defined in the schema. It cannot be redefined.`,{nodes:u})):l?e.reportError(new x(`There can be only one ${c} type in schema.`,{nodes:[l,u]})):r[c]=u}return!1}}function Sc(e){const t=Object.create(null),r=e.getSchema();return{ScalarTypeDefinition:n,ObjectTypeDefinition:n,InterfaceTypeDefinition:n,UnionTypeDefinition:n,EnumTypeDefinition:n,InputObjectTypeDefinition:n};function n(i){const o=i.name.value;if(r!=null&&r.getType(o)){e.reportError(new x(`Type "${o}" already exists in the schema. It cannot also be defined in this type definition.`,{nodes:i.name}));return}return t[o]?e.reportError(new x(`There can be only one type named "${o}".`,{nodes:[t[o],i.name]})):t[o]=i.name,!1}}function Nc(e){return{OperationDefinition(t){var r;const n=(r=t.variableDefinitions)!==null&&r!==void 0?r:[],i=Ko(n,o=>o.variable.name.value);for(const[o,a]of i)a.length>1&&e.reportError(new x(`There can be only one variable named "$${o}".`,{nodes:a.map(s=>s.variable.name)}))}}}function Cc(e){return{ListValue(t){const r=Do(e.getParentInputType());if(!Ee(r))return Ft(e,t),!1},ObjectValue(t){const r=xe(e.getInputType());if(!be(r))return Ft(e,t),!1;const n=At(t.fields,i=>i.name.value);for(const i of Object.values(r.getFields()))if(!n[i.name]&&Vn(i)){const a=M(i.type);e.reportError(new x(`Field "${r.name}.${i.name}" of required type "${a}" was not provided.`,{nodes:t}))}},ObjectField(t){const r=xe(e.getParentInputType());if(!e.getInputType()&&be(r)){const i=Nt(t.name.value,Object.keys(r.getFields()));e.reportError(new x(`Field "${t.name.value}" is not defined by type "${r.name}".`+ht(i),{nodes:t}))}},NullValue(t){const r=e.getInputType();oe(r)&&e.reportError(new x(`Expected value of type "${M(r)}", found ${ye(t)}.`,{nodes:t}))},EnumValue:t=>Ft(e,t),IntValue:t=>Ft(e,t),FloatValue:t=>Ft(e,t),StringValue:t=>Ft(e,t),BooleanValue:t=>Ft(e,t)}}function Ft(e,t){const r=e.getInputType();if(!r)return;const n=xe(r);if(!at(n)){const i=M(r);e.reportError(new x(`Expected value of type "${i}", found ${ye(t)}.`,{nodes:t}));return}try{if(n.parseLiteral(t,void 0)===void 0){const o=M(r);e.reportError(new x(`Expected value of type "${o}", found ${ye(t)}.`,{nodes:t}))}}catch(i){const o=M(r);i instanceof x?e.reportError(i):e.reportError(new x(`Expected value of type "${o}", found ${ye(t)}; `+i.message,{nodes:t,originalError:i}))}}function Bc(e){return{VariableDefinition(t){const r=Qe(e.getSchema(),t.type);if(r!==void 0&&!Me(r)){const n=t.variable.name.value,i=ye(t.type);e.reportError(new x(`Variable "$${n}" cannot be non-input type "${i}".`,{nodes:t.type}))}}}}function Oc(e){let t=Object.create(null);return{OperationDefinition:{enter(){t=Object.create(null)},leave(r){const n=e.getRecursiveVariableUsages(r);for(const{node:i,type:o,defaultValue:a}of n){const s=i.name.value,u=t[s];if(u&&o){const c=e.getSchema(),l=Qe(c,u.type);if(l&&!Th(c,l,u.defaultValue,o,a)){const f=M(l),d=M(o);e.reportError(new x(`Variable "$${s}" of type "${f}" used in position expecting type "${d}".`,{nodes:[u,i]}))}}}}},VariableDefinition(r){t[r.variable.name.value]=r}}}function Th(e,t,r,n,i){if(oe(n)&&!oe(t)){if(!(r!=null&&r.kind!==y.NULL)&&!(i!==void 0))return!1;const s=n.ofType;return Ut(e,t,s)}return Ut(e,t,n)}const Pc=Object.freeze([Ju,wc,$u,mc,Jo,Yu,Bc,dc,Wu,Tc,_u,nc,cc,tc,Nc,rc,ic,Xo,_o,Ku,Zo,Cc,fc,Oc,ac,$o]),wh=Object.freeze([ec,Ic,Sc,bc,Dc,yc,Ec,Jo,Xo,_o,lc,Zu,Zo,$o,pc]);class Rc{constructor(t,r){this._ast=t,this._fragments=void 0,this._fragmentSpreads=new Map,this._recursivelyReferencedFragments=new Map,this._onError=r}get[Symbol.toStringTag](){return"ASTValidationContext"}reportError(t){this._onError(t)}getDocument(){return this._ast}getFragment(t){let r;if(this._fragments)r=this._fragments;else{r=Object.create(null);for(const n of this.getDocument().definitions)n.kind===y.FRAGMENT_DEFINITION&&(r[n.name.value]=n);this._fragments=r}return r[t]}getFragmentSpreads(t){let r=this._fragmentSpreads.get(t);if(!r){r=[];const n=[t];let i;for(;i=n.pop();)for(const o of i.selections)o.kind===y.FRAGMENT_SPREAD?r.push(o):o.selectionSet&&n.push(o.selectionSet);this._fragmentSpreads.set(t,r)}return r}getRecursivelyReferencedFragments(t){let r=this._recursivelyReferencedFragments.get(t);if(!r){r=[];const n=Object.create(null),i=[t.selectionSet];let o;for(;o=i.pop();)for(const a of this.getFragmentSpreads(o)){const s=a.name.value;if(n[s]!==!0){n[s]=!0;const u=this.getFragment(s);u&&(r.push(u),i.push(u.selectionSet))}}this._recursivelyReferencedFragments.set(t,r)}return r}}class Ih extends Rc{constructor(t,r,n){super(t,n),this._schema=r}get[Symbol.toStringTag](){return"SDLValidationContext"}getSchema(){return this._schema}}class kc extends Rc{constructor(t,r,n,i){super(r,i),this._schema=t,this._typeInfo=n,this._variableUsages=new Map,this._recursiveVariableUsages=new Map}get[Symbol.toStringTag](){return"ValidationContext"}getSchema(){return this._schema}getVariableUsages(t){let r=this._variableUsages.get(t);if(!r){const n=[],i=new qo(this._schema);cr(t,Ho(i,{VariableDefinition:()=>!1,Variable(o){n.push({node:o,type:i.getInputType(),defaultValue:i.getDefaultValue()})}})),r=n,this._variableUsages.set(t,r)}return r}getRecursiveVariableUsages(t){let r=this._recursiveVariableUsages.get(t);if(!r){r=this.getVariableUsages(t);for(const n of this.getRecursivelyReferencedFragments(t))r=r.concat(this.getVariableUsages(n));this._recursiveVariableUsages.set(t,r)}return r}getType(){return this._typeInfo.getType()}getParentType(){return this._typeInfo.getParentType()}getInputType(){return this._typeInfo.getInputType()}getParentInputType(){return this._typeInfo.getParentInputType()}getFieldDef(){return this._typeInfo.getFieldDef()}getDirective(){return this._typeInfo.getDirective()}getArgument(){return this._typeInfo.getArgument()}getEnumValue(){return this._typeInfo.getEnumValue()}}function Lc(e,t,r=Pc,n,i=new qo(e)){var o;const a=(o=n?.maxErrors)!==null&&o!==void 0?o:100;t||ue(!1,"Must provide document."),Uo(e);const s=Object.freeze({}),u=[],c=new kc(e,t,i,f=>{if(u.length>=a)throw u.push(new x("Too many validation errors, error limit reached. Validation aborted.")),s;u.push(f)}),l=Eo(r.map(f=>f(c)));try{cr(t,Ho(i,l))}catch(f){if(f!==s)throw f}return u}function xc(e,t,r=wh){const n=[],i=new Ih(e,t,a=>{n.push(a)}),o=r.map(a=>a(i));return cr(e,Eo(o)),n}function Sh(e){const t=xc(e);if(t.length!==0)throw new Error(t.map(r=>r.message).join(`

`))}function Nh(e,t){const r=xc(e,t);if(r.length!==0)throw new Error(r.map(n=>n.message).join(`

`))}function Ch(e){let t;return function(n,i,o){t===void 0&&(t=new WeakMap);let a=t.get(n);a===void 0&&(a=new WeakMap,t.set(n,a));let s=a.get(i);s===void 0&&(s=new WeakMap,a.set(i,s));let u=s.get(o);return u===void 0&&(u=e(n,i,o),s.set(o,u)),u}}function Bh(e){return Promise.all(Object.values(e)).then(t=>{const r=Object.create(null);for(const[n,i]of Object.keys(e).entries())r[i]=t[n];return r})}function Oh(e,t,r){let n=r;for(const i of e)n=qe(n)?n.then(o=>t(o,i)):t(n,i);return n}function Ph(e){return e instanceof Error?e:new Rh(e)}class Rh extends Error{constructor(t){super("Unexpected error value: "+M(t)),this.name="NonErrorThrown",this.thrownValue=t}}function or(e,t,r){var n;const i=Ph(e);return kh(i)?i:new x(i.message,{nodes:(n=i.nodes)!==null&&n!==void 0?n:t,source:i.source,positions:i.positions,path:r,originalError:i})}function kh(e){return Array.isArray(e.path)}const Lh=Ch((e,t,r)=>Eh(e.schema,e.fragments,e.variableValues,t,r));function Zn(e){arguments.length<2||ue(!1,"graphql@16 dropped long-deprecated support for positional arguments, please pass an object instead.");const{schema:t,document:r,variableValues:n,rootValue:i}=e;Mc(t,r,n);const o=Qc(e);if(!("schema"in o))return{errors:o};try{const{operation:a}=o,s=xh(o,a,i);return qe(s)?s.then(u=>dn(u,o.errors),u=>(o.errors.push(u),dn(null,o.errors))):dn(s,o.errors)}catch(a){return o.errors.push(a),dn(null,o.errors)}}function Fc(e){const t=Zn(e);if(qe(t))throw new Error("GraphQL execution failed to complete synchronously.");return t}function dn(e,t){return t.length===0?{data:e}:{errors:t,data:e}}function Mc(e,t,r){t||ue(!1,"Must provide document."),Uo(e),r==null||He(r)||ue(!1,"Variables must be provided as an Object where each property is a variable value. Perhaps look to see if an unparsed JSON string was provided.")}function Qc(e){var t,r;const{schema:n,document:i,rootValue:o,contextValue:a,variableValues:s,operationName:u,fieldResolver:c,typeResolver:l,subscribeFieldResolver:f}=e;let d;const v=Object.create(null);for(const A of i.definitions)switch(A.kind){case y.OPERATION_DEFINITION:if(u==null){if(d!==void 0)return[new x("Must provide operation name if query contains multiple operations.")];d=A}else((t=A.name)===null||t===void 0?void 0:t.value)===u&&(d=A);break;case y.FRAGMENT_DEFINITION:v[A.name.value]=A;break}if(!d)return u!=null?[new x(`Unknown operation named "${u}".`)]:[new x("Must provide an operation.")];const w=(r=d.variableDefinitions)!==null&&r!==void 0?r:[],T=vc(n,w,s??{},{maxErrors:50});return T.errors?T.errors:{schema:n,fragments:v,rootValue:o,contextValue:a,operation:d,variableValues:T.coerced,fieldResolver:c??ro,typeResolver:l??qc,subscribeFieldResolver:f??ro,errors:[]}}function xh(e,t,r){const n=e.schema.getRootType(t.operation);if(n==null)throw new x(`Schema is not configured to execute ${t.operation} operation.`,{nodes:t});const i=Yo(e.schema,e.fragments,e.variableValues,n,t.selectionSet),o=void 0;switch(t.operation){case Oe.QUERY:return Bn(e,n,r,o,i);case Oe.MUTATION:return Fh(e,n,r,o,i);case Oe.SUBSCRIPTION:return Bn(e,n,r,o,i)}}function Fh(e,t,r,n,i){return Oh(i.entries(),(o,[a,s])=>{const u=ir(n,a,t.name),c=Uc(e,t,r,s,u);return c===void 0?o:qe(c)?c.then(l=>(o[a]=l,o)):(o[a]=c,o)},Object.create(null))}function Bn(e,t,r,n,i){const o=Object.create(null);let a=!1;for(const[s,u]of i.entries()){const c=ir(n,s,t.name),l=Uc(e,t,r,u,c);l!==void 0&&(o[s]=l,qe(l)&&(a=!0))}return a?Bh(o):o}function Uc(e,t,r,n,i){var o;const a=Hc(e.schema,t,n[0]);if(!a)return;const s=a.type,u=(o=a.resolve)!==null&&o!==void 0?o:e.fieldResolver,c=jc(e,a,n,t,i);try{const l=Kn(a,n[0],e.variableValues),f=e.contextValue,d=u(r,l,f,c);let v;return qe(d)?v=d.then(w=>jr(e,s,n,c,i,w)):v=jr(e,s,n,c,i,d),qe(v)?v.then(void 0,w=>{const T=or(w,n,Ue(i));return On(T,s,e)}):v}catch(l){const f=or(l,n,Ue(i));return On(f,s,e)}}function jc(e,t,r,n,i){return{fieldName:t.name,fieldNodes:r,returnType:t.type,parentType:n,path:i,schema:e.schema,fragments:e.fragments,rootValue:e.rootValue,operation:e.operation,variableValues:e.variableValues}}function On(e,t,r){if(oe(t))throw e;return r.errors.push(e),null}function jr(e,t,r,n,i,o){if(o instanceof Error)throw o;if(oe(t)){const a=jr(e,t.ofType,r,n,i,o);if(a===null)throw new Error(`Cannot return null for non-nullable field ${n.parentType.name}.${n.fieldName}.`);return a}if(o==null)return null;if(Ee(t))return Mh(e,t,r,n,i,o);if(at(t))return Qh(t,o);if(ot(t))return Uh(e,t,r,n,i,o);if(fe(t))return to(e,t,r,n,i,o);Ie(!1,"Cannot complete value of unexpected output type: "+M(t))}function Mh(e,t,r,n,i,o){if(!Po(o))throw new x(`Expected Iterable, but did not find one for field "${n.parentType.name}.${n.fieldName}".`);const a=t.ofType;let s=!1;const u=Array.from(o,(c,l)=>{const f=ir(i,l,void 0);try{let d;return qe(c)?d=c.then(v=>jr(e,a,r,n,f,v)):d=jr(e,a,r,n,f,c),qe(d)?(s=!0,d.then(void 0,v=>{const w=or(v,r,Ue(f));return On(w,a,e)})):d}catch(d){const v=or(d,r,Ue(f));return On(v,a,e)}});return s?Promise.all(u):u}function Qh(e,t){const r=e.serialize(t);if(r==null)throw new Error(`Expected \`${M(e)}.serialize(${M(t)})\` to return non-nullable value, returned: ${M(r)}`);return r}function Uh(e,t,r,n,i,o){var a;const s=(a=t.resolveType)!==null&&a!==void 0?a:e.typeResolver,u=e.contextValue,c=s(o,u,n,t);return qe(c)?c.then(l=>to(e,As(l,e,t,r,n,o),r,n,i,o)):to(e,As(c,e,t,r,n,o),r,n,i,o)}function As(e,t,r,n,i,o){if(e==null)throw new x(`Abstract type "${r.name}" must resolve to an Object type at runtime for field "${i.parentType.name}.${i.fieldName}". Either the "${r.name}" type should provide a "resolveType" function or each possible type should provide an "isTypeOf" function.`,n);if(fe(e))throw new x("Support for returning GraphQLObjectType from resolveType was removed in graphql-js@16.0.0 please return type name instead.");if(typeof e!="string")throw new x(`Abstract type "${r.name}" must resolve to an Object type at runtime for field "${i.parentType.name}.${i.fieldName}" with value ${M(o)}, received "${M(e)}".`);const a=t.schema.getType(e);if(a==null)throw new x(`Abstract type "${r.name}" was resolved to a type "${e}" that does not exist inside the schema.`,{nodes:n});if(!fe(a))throw new x(`Abstract type "${r.name}" was resolved to a non-object type "${e}".`,{nodes:n});if(!t.schema.isSubType(r,a))throw new x(`Runtime Object type "${a.name}" is not a possible type for "${r.name}".`,{nodes:n});return a}function to(e,t,r,n,i,o){const a=Lh(e,t,r);if(t.isTypeOf){const s=t.isTypeOf(o,e.contextValue,n);if(qe(s))return s.then(u=>{if(!u)throw vs(t,o,r);return Bn(e,t,o,i,a)});if(!s)throw vs(t,o,r)}return Bn(e,t,o,i,a)}function vs(e,t,r){return new x(`Expected value of type "${e.name}" but got: ${M(t)}.`,{nodes:r})}const qc=function(e,t,r,n){if(He(e)&&typeof e.__typename=="string")return e.__typename;const i=r.schema.getPossibleTypes(n),o=[];for(let a=0;a<i.length;a++){const s=i[a];if(s.isTypeOf){const u=s.isTypeOf(e,t,r);if(qe(u))o[a]=u;else if(u)return s.name}}if(o.length)return Promise.all(o).then(a=>{for(let s=0;s<a.length;s++)if(a[s])return i[s].name})},ro=function(e,t,r,n){if(He(e)||typeof e=="function"){const i=e[n.fieldName];return typeof i=="function"?e[n.fieldName](t,r,n):i}};function Hc(e,t,r){const n=r.name.value;return n===Fr.name&&e.getQueryType()===t?Fr:n===Mr.name&&e.getQueryType()===t?Mr:n===Qr.name?Qr:t.getFields()[n]}function jh(e){return new Promise(t=>t(Vc(e)))}function qh(e){const t=Vc(e);if(qe(t))throw new Error("GraphQL execution failed to complete synchronously.");return t}function Vc(e){arguments.length<2||ue(!1,"graphql@16 dropped long-deprecated support for positional arguments, please pass an object instead.");const{schema:t,source:r,rootValue:n,contextValue:i,variableValues:o,operationName:a,fieldResolver:s,typeResolver:u}=e,c=Qo(t);if(c.length>0)return{errors:c};let l;try{l=qn(r)}catch(d){return{errors:[d]}}const f=Lc(t,l);return f.length>0?{errors:f}:Zn({schema:t,document:l,rootValue:n,contextValue:i,variableValues:o,operationName:a,fieldResolver:s,typeResolver:u})}function zc(e){return typeof e?.[Symbol.asyncIterator]=="function"}function Hh(e,t){const r=e[Symbol.asyncIterator]();async function n(i){if(i.done)return i;try{return{value:await t(i.value),done:!1}}catch(o){if(typeof r.return=="function")try{await r.return()}catch{}throw o}}return{async next(){return n(await r.next())},async return(){return typeof r.return=="function"?n(await r.return()):{value:void 0,done:!0}},async throw(i){if(typeof r.throw=="function")return n(await r.throw(i));throw i},[Symbol.asyncIterator](){return this}}}async function Vh(e){arguments.length<2||ue(!1,"graphql@16 dropped long-deprecated support for positional arguments, please pass an object instead.");const t=await Gc(e);return zc(t)?Hh(t,n=>Zn({...e,rootValue:n})):t}function zh(e){const t=e[0];return t&&"document"in t?t:{schema:t,document:e[1],rootValue:e[2],contextValue:e[3],variableValues:e[4],operationName:e[5],subscribeFieldResolver:e[6]}}async function Gc(...e){const t=zh(e),{schema:r,document:n,variableValues:i}=t;Mc(r,n,i);const o=Qc(t);if(!("schema"in o))return{errors:o};try{const a=await Gh(o);if(!zc(a))throw new Error(`Subscription field must return Async Iterable. Received: ${M(a)}.`);return a}catch(a){if(a instanceof x)return{errors:[a]};throw a}}async function Gh(e){const{schema:t,fragments:r,operation:n,variableValues:i,rootValue:o}=e,a=t.getSubscriptionType();if(a==null)throw new x("Schema is not configured to execute subscription operation.",{nodes:n});const s=Yo(t,r,i,a,n.selectionSet),[u,c]=[...s.entries()][0],l=Hc(t,a,c[0]);if(!l){const w=c[0].name.value;throw new x(`The subscription field "${w}" is not defined.`,{nodes:c})}const f=ir(void 0,u,a.name),d=jc(e,l,c,a,f);try{var v;const w=Kn(l,c[0],i),T=e.contextValue,b=await((v=l.subscribe)!==null&&v!==void 0?v:e.subscribeFieldResolver)(o,w,T,d);if(b instanceof Error)throw b;return b}catch(w){throw or(w,c,Ue(f))}}function Xh(e){return{Field(t){const r=e.getFieldDef(),n=r?.deprecationReason;if(r&&n!=null){const i=e.getParentType();i!=null||Ie(!1),e.reportError(new x(`The field ${i.name}.${r.name} is deprecated. ${n}`,{nodes:t}))}},Argument(t){const r=e.getArgument(),n=r?.deprecationReason;if(r&&n!=null){const i=e.getDirective();if(i!=null)e.reportError(new x(`Directive "@${i.name}" argument "${r.name}" is deprecated. ${n}`,{nodes:t}));else{const o=e.getParentType(),a=e.getFieldDef();o!=null&&a!=null||Ie(!1),e.reportError(new x(`Field "${o.name}.${a.name}" argument "${r.name}" is deprecated. ${n}`,{nodes:t}))}}},ObjectField(t){const r=xe(e.getParentInputType());if(be(r)){const n=r.getFields()[t.name.value],i=n?.deprecationReason;i!=null&&e.reportError(new x(`The input field ${r.name}.${n.name} is deprecated. ${i}`,{nodes:t}))}},EnumValue(t){const r=e.getEnumValue(),n=r?.deprecationReason;if(r&&n!=null){const i=xe(e.getInputType());i!=null||Ie(!1),e.reportError(new x(`The enum value "${i.name}.${r.name}" is deprecated. ${n}`,{nodes:t}))}}}}function Jh(e){return{Field(t){const r=xe(e.getType());r&&zt(r)&&e.reportError(new x(`GraphQL introspection has been disabled, but the requested query contained the field "${t.name.value}".`,{nodes:t}))}}}function Xc(e){const t={descriptions:!0,specifiedByUrl:!1,directiveIsRepeatable:!1,schemaDescription:!1,inputValueDeprecation:!1,...e},r=t.descriptions?"description":"",n=t.specifiedByUrl?"specifiedByURL":"",i=t.directiveIsRepeatable?"isRepeatable":"",o=t.schemaDescription?r:"";function a(s){return t.inputValueDeprecation?s:""}return`
    query IntrospectionQuery {
      __schema {
        ${o}
        queryType { name }
        mutationType { name }
        subscriptionType { name }
        types {
          ...FullType
        }
        directives {
          name
          ${r}
          ${i}
          locations
          args${a("(includeDeprecated: true)")} {
            ...InputValue
          }
        }
      }
    }

    fragment FullType on __Type {
      kind
      name
      ${r}
      ${n}
      fields(includeDeprecated: true) {
        name
        ${r}
        args${a("(includeDeprecated: true)")} {
          ...InputValue
        }
        type {
          ...TypeRef
        }
        isDeprecated
        deprecationReason
      }
      inputFields${a("(includeDeprecated: true)")} {
        ...InputValue
      }
      interfaces {
        ...TypeRef
      }
      enumValues(includeDeprecated: true) {
        name
        ${r}
        isDeprecated
        deprecationReason
      }
      possibleTypes {
        ...TypeRef
      }
    }

    fragment InputValue on __InputValue {
      name
      ${r}
      type { ...TypeRef }
      defaultValue
      ${a("isDeprecated")}
      ${a("deprecationReason")}
    }

    fragment TypeRef on __Type {
      kind
      name
      ofType {
        kind
        name
        ofType {
          kind
          name
          ofType {
            kind
            name
            ofType {
              kind
              name
              ofType {
                kind
                name
                ofType {
                  kind
                  name
                  ofType {
                    kind
                    name
                  }
                }
              }
            }
          }
        }
      }
    }
  `}function Wh(e,t){let r=null;for(const i of e.definitions)if(i.kind===y.OPERATION_DEFINITION){var n;if(t==null){if(r)return null;r=i}else if(((n=i.name)===null||n===void 0?void 0:n.value)===t)return i}return r}function Yh(e,t){if(t.operation==="query"){const r=e.getQueryType();if(!r)throw new x("Schema does not define the required query root type.",{nodes:t});return r}if(t.operation==="mutation"){const r=e.getMutationType();if(!r)throw new x("Schema is not configured for mutations.",{nodes:t});return r}if(t.operation==="subscription"){const r=e.getSubscriptionType();if(!r)throw new x("Schema is not configured for subscriptions.",{nodes:t});return r}throw new x("Can only have query, mutation and subscription operations.",{nodes:t})}function Kh(e,t){const r={specifiedByUrl:!0,directiveIsRepeatable:!0,schemaDescription:!0,inputValueDeprecation:!0,...t},n=qn(Xc(r)),i=Fc({schema:e,document:n});return!i.errors&&i.data||Ie(!1),i.data}function Zh(e,t){He(e)&&He(e.__schema)||ue(!1,`Invalid or incomplete introspection result. Ensure that you are passing "data" property of introspection response and no "errors" was returned alongside: ${M(e)}.`);const r=e.__schema,n=bt(r.types,g=>g.name,g=>d(g));for(const g of[...Kr,...$r])n[g.name]&&(n[g.name]=g);const i=r.queryType?l(r.queryType):null,o=r.mutationType?l(r.mutationType):null,a=r.subscriptionType?l(r.subscriptionType):null,s=r.directives?r.directives.map(R):[];return new lr({description:r.description,query:i,mutation:o,subscription:a,types:Object.values(n),directives:s,assumeValid:t?.assumeValid});function u(g){if(g.kind===ge.LIST){const O=g.ofType;if(!O)throw new Error("Decorated type deeper than introspection query.");return new ke(u(O))}if(g.kind===ge.NON_NULL){const O=g.ofType;if(!O)throw new Error("Decorated type deeper than introspection query.");const j=u(O);return new se(Mu(j))}return c(g)}function c(g){const O=g.name;if(!O)throw new Error(`Unknown type reference: ${M(g)}.`);const j=n[O];if(!j)throw new Error(`Invalid or incomplete schema, unknown type: ${O}. Ensure that a full introspection query is used in order to build a client schema.`);return j}function l(g){return xu(c(g))}function f(g){return Fu(c(g))}function d(g){if(g!=null&&g.name!=null&&g.kind!=null)switch(g.kind){case ge.SCALAR:return v(g);case ge.OBJECT:return T(g);case ge.INTERFACE:return A(g);case ge.UNION:return b(g);case ge.ENUM:return B(g);case ge.INPUT_OBJECT:return C(g)}const O=M(g);throw new Error(`Invalid or incomplete introspection result. Ensure that a full introspection query is used in order to build a client schema: ${O}.`)}function v(g){return new ut({name:g.name,description:g.description,specifiedByURL:g.specifiedByURL})}function w(g){if(g.interfaces===null&&g.kind===ge.INTERFACE)return[];if(!g.interfaces){const O=M(g);throw new Error(`Introspection result missing interfaces: ${O}.`)}return g.interfaces.map(f)}function T(g){return new Xe({name:g.name,description:g.description,interfaces:()=>w(g),fields:()=>E(g)})}function A(g){return new tr({name:g.name,description:g.description,interfaces:()=>w(g),fields:()=>E(g)})}function b(g){if(!g.possibleTypes){const O=M(g);throw new Error(`Introspection result missing possibleTypes: ${O}.`)}return new rr({name:g.name,description:g.description,types:()=>g.possibleTypes.map(l)})}function B(g){if(!g.enumValues){const O=M(g);throw new Error(`Introspection result missing enumValues: ${O}.`)}return new It({name:g.name,description:g.description,values:bt(g.enumValues,O=>O.name,O=>({description:O.description,deprecationReason:O.deprecationReason}))})}function C(g){if(!g.inputFields){const O=M(g);throw new Error(`Introspection result missing inputFields: ${O}.`)}return new nr({name:g.name,description:g.description,fields:()=>N(g.inputFields)})}function E(g){if(!g.fields)throw new Error(`Introspection result missing fields: ${M(g)}.`);return bt(g.fields,O=>O.name,P)}function P(g){const O=u(g.type);if(!Tt(O)){const j=M(O);throw new Error(`Introspection must provide output type for fields, but received: ${j}.`)}if(!g.args){const j=M(g);throw new Error(`Introspection result missing field args: ${j}.`)}return{description:g.description,deprecationReason:g.deprecationReason,type:O,args:N(g.args)}}function N(g){return bt(g,O=>O.name,q)}function q(g){const O=u(g.type);if(!Me(O)){const Q=M(O);throw new Error(`Introspection must provide input type for arguments, but received: ${Q}.`)}const j=g.defaultValue!=null?it(Ru(g.defaultValue),O):void 0;return{description:g.description,type:O,defaultValue:j,deprecationReason:g.deprecationReason}}function R(g){if(!g.args){const O=M(g);throw new Error(`Introspection result missing directive args: ${O}.`)}if(!g.locations){const O=M(g);throw new Error(`Introspection result missing directive locations: ${O}.`)}return new ct({name:g.name,description:g.description,isRepeatable:g.isRepeatable,locations:g.locations.slice(),args:N(g.args)})}}function _h(e,t,r){Mo(e),t!=null&&t.kind===y.DOCUMENT||ue(!1,"Must provide valid Document AST."),r?.assumeValid!==!0&&r?.assumeValidSDL!==!0&&Nh(t,e);const n=e.toConfig(),i=Jc(n,t,r);return n===i?e:new lr(i)}function Jc(e,t,r){var n,i,o,a;const s=[],u=Object.create(null),c=[];let l;const f=[];for(const m of t.definitions)if(m.kind===y.SCHEMA_DEFINITION)l=m;else if(m.kind===y.SCHEMA_EXTENSION)f.push(m);else if(fr(m))s.push(m);else if(Wn(m)){const S=m.name.value,I=u[S];u[S]=I?I.concat([m]):[m]}else m.kind===y.DIRECTIVE_DEFINITION&&c.push(m);if(Object.keys(u).length===0&&s.length===0&&c.length===0&&f.length===0&&l==null)return e;const d=Object.create(null);for(const m of e.types)d[m.name]=B(m);for(const m of s){var v;const S=m.name.value;d[S]=(v=gs[S])!==null&&v!==void 0?v:Z(m)}const w={query:e.query&&A(e.query),mutation:e.mutation&&A(e.mutation),subscription:e.subscription&&A(e.subscription),...l&&j([l]),...j(f)};return{description:(n=l)===null||n===void 0||(i=n.description)===null||i===void 0?void 0:i.value,...w,types:Object.values(d),directives:[...e.directives.map(b),...c.map(V)],extensions:Object.create(null),astNode:(o=l)!==null&&o!==void 0?o:e.astNode,extensionASTNodes:e.extensionASTNodes.concat(f),assumeValid:(a=r?.assumeValid)!==null&&a!==void 0?a:!1};function T(m){return Ee(m)?new ke(T(m.ofType)):oe(m)?new se(T(m.ofType)):A(m)}function A(m){return d[m.name]}function b(m){const S=m.toConfig();return new ct({...S,args:dt(S.args,O)})}function B(m){if(zt(m)||zn(m))return m;if(ze(m))return P(m);if(fe(m))return N(m);if(Ae(m))return q(m);if(Pe(m))return R(m);if(Ce(m))return E(m);if(be(m))return C(m);Ie(!1,"Unexpected type: "+M(m))}function C(m){var S;const I=m.toConfig(),L=(S=u[I.name])!==null&&S!==void 0?S:[];return new nr({...I,fields:()=>({...dt(I.fields,$=>({...$,type:T($.type)})),..._(L)}),extensionASTNodes:I.extensionASTNodes.concat(L)})}function E(m){var S;const I=m.toConfig(),L=(S=u[m.name])!==null&&S!==void 0?S:[];return new It({...I,values:{...I.values,...z(L)},extensionASTNodes:I.extensionASTNodes.concat(L)})}function P(m){var S;const I=m.toConfig(),L=(S=u[I.name])!==null&&S!==void 0?S:[];let $=I.specifiedByURL;for(const W of L){var te;$=(te=ms(W))!==null&&te!==void 0?te:$}return new ut({...I,specifiedByURL:$,extensionASTNodes:I.extensionASTNodes.concat(L)})}function N(m){var S;const I=m.toConfig(),L=(S=u[I.name])!==null&&S!==void 0?S:[];return new Xe({...I,interfaces:()=>[...m.getInterfaces().map(A),...J(L)],fields:()=>({...dt(I.fields,g),...G(L)}),extensionASTNodes:I.extensionASTNodes.concat(L)})}function q(m){var S;const I=m.toConfig(),L=(S=u[I.name])!==null&&S!==void 0?S:[];return new tr({...I,interfaces:()=>[...m.getInterfaces().map(A),...J(L)],fields:()=>({...dt(I.fields,g),...G(L)}),extensionASTNodes:I.extensionASTNodes.concat(L)})}function R(m){var S;const I=m.toConfig(),L=(S=u[I.name])!==null&&S!==void 0?S:[];return new rr({...I,types:()=>[...m.getTypes().map(A),...ae(L)],extensionASTNodes:I.extensionASTNodes.concat(L)})}function g(m){return{...m,type:T(m.type),args:m.args&&dt(m.args,O)}}function O(m){return{...m,type:T(m.type)}}function j(m){const S={};for(const L of m){var I;const $=(I=L.operationTypes)!==null&&I!==void 0?I:[];for(const te of $)S[te.operation]=Q(te.type)}return S}function Q(m){var S;const I=m.name.value,L=(S=gs[I])!==null&&S!==void 0?S:d[I];if(L===void 0)throw new Error(`Unknown type: "${I}".`);return L}function H(m){return m.kind===y.LIST_TYPE?new ke(H(m.type)):m.kind===y.NON_NULL_TYPE?new se(H(m.type)):Q(m)}function V(m){var S;return new ct({name:m.name.value,description:(S=m.description)===null||S===void 0?void 0:S.value,locations:m.locations.map(({value:I})=>I),isRepeatable:m.repeatable,args:Y(m.arguments),astNode:m})}function G(m){const S=Object.create(null);for(const $ of m){var I;const te=(I=$.fields)!==null&&I!==void 0?I:[];for(const W of te){var L;S[W.name.value]={type:H(W.type),description:(L=W.description)===null||L===void 0?void 0:L.value,args:Y(W.arguments),deprecationReason:hn(W),astNode:W}}}return S}function Y(m){const S=m??[],I=Object.create(null);for(const $ of S){var L;const te=H($.type);I[$.name.value]={type:te,description:(L=$.description)===null||L===void 0?void 0:L.value,defaultValue:it($.defaultValue,te),deprecationReason:hn($),astNode:$}}return I}function _(m){const S=Object.create(null);for(const $ of m){var I;const te=(I=$.fields)!==null&&I!==void 0?I:[];for(const W of te){var L;const ne=H(W.type);S[W.name.value]={type:ne,description:(L=W.description)===null||L===void 0?void 0:L.value,defaultValue:it(W.defaultValue,ne),deprecationReason:hn(W),astNode:W}}}return S}function z(m){const S=Object.create(null);for(const $ of m){var I;const te=(I=$.values)!==null&&I!==void 0?I:[];for(const W of te){var L;S[W.name.value]={description:(L=W.description)===null||L===void 0?void 0:L.value,deprecationReason:hn(W),astNode:W}}}return S}function J(m){return m.flatMap(S=>{var I,L;return(I=(L=S.interfaces)===null||L===void 0?void 0:L.map(Q))!==null&&I!==void 0?I:[]})}function ae(m){return m.flatMap(S=>{var I,L;return(I=(L=S.types)===null||L===void 0?void 0:L.map(Q))!==null&&I!==void 0?I:[]})}function Z(m){var S;const I=m.name.value,L=(S=u[I])!==null&&S!==void 0?S:[];switch(m.kind){case y.OBJECT_TYPE_DEFINITION:{var $;const pe=[m,...L];return new Xe({name:I,description:($=m.description)===null||$===void 0?void 0:$.value,interfaces:()=>J(pe),fields:()=>G(pe),astNode:m,extensionASTNodes:L})}case y.INTERFACE_TYPE_DEFINITION:{var te;const pe=[m,...L];return new tr({name:I,description:(te=m.description)===null||te===void 0?void 0:te.value,interfaces:()=>J(pe),fields:()=>G(pe),astNode:m,extensionASTNodes:L})}case y.ENUM_TYPE_DEFINITION:{var W;const pe=[m,...L];return new It({name:I,description:(W=m.description)===null||W===void 0?void 0:W.value,values:z(pe),astNode:m,extensionASTNodes:L})}case y.UNION_TYPE_DEFINITION:{var ne;const pe=[m,...L];return new rr({name:I,description:(ne=m.description)===null||ne===void 0?void 0:ne.value,types:()=>ae(pe),astNode:m,extensionASTNodes:L})}case y.SCALAR_TYPE_DEFINITION:{var ce;return new ut({name:I,description:(ce=m.description)===null||ce===void 0?void 0:ce.value,specifiedByURL:ms(m),astNode:m,extensionASTNodes:L})}case y.INPUT_OBJECT_TYPE_DEFINITION:{var de;const pe=[m,...L];return new nr({name:I,description:(de=m.description)===null||de===void 0?void 0:de.value,fields:()=>_(pe),astNode:m,extensionASTNodes:L})}}}}const gs=At([...Kr,...$r],e=>e.name);function hn(e){const t=Ur(Xn,e);return t?.reason}function ms(e){const t=Ur(Bo,e);return t?.url}function Wc(e,t){e!=null&&e.kind===y.DOCUMENT||ue(!1,"Must provide valid Document AST."),t?.assumeValid!==!0&&t?.assumeValidSDL!==!0&&Sh(e);const n=Jc({description:void 0,types:[],directives:[],extensions:Object.create(null),extensionASTNodes:[],assumeValid:!1},e,t);if(n.astNode==null)for(const o of n.types)switch(o.name){case"Query":n.query=o;break;case"Mutation":n.mutation=o;break;case"Subscription":n.subscription=o;break}const i=[...n.directives,...Bt.filter(o=>n.directives.every(a=>a.name!==o.name))];return new lr({...n,directives:i})}function $h(e,t){const r=qn(e,{noLocation:t?.noLocation,allowLegacyFragmentVariables:t?.allowLegacyFragmentVariables});return Wc(r,{assumeValidSDL:t?.assumeValidSDL,assumeValid:t?.assumeValid})}function eA(e){const t=e.toConfig(),r=bt(ji(t.types),d=>d.name,f);return new lr({...t,types:Object.values(r),directives:ji(t.directives).map(a),query:o(t.query),mutation:o(t.mutation),subscription:o(t.subscription)});function n(d){return Ee(d)?new ke(n(d.ofType)):oe(d)?new se(n(d.ofType)):i(d)}function i(d){return r[d.name]}function o(d){return d&&i(d)}function a(d){const v=d.toConfig();return new ct({...v,locations:Yc(v.locations,w=>w),args:s(v.args)})}function s(d){return An(d,v=>({...v,type:n(v.type)}))}function u(d){return An(d,v=>({...v,type:n(v.type),args:v.args&&s(v.args)}))}function c(d){return An(d,v=>({...v,type:n(v.type)}))}function l(d){return ji(d).map(i)}function f(d){if(ze(d)||zt(d))return d;if(fe(d)){const v=d.toConfig();return new Xe({...v,interfaces:()=>l(v.interfaces),fields:()=>u(v.fields)})}if(Ae(d)){const v=d.toConfig();return new tr({...v,interfaces:()=>l(v.interfaces),fields:()=>u(v.fields)})}if(Pe(d)){const v=d.toConfig();return new rr({...v,types:()=>l(v.types)})}if(Ce(d)){const v=d.toConfig();return new It({...v,values:An(v.values,w=>w)})}if(be(d)){const v=d.toConfig();return new nr({...v,fields:()=>c(v.fields)})}Ie(!1,"Unexpected type: "+M(d))}}function An(e,t){const r=Object.create(null);for(const n of Object.keys(e).sort(Xr))r[n]=t(e[n]);return r}function ji(e){return Yc(e,t=>t.name)}function Yc(e,t){return e.slice().sort((r,n)=>{const i=t(r),o=t(n);return Xr(i,o)})}function tA(e){return Kc(e,t=>!Oo(t),nA)}function rA(e){return Kc(e,Oo,zt)}function nA(e){return!zn(e)&&!zt(e)}function Kc(e,t,r){const n=e.getDirectives().filter(t),i=Object.values(e.getTypeMap()).filter(r);return[iA(e),...n.map(o=>pA(o)),...i.map(o=>Zc(o))].filter(Boolean).join(`

`)}function iA(e){if(e.description==null&&oA(e))return;const t=[],r=e.getQueryType();r&&t.push(`  query: ${r.name}`);const n=e.getMutationType();n&&t.push(`  mutation: ${n.name}`);const i=e.getSubscriptionType();return i&&t.push(`  subscription: ${i.name}`),Je(e)+`schema {
${t.join(`
`)}
}`}function oA(e){const t=e.getQueryType();if(t&&t.name!=="Query")return!1;const r=e.getMutationType();if(r&&r.name!=="Mutation")return!1;const n=e.getSubscriptionType();return!(n&&n.name!=="Subscription")}function Zc(e){if(ze(e))return aA(e);if(fe(e))return sA(e);if(Ae(e))return uA(e);if(Pe(e))return cA(e);if(Ce(e))return lA(e);if(be(e))return fA(e);Ie(!1,"Unexpected type: "+M(e))}function aA(e){return Je(e)+`scalar ${e.name}`+dA(e)}function _c(e){const t=e.getInterfaces();return t.length?" implements "+t.map(r=>r.name).join(" & "):""}function sA(e){return Je(e)+`type ${e.name}`+_c(e)+$c(e)}function uA(e){return Je(e)+`interface ${e.name}`+_c(e)+$c(e)}function cA(e){const t=e.getTypes(),r=t.length?" = "+t.join(" | "):"";return Je(e)+"union "+e.name+r}function lA(e){const t=e.getValues().map((r,n)=>Je(r,"  ",!n)+"  "+r.name+ta(r.deprecationReason));return Je(e)+`enum ${e.name}`+ea(t)}function fA(e){const t=Object.values(e.getFields()).map((r,n)=>Je(r,"  ",!n)+"  "+no(r));return Je(e)+`input ${e.name}`+ea(t)}function $c(e){const t=Object.values(e.getFields()).map((r,n)=>Je(r,"  ",!n)+"  "+r.name+el(r.args,"  ")+": "+String(r.type)+ta(r.deprecationReason));return ea(t)}function ea(e){return e.length!==0?` {
`+e.join(`
`)+`
}`:""}function el(e,t=""){return e.length===0?"":e.every(r=>!r.description)?"("+e.map(no).join(", ")+")":`(
`+e.map((r,n)=>Je(r,"  "+t,!n)+"  "+t+no(r)).join(`
`)+`
`+t+")"}function no(e){const t=Dt(e.defaultValue,e.type);let r=e.name+": "+String(e.type);return t&&(r+=` = ${ye(t)}`),r+ta(e.deprecationReason)}function pA(e){return Je(e)+"directive @"+e.name+el(e.args)+(e.isRepeatable?" repeatable":"")+" on "+e.locations.join(" | ")}function ta(e){return e==null?"":e!==Co?` @deprecated(reason: ${ye({kind:y.STRING,value:e})})`:" @deprecated"}function dA(e){return e.specifiedByURL==null?"":` @specifiedBy(url: ${ye({kind:y.STRING,value:e.specifiedByURL})})`}function Je(e,t="",r=!0){const{description:n}=e;if(n==null)return"";const i=ye({kind:y.STRING,value:n,block:Kp(n)});return(t&&!r?`
`+t:t)+i.replace(/\n/g,`
`+t)+`
`}function hA(e){const t=[];for(const r of e)t.push(...r.definitions);return{kind:y.DOCUMENT,definitions:t}}function AA(e){const t=[],r=Object.create(null);for(const i of e.definitions)switch(i.kind){case y.OPERATION_DEFINITION:t.push(i);break;case y.FRAGMENT_DEFINITION:r[i.name.value]=ys(i.selectionSet);break}const n=Object.create(null);for(const i of t){const o=new Set;for(const s of ys(i.selectionSet))tl(o,r,s);const a=i.name?i.name.value:"";n[a]={kind:y.DOCUMENT,definitions:e.definitions.filter(s=>s===i||s.kind===y.FRAGMENT_DEFINITION&&o.has(s.name.value))}}return n}function tl(e,t,r){if(!e.has(r)){e.add(r);const n=t[r];if(n!==void 0)for(const i of n)tl(e,t,i)}}function ys(e){const t=[];return cr(e,{FragmentSpread(r){t.push(r.name.value)}}),t}function vA(e){const t=Pu(e)?e:new jn(e),r=t.body,n=new yo(t);let i="",o=!1;for(;n.advance().kind!==F.EOF;){const a=n.token,s=a.kind,u=!Nu(a.kind);o&&(u||a.kind===F.SPREAD)&&(i+=" ");const c=r.slice(a.start,a.end);s===F.BLOCK_STRING?i+=Su(a.value,{minimize:!0}):i+=c,o=u}return i}function gA(e){const t=rl(e);if(t)throw t;return e}function rl(e){if(typeof e=="string"||ue(!1,"Expected name to be a string."),e.startsWith("__"))return new x(`Name "${e}" must not begin with "__", which is reserved by GraphQL introspection.`);try{Ve(e)}catch(t){return t}}var Te;(function(e){e.TYPE_REMOVED="TYPE_REMOVED",e.TYPE_CHANGED_KIND="TYPE_CHANGED_KIND",e.TYPE_REMOVED_FROM_UNION="TYPE_REMOVED_FROM_UNION",e.VALUE_REMOVED_FROM_ENUM="VALUE_REMOVED_FROM_ENUM",e.REQUIRED_INPUT_FIELD_ADDED="REQUIRED_INPUT_FIELD_ADDED",e.IMPLEMENTED_INTERFACE_REMOVED="IMPLEMENTED_INTERFACE_REMOVED",e.FIELD_REMOVED="FIELD_REMOVED",e.FIELD_CHANGED_KIND="FIELD_CHANGED_KIND",e.REQUIRED_ARG_ADDED="REQUIRED_ARG_ADDED",e.ARG_REMOVED="ARG_REMOVED",e.ARG_CHANGED_KIND="ARG_CHANGED_KIND",e.DIRECTIVE_REMOVED="DIRECTIVE_REMOVED",e.DIRECTIVE_ARG_REMOVED="DIRECTIVE_ARG_REMOVED",e.REQUIRED_DIRECTIVE_ARG_ADDED="REQUIRED_DIRECTIVE_ARG_ADDED",e.DIRECTIVE_REPEATABLE_REMOVED="DIRECTIVE_REPEATABLE_REMOVED",e.DIRECTIVE_LOCATION_REMOVED="DIRECTIVE_LOCATION_REMOVED"})(Te||(Te={}));var tt;(function(e){e.VALUE_ADDED_TO_ENUM="VALUE_ADDED_TO_ENUM",e.TYPE_ADDED_TO_UNION="TYPE_ADDED_TO_UNION",e.OPTIONAL_INPUT_FIELD_ADDED="OPTIONAL_INPUT_FIELD_ADDED",e.OPTIONAL_ARG_ADDED="OPTIONAL_ARG_ADDED",e.IMPLEMENTED_INTERFACE_ADDED="IMPLEMENTED_INTERFACE_ADDED",e.ARG_DEFAULT_VALUE_CHANGE="ARG_DEFAULT_VALUE_CHANGE"})(tt||(tt={}));function mA(e,t){return nl(e,t).filter(r=>r.type in Te)}function yA(e,t){return nl(e,t).filter(r=>r.type in tt)}function nl(e,t){return[...bA(e,t),...EA(e,t)]}function EA(e,t){const r=[],n=vt(e.getDirectives(),t.getDirectives());for(const i of n.removed)r.push({type:Te.DIRECTIVE_REMOVED,description:`${i.name} was removed.`});for(const[i,o]of n.persisted){const a=vt(i.args,o.args);for(const s of a.added)Ct(s)&&r.push({type:Te.REQUIRED_DIRECTIVE_ARG_ADDED,description:`A required arg ${s.name} on directive ${i.name} was added.`});for(const s of a.removed)r.push({type:Te.DIRECTIVE_ARG_REMOVED,description:`${s.name} was removed from ${i.name}.`});i.isRepeatable&&!o.isRepeatable&&r.push({type:Te.DIRECTIVE_REPEATABLE_REMOVED,description:`Repeatable flag was removed from ${i.name}.`});for(const s of i.locations)o.locations.includes(s)||r.push({type:Te.DIRECTIVE_LOCATION_REMOVED,description:`${s} was removed from ${i.name}.`})}return r}function bA(e,t){const r=[],n=vt(Object.values(e.getTypeMap()),Object.values(t.getTypeMap()));for(const i of n.removed)r.push({type:Te.TYPE_REMOVED,description:zn(i)?`Standard scalar ${i.name} was removed because it is not referenced anymore.`:`${i.name} was removed.`});for(const[i,o]of n.persisted)Ce(i)&&Ce(o)?r.push(...wA(i,o)):Pe(i)&&Pe(o)?r.push(...TA(i,o)):be(i)&&be(o)?r.push(...DA(i,o)):fe(i)&&fe(o)?r.push(...bs(i,o),...Es(i,o)):Ae(i)&&Ae(o)?r.push(...bs(i,o),...Es(i,o)):i.constructor!==o.constructor&&r.push({type:Te.TYPE_CHANGED_KIND,description:`${i.name} changed from ${Ds(i)} to ${Ds(o)}.`});return r}function DA(e,t){const r=[],n=vt(Object.values(e.getFields()),Object.values(t.getFields()));for(const i of n.added)Vn(i)?r.push({type:Te.REQUIRED_INPUT_FIELD_ADDED,description:`A required field ${i.name} on input type ${e.name} was added.`}):r.push({type:tt.OPTIONAL_INPUT_FIELD_ADDED,description:`An optional field ${i.name} on input type ${e.name} was added.`});for(const i of n.removed)r.push({type:Te.FIELD_REMOVED,description:`${e.name}.${i.name} was removed.`});for(const[i,o]of n.persisted)Lr(i.type,o.type)||r.push({type:Te.FIELD_CHANGED_KIND,description:`${e.name}.${i.name} changed type from ${String(i.type)} to ${String(o.type)}.`});return r}function TA(e,t){const r=[],n=vt(e.getTypes(),t.getTypes());for(const i of n.added)r.push({type:tt.TYPE_ADDED_TO_UNION,description:`${i.name} was added to union type ${e.name}.`});for(const i of n.removed)r.push({type:Te.TYPE_REMOVED_FROM_UNION,description:`${i.name} was removed from union type ${e.name}.`});return r}function wA(e,t){const r=[],n=vt(e.getValues(),t.getValues());for(const i of n.added)r.push({type:tt.VALUE_ADDED_TO_ENUM,description:`${i.name} was added to enum type ${e.name}.`});for(const i of n.removed)r.push({type:Te.VALUE_REMOVED_FROM_ENUM,description:`${i.name} was removed from enum type ${e.name}.`});return r}function Es(e,t){const r=[],n=vt(e.getInterfaces(),t.getInterfaces());for(const i of n.added)r.push({type:tt.IMPLEMENTED_INTERFACE_ADDED,description:`${i.name} added to interfaces implemented by ${e.name}.`});for(const i of n.removed)r.push({type:Te.IMPLEMENTED_INTERFACE_REMOVED,description:`${e.name} no longer implements interface ${i.name}.`});return r}function bs(e,t){const r=[],n=vt(Object.values(e.getFields()),Object.values(t.getFields()));for(const i of n.removed)r.push({type:Te.FIELD_REMOVED,description:`${e.name}.${i.name} was removed.`});for(const[i,o]of n.persisted)r.push(...IA(e,i,o)),Rr(i.type,o.type)||r.push({type:Te.FIELD_CHANGED_KIND,description:`${e.name}.${i.name} changed type from ${String(i.type)} to ${String(o.type)}.`});return r}function IA(e,t,r){const n=[],i=vt(t.args,r.args);for(const o of i.removed)n.push({type:Te.ARG_REMOVED,description:`${e.name}.${t.name} arg ${o.name} was removed.`});for(const[o,a]of i.persisted)if(!Lr(o.type,a.type))n.push({type:Te.ARG_CHANGED_KIND,description:`${e.name}.${t.name} arg ${o.name} has changed type from ${String(o.type)} to ${String(a.type)}.`});else if(o.defaultValue!==void 0)if(a.defaultValue===void 0)n.push({type:tt.ARG_DEFAULT_VALUE_CHANGE,description:`${e.name}.${t.name} arg ${o.name} defaultValue was removed.`});else{const u=Ts(o.defaultValue,o.type),c=Ts(a.defaultValue,a.type);u!==c&&n.push({type:tt.ARG_DEFAULT_VALUE_CHANGE,description:`${e.name}.${t.name} arg ${o.name} has changed defaultValue from ${u} to ${c}.`})}for(const o of i.added)Ct(o)?n.push({type:Te.REQUIRED_ARG_ADDED,description:`A required arg ${o.name} on ${e.name}.${t.name} was added.`}):n.push({type:tt.OPTIONAL_ARG_ADDED,description:`An optional arg ${o.name} on ${e.name}.${t.name} was added.`});return n}function Rr(e,t){return Ee(e)?Ee(t)&&Rr(e.ofType,t.ofType)||oe(t)&&Rr(e,t.ofType):oe(e)?oe(t)&&Rr(e.ofType,t.ofType):Yr(t)&&e.name===t.name||oe(t)&&Rr(e,t.ofType)}function Lr(e,t){return Ee(e)?Ee(t)&&Lr(e.ofType,t.ofType):oe(e)?oe(t)&&Lr(e.ofType,t.ofType)||!oe(t)&&Lr(e.ofType,t):Yr(t)&&e.name===t.name}function Ds(e){if(ze(e))return"a Scalar type";if(fe(e))return"an Object type";if(Ae(e))return"an Interface type";if(Pe(e))return"a Union type";if(Ce(e))return"an Enum type";if(be(e))return"an Input type";Ie(!1,"Unexpected type: "+M(e))}function Ts(e,t){const r=Dt(e,t);return r!=null||Ie(!1),ye(Yn(r))}function vt(e,t){const r=[],n=[],i=[],o=At(e,({name:s})=>s),a=At(t,({name:s})=>s);for(const s of e){const u=a[s.name];u===void 0?n.push(s):i.push([s,u])}for(const s of t)o[s.name]===void 0&&r.push(s);return{added:r,persisted:i,removed:n}}const SA=Object.freeze(Object.defineProperty({__proto__:null,BREAK:_t,get BreakingChangeType(){return Te},DEFAULT_DEPRECATION_REASON:Co,get DangerousChangeType(){return tt},get DirectiveLocation(){return re},ExecutableDefinitionsRule:Ju,FieldsOnCorrectTypeRule:Wu,FragmentsOnCompositeTypesRule:Yu,GRAPHQL_MAX_INT:yn,GRAPHQL_MIN_INT:En,GraphQLBoolean:je,GraphQLDeprecatedDirective:Xn,GraphQLDirective:ct,GraphQLEnumType:It,GraphQLError:x,GraphQLFloat:zu,GraphQLID:Io,GraphQLIncludeDirective:So,GraphQLInputObjectType:nr,GraphQLInt:Vu,GraphQLInterfaceType:tr,GraphQLList:ke,GraphQLNonNull:se,GraphQLObjectType:Xe,GraphQLScalarType:ut,GraphQLSchema:lr,GraphQLSkipDirective:No,GraphQLSpecifiedByDirective:Bo,GraphQLString:we,GraphQLUnionType:rr,get Kind(){return y},KnownArgumentNamesRule:Ku,KnownDirectivesRule:Xo,KnownFragmentNamesRule:_u,KnownTypeNamesRule:Jo,Lexer:yo,Location:Du,LoneAnonymousOperationRule:$u,LoneSchemaDefinitionRule:ec,NoDeprecatedCustomRule:Xh,NoFragmentCyclesRule:tc,NoSchemaIntrospectionCustomRule:Jh,NoUndefinedVariablesRule:rc,NoUnusedFragmentsRule:nc,NoUnusedVariablesRule:ic,get OperationTypeNode(){return Oe},OverlappingFieldsCanBeMergedRule:ac,PossibleFragmentSpreadsRule:cc,PossibleTypeExtensionsRule:lc,ProvidedRequiredArgumentsRule:fc,ScalarLeafsRule:dc,SchemaMetaFieldDef:Fr,SingleFieldSubscriptionsRule:mc,Source:jn,Token:go,get TokenKind(){return F},TypeInfo:qo,get TypeKind(){return ge},TypeMetaFieldDef:Mr,TypeNameMetaFieldDef:Qr,UniqueArgumentDefinitionNamesRule:yc,UniqueArgumentNamesRule:Zo,UniqueDirectiveNamesRule:Ec,UniqueDirectivesPerLocationRule:_o,UniqueEnumValueNamesRule:bc,UniqueFieldDefinitionNamesRule:Dc,UniqueFragmentNamesRule:Tc,UniqueInputFieldNamesRule:$o,UniqueOperationNamesRule:wc,UniqueOperationTypesRule:Ic,UniqueTypeNamesRule:Sc,UniqueVariableNamesRule:Nc,ValidationContext:kc,ValuesOfCorrectTypeRule:Cc,VariablesAreInputTypesRule:Bc,VariablesInAllowedPositionRule:Oc,__Directive:Ro,__DirectiveLocation:ko,__EnumValue:xo,__Field:Lo,__InputValue:_r,__Schema:Jn,__Type:Ge,__TypeKind:Fo,assertAbstractType:xd,assertCompositeType:Ld,assertDirective:qd,assertEnumType:Nd,assertEnumValueName:Lu,assertInputObjectType:Cd,assertInputType:Pd,assertInterfaceType:Fu,assertLeafType:kd,assertListType:Bd,assertName:Ve,assertNamedType:Md,assertNonNullType:Od,assertNullableType:Mu,assertObjectType:xu,assertOutputType:Rd,assertScalarType:Id,assertSchema:Mo,assertType:wd,assertUnionType:Sd,assertValidName:gA,assertValidSchema:Uo,assertWrappingType:Fd,astFromValue:Dt,buildASTSchema:Wc,buildClientSchema:Zh,buildSchema:$h,coerceInputValue:Ac,concatAST:hA,createSourceEventStream:Gc,defaultFieldResolver:ro,defaultTypeResolver:qc,doTypesOverlap:Zi,execute:Zn,executeSync:Fc,extendSchema:_h,findBreakingChanges:mA,findDangerousChanges:yA,formatError:Xp,getArgumentValues:Kn,getDirectiveValues:Ur,getEnterLeaveForKind:er,getIntrospectionQuery:Xc,getLocation:Dn,getNamedType:xe,getNullableType:Do,getOperationAST:Wh,getOperationRootType:Yh,getVariableValues:vc,getVisitFn:bd,graphql:jh,graphqlSync:qh,introspectionFromSchema:Kh,introspectionTypes:$r,isAbstractType:ot,isCompositeType:st,isConstValueNode:_i,isDefinitionNode:$d,isDirective:Gn,isEnumType:Ce,isEqualType:wn,isExecutableDefinitionNode:Vo,isInputObjectType:be,isInputType:Me,isInterfaceType:Ae,isIntrospectionType:zt,isLeafType:at,isListType:Ee,isNamedType:Yr,isNonNullType:oe,isNullableType:bo,isObjectType:fe,isOutputType:Tt,isRequiredArgument:Ct,isRequiredInputField:Vn,isScalarType:ze,isSchema:Gu,isSelectionNode:eh,isSpecifiedDirective:Oo,isSpecifiedScalarType:zn,isType:Jr,isTypeDefinitionNode:fr,isTypeExtensionNode:Wn,isTypeNode:th,isTypeSubTypeOf:Ut,isTypeSystemDefinitionNode:zo,isTypeSystemExtensionNode:Go,isUnionType:Pe,isValidNameError:rl,isValueNode:Xu,isWrappingType:Wr,lexicographicSortSchema:eA,locatedError:or,parse:qn,parseConstValue:pd,parseType:dd,parseValue:Ru,print:ye,printError:Gp,printIntrospectionSchema:rA,printLocation:bu,printSchema:tA,printSourceLocation:vo,printType:Zc,resolveObjMapThunk:wo,resolveReadonlyArrayThunk:To,responsePathAsArray:Ue,separateOperations:AA,specifiedDirectives:Bt,specifiedRules:Pc,specifiedScalarTypes:Kr,stripIgnoredCharacters:vA,subscribe:Vh,syntaxError:Be,typeFromAST:Qe,validate:Lc,validateSchema:Qo,valueFromAST:it,valueFromASTUntyped:Tn,version:qp,versionInfo:Hp,visit:cr,visitInParallel:Eo,visitWithTypeInfo:Ho},Symbol.toStringTag,{value:"Module"})),NA=eu(SA);function CA(e){for(var t=[],r=0;r<e.length;){var n=e[r];if(n==="*"||n==="+"||n==="?"){t.push({type:"MODIFIER",index:r,value:e[r++]});continue}if(n==="\\"){t.push({type:"ESCAPED_CHAR",index:r++,value:e[r++]});continue}if(n==="{"){t.push({type:"OPEN",index:r,value:e[r++]});continue}if(n==="}"){t.push({type:"CLOSE",index:r,value:e[r++]});continue}if(n===":"){for(var i="",o=r+1;o<e.length;){var a=e.charCodeAt(o);if(a>=48&&a<=57||a>=65&&a<=90||a>=97&&a<=122||a===95){i+=e[o++];continue}break}if(!i)throw new TypeError("Missing parameter name at ".concat(r));t.push({type:"NAME",index:r,value:i}),r=o;continue}if(n==="("){var s=1,u="",o=r+1;if(e[o]==="?")throw new TypeError('Pattern cannot start with "?" at '.concat(o));for(;o<e.length;){if(e[o]==="\\"){u+=e[o++]+e[o++];continue}if(e[o]===")"){if(s--,s===0){o++;break}}else if(e[o]==="("&&(s++,e[o+1]!=="?"))throw new TypeError("Capturing groups are not allowed at ".concat(o));u+=e[o++]}if(s)throw new TypeError("Unbalanced pattern at ".concat(r));if(!u)throw new TypeError("Missing pattern at ".concat(r));t.push({type:"PATTERN",index:r,value:u}),r=o;continue}t.push({type:"CHAR",index:r,value:e[r++]})}return t.push({type:"END",index:r,value:""}),t}function ra(e,t){t===void 0&&(t={});for(var r=CA(e),n=t.prefixes,i=n===void 0?"./":n,o="[^".concat(Kt(t.delimiter||"/#?"),"]+?"),a=[],s=0,u=0,c="",l=function(N){if(u<r.length&&r[u].type===N)return r[u++].value},f=function(N){var q=l(N);if(q!==void 0)return q;var R=r[u],g=R.type,O=R.index;throw new TypeError("Unexpected ".concat(g," at ").concat(O,", expected ").concat(N))},d=function(){for(var N="",q;q=l("CHAR")||l("ESCAPED_CHAR");)N+=q;return N};u<r.length;){var v=l("CHAR"),w=l("NAME"),T=l("PATTERN");if(w||T){var A=v||"";i.indexOf(A)===-1&&(c+=A,A=""),c&&(a.push(c),c=""),a.push({name:w||s++,prefix:A,suffix:"",pattern:T||o,modifier:l("MODIFIER")||""});continue}var b=v||l("ESCAPED_CHAR");if(b){c+=b;continue}c&&(a.push(c),c="");var B=l("OPEN");if(B){var A=d(),C=l("NAME")||"",E=l("PATTERN")||"",P=d();f("CLOSE"),a.push({name:C||(E?s++:""),pattern:C&&!E?o:E,prefix:A,suffix:P,modifier:l("MODIFIER")||""});continue}f("END")}return a}function BA(e,t){return il(ra(e,t),t)}function il(e,t){t===void 0&&(t={});var r=na(t),n=t.encode,i=n===void 0?function(u){return u}:n,o=t.validate,a=o===void 0?!0:o,s=e.map(function(u){if(typeof u=="object")return new RegExp("^(?:".concat(u.pattern,")$"),r)});return function(u){for(var c="",l=0;l<e.length;l++){var f=e[l];if(typeof f=="string"){c+=f;continue}var d=u?u[f.name]:void 0,v=f.modifier==="?"||f.modifier==="*",w=f.modifier==="*"||f.modifier==="+";if(Array.isArray(d)){if(!w)throw new TypeError('Expected "'.concat(f.name,'" to not repeat, but got an array'));if(d.length===0){if(v)continue;throw new TypeError('Expected "'.concat(f.name,'" to not be empty'))}for(var T=0;T<d.length;T++){var A=i(d[T],f);if(a&&!s[l].test(A))throw new TypeError('Expected all "'.concat(f.name,'" to match "').concat(f.pattern,'", but got "').concat(A,'"'));c+=f.prefix+A+f.suffix}continue}if(typeof d=="string"||typeof d=="number"){var A=i(String(d),f);if(a&&!s[l].test(A))throw new TypeError('Expected "'.concat(f.name,'" to match "').concat(f.pattern,'", but got "').concat(A,'"'));c+=f.prefix+A+f.suffix;continue}if(!v){var b=w?"an array":"a string";throw new TypeError('Expected "'.concat(f.name,'" to be ').concat(b))}}return c}}function OA(e,t){var r=[],n=ia(e,r,t);return ol(n,r,t)}function ol(e,t,r){r===void 0&&(r={});var n=r.decode,i=n===void 0?function(o){return o}:n;return function(o){var a=e.exec(o);if(!a)return!1;for(var s=a[0],u=a.index,c=Object.create(null),l=function(d){if(a[d]===void 0)return"continue";var v=t[d-1];v.modifier==="*"||v.modifier==="+"?c[v.name]=a[d].split(v.prefix+v.suffix).map(function(w){return i(w,v)}):c[v.name]=i(a[d],v)},f=1;f<a.length;f++)l(f);return{path:s,index:u,params:c}}}function Kt(e){return e.replace(/([.+*?=^!:${}()[\]|/\\])/g,"\\$1")}function na(e){return e&&e.sensitive?"":"i"}function PA(e,t){if(!t)return e;for(var r=/\((?:\?<(.*?)>)?(?!\?)/g,n=0,i=r.exec(e.source);i;)t.push({name:i[1]||n++,prefix:"",suffix:"",modifier:"",pattern:""}),i=r.exec(e.source);return e}function RA(e,t,r){var n=e.map(function(i){return ia(i,t,r).source});return new RegExp("(?:".concat(n.join("|"),")"),na(r))}function kA(e,t,r){return al(ra(e,r),t,r)}function al(e,t,r){r===void 0&&(r={});for(var n=r.strict,i=n===void 0?!1:n,o=r.start,a=o===void 0?!0:o,s=r.end,u=s===void 0?!0:s,c=r.encode,l=c===void 0?function(O){return O}:c,f=r.delimiter,d=f===void 0?"/#?":f,v=r.endsWith,w=v===void 0?"":v,T="[".concat(Kt(w),"]|$"),A="[".concat(Kt(d),"]"),b=a?"^":"",B=0,C=e;B<C.length;B++){var E=C[B];if(typeof E=="string")b+=Kt(l(E));else{var P=Kt(l(E.prefix)),N=Kt(l(E.suffix));if(E.pattern)if(t&&t.push(E),P||N)if(E.modifier==="+"||E.modifier==="*"){var q=E.modifier==="*"?"?":"";b+="(?:".concat(P,"((?:").concat(E.pattern,")(?:").concat(N).concat(P,"(?:").concat(E.pattern,"))*)").concat(N,")").concat(q)}else b+="(?:".concat(P,"(").concat(E.pattern,")").concat(N,")").concat(E.modifier);else E.modifier==="+"||E.modifier==="*"?b+="((?:".concat(E.pattern,")").concat(E.modifier,")"):b+="(".concat(E.pattern,")").concat(E.modifier);else b+="(?:".concat(P).concat(N,")").concat(E.modifier)}}if(u)i||(b+="".concat(A,"?")),b+=r.endsWith?"(?=".concat(T,")"):"$";else{var R=e[e.length-1],g=typeof R=="string"?A.indexOf(R[R.length-1])>-1:R===void 0;i||(b+="(?:".concat(A,"(?=").concat(T,"))?")),g||(b+="(?=".concat(A,"|").concat(T,")"))}return new RegExp(b,na(r))}function ia(e,t,r){return e instanceof RegExp?PA(e,t):Array.isArray(e)?RA(e,t,r):kA(e,t,r)}const LA=Object.freeze(Object.defineProperty({__proto__:null,compile:BA,match:OA,parse:ra,pathToRegexp:ia,regexpToFunction:ol,tokensToFunction:il,tokensToRegexp:al},Symbol.toStringTag,{value:"Module"})),xA=eu(LA);var gr={},mr={},ws;function sl(){if(ws)return mr;ws=1,Object.defineProperty(mr,"__esModule",{value:!0}),mr.toIsoResponse=void 0;var e=We;function t(r){var n;return{status:(n=r.status)!==null&&n!==void 0?n:200,statusText:r.statusText||"OK",headers:e.objectToHeaders(r.headers||{}),body:r.body}}return mr.toIsoResponse=t,mr}var Is;function FA(){if(Is)return gr;Is=1;var e=K&&K.__extends||function(){var T=function(A,b){return T=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(B,C){B.__proto__=C}||function(B,C){for(var E in C)Object.prototype.hasOwnProperty.call(C,E)&&(B[E]=C[E])},T(A,b)};return function(A,b){if(typeof b!="function"&&b!==null)throw new TypeError("Class extends value "+String(b)+" is not a constructor or null");T(A,b);function B(){this.constructor=A}A.prototype=b===null?Object.create(b):(B.prototype=b.prototype,new B)}}(),t=K&&K.__assign||function(){return t=Object.assign||function(T){for(var A,b=1,B=arguments.length;b<B;b++){A=arguments[b];for(var C in A)Object.prototype.hasOwnProperty.call(A,C)&&(T[C]=A[C])}return T},t.apply(this,arguments)},r=K&&K.__awaiter||function(T,A,b,B){function C(E){return E instanceof b?E:new b(function(P){P(E)})}return new(b||(b=Promise))(function(E,P){function N(g){try{R(B.next(g))}catch(O){P(O)}}function q(g){try{R(B.throw(g))}catch(O){P(O)}}function R(g){g.done?E(g.value):C(g.value).then(N,q)}R((B=B.apply(T,A||[])).next())})},n=K&&K.__generator||function(T,A){var b={label:0,sent:function(){if(E[0]&1)throw E[1];return E[1]},trys:[],ops:[]},B,C,E,P;return P={next:N(0),throw:N(1),return:N(2)},typeof Symbol=="function"&&(P[Symbol.iterator]=function(){return this}),P;function N(R){return function(g){return q([R,g])}}function q(R){if(B)throw new TypeError("Generator is already executing.");for(;b;)try{if(B=1,C&&(E=R[0]&2?C.return:R[0]?C.throw||((E=C.return)&&E.call(C),0):C.next)&&!(E=E.call(C,R[1])).done)return E;switch(C=0,E&&(R=[R[0]&2,E.value]),R[0]){case 0:case 1:E=R;break;case 4:return b.label++,{value:R[1],done:!1};case 5:b.label++,C=R[1],R=[0];continue;case 7:R=b.ops.pop(),b.trys.pop();continue;default:if(E=b.trys,!(E=E.length>0&&E[E.length-1])&&(R[0]===6||R[0]===2)){b=0;continue}if(R[0]===3&&(!E||R[1]>E[0]&&R[1]<E[3])){b.label=R[1];break}if(R[0]===6&&b.label<E[1]){b.label=E[1],E=R;break}if(E&&b.label<E[2]){b.label=E[2],b.ops.push(R);break}E[2]&&b.ops.pop(),b.trys.pop();continue}R=A.call(T,b)}catch(g){R=[6,g],C=0}finally{B=E=0}if(R[0]&5)throw R[1];return{value:R[0]?R[1]:void 0,done:!0}}},i=K&&K.__read||function(T,A){var b=typeof Symbol=="function"&&T[Symbol.iterator];if(!b)return T;var B=b.call(T),C,E=[],P;try{for(;(A===void 0||A-- >0)&&!(C=B.next()).done;)E.push(C.value)}catch(N){P={error:N}}finally{try{C&&!C.done&&(b=B.return)&&b.call(B)}finally{if(P)throw P.error}}return E};Object.defineProperty(gr,"__esModule",{value:!0}),gr.FetchInterceptor=void 0;var o=We,a=gt,s=St,u=Vt,c=ar,l=Vr,f=sl(),d=sr,v=function(T){e(A,T);function A(){return T.call(this,A.symbol)||this}return A.prototype.checkEnvironment=function(){return typeof globalThis<"u"&&typeof globalThis.fetch<"u"},A.prototype.setup=function(){var b=this,B=globalThis.fetch;a.invariant(!B[c.IS_PATCHED_MODULE],'Failed to patch the "fetch" module: already patched.'),globalThis.fetch=function(C,E){return r(b,void 0,void 0,function(){var P,N,q,R,g,O,j,Q,H,V,G,Y,_,z=this;return n(this,function(J){switch(J.label){case 0:return P=new Request(C,E),N=typeof C=="string"?C:C.url,q=P.method,this.log("[%s] %s",q,N),[4,P.clone().arrayBuffer()];case 1:return R=J.sent(),g=new URL(N,typeof location<"u"?location.origin:void 0),O=new u.IsomorphicRequest(g,{body:R,method:q,headers:new o.Headers(P.headers),credentials:P.credentials}),j=new d.InteractiveIsomorphicRequest(O),this.log("isomorphic request",j),this.log('emitting the "request" event for %d listener(s)...',this.emitter.listenerCount("request")),this.emitter.emit("request",j),this.log("awaiting for the mocked response..."),[4,s.until(function(){return r(z,void 0,void 0,function(){var ae,Z;return n(this,function(m){switch(m.label){case 0:return[4,this.emitter.untilIdle("request",function(S){var I=i(S.args,1),L=I[0];return L.id===j.id})];case 1:return m.sent(),this.log("all request listeners have been resolved!"),[4,j.respondWith.invoked()];case 2:return ae=i.apply(void 0,[m.sent(),1]),Z=ae[0],this.log("event.respondWith called with:",Z),[2,Z]}})})})];case 2:return Q=i.apply(void 0,[J.sent(),2]),H=Q[0],V=Q[1],H?(console.error(P.method+" "+P.url+" net::ERR_FAILED"),G=Object.assign(new TypeError("Failed to fetch"),{cause:H}),[2,Promise.reject(G)]):V?(this.log("received mocked response:",V),Y=f.toIsoResponse(V),this.log("derived isomorphic response:",Y),this.emitter.emit("response",j,Y),_=new Response(V.body,t(t({},Y),{headers:o.flattenHeadersObject(V.headers||{})})),Object.defineProperty(_,"url",{writable:!1,enumerable:!0,configurable:!1,value:j.url.href}),[2,_]):(this.log("no mocked response received!"),[2,B(P).then(function(ae){return r(z,void 0,void 0,function(){var Z,m,S,I;return n(this,function(L){switch(L.label){case 0:return Z=ae.clone(),this.log("original fetch performed",Z),S=(m=this.emitter).emit,I=["response",j],[4,w(Z)];case 1:return S.apply(m,I.concat([L.sent()])),[2,ae]}})})})])}})})},Object.defineProperty(globalThis.fetch,c.IS_PATCHED_MODULE,{enumerable:!0,configurable:!0,value:!0}),this.subscriptions.push(function(){Object.defineProperty(globalThis.fetch,c.IS_PATCHED_MODULE,{value:void 0}),globalThis.fetch=B,b.log('restored native "globalThis.fetch"!',globalThis.fetch.name)})},A.symbol=Symbol("fetch"),A}(l.Interceptor);gr.FetchInterceptor=v;function w(T){return r(this,void 0,void 0,function(){var A;return n(this,function(b){switch(b.label){case 0:return A={status:T.status,statusText:T.statusText,headers:o.objectToHeaders(o.headersToObject(T.headers))},[4,T.text()];case 1:return[2,(A.body=b.sent(),A)]}})})}return gr}var yr={},Er={},br={},pt={},Mt={},Ss;function _n(){if(Ss)return Mt;Ss=1;function e(o,a,s){if(s===void 0&&(s=Array.prototype),o&&typeof s.find=="function")return s.find.call(o,a);for(var u=0;u<o.length;u++)if(Object.prototype.hasOwnProperty.call(o,u)){var c=o[u];if(a.call(void 0,c,u,o))return c}}function t(o,a){return a===void 0&&(a=Object),a&&typeof a.freeze=="function"?a.freeze(o):o}function r(o,a){if(o===null||typeof o!="object")throw new TypeError("target is not an object");for(var s in a)Object.prototype.hasOwnProperty.call(a,s)&&(o[s]=a[s]);return o}var n=t({HTML:"text/html",isHTML:function(o){return o===n.HTML},XML_APPLICATION:"application/xml",XML_TEXT:"text/xml",XML_XHTML_APPLICATION:"application/xhtml+xml",XML_SVG_IMAGE:"image/svg+xml"}),i=t({HTML:"http://www.w3.org/1999/xhtml",isHTML:function(o){return o===i.HTML},SVG:"http://www.w3.org/2000/svg",XML:"http://www.w3.org/XML/1998/namespace",XMLNS:"http://www.w3.org/2000/xmlns/"});return Mt.assign=r,Mt.find=e,Mt.freeze=t,Mt.MIME_TYPE=n,Mt.NAMESPACE=i,Mt}var Ns;function ul(){if(Ns)return pt;Ns=1;var e=_n(),t=e.find,r=e.NAMESPACE;function n(p){return p!==""}function i(p){return p?p.split(/[\t\n\f\r ]+/).filter(n):[]}function o(p,h){return p.hasOwnProperty(h)||(p[h]=!0),p}function a(p){if(!p)return[];var h=i(p);return Object.keys(h.reduce(o,{}))}function s(p){return function(h){return p&&p.indexOf(h)!==-1}}function u(p,h){for(var D in p)Object.prototype.hasOwnProperty.call(p,D)&&(h[D]=p[D])}function c(p,h){var D=p.prototype;if(!(D instanceof h)){let k=function(){};k.prototype=h.prototype,k=new k,u(D,k),p.prototype=D=k}D.constructor!=p&&(typeof p!="function"&&console.error("unknown Class:"+p),D.constructor=p)}var l={},f=l.ELEMENT_NODE=1,d=l.ATTRIBUTE_NODE=2,v=l.TEXT_NODE=3,w=l.CDATA_SECTION_NODE=4,T=l.ENTITY_REFERENCE_NODE=5,A=l.ENTITY_NODE=6,b=l.PROCESSING_INSTRUCTION_NODE=7,B=l.COMMENT_NODE=8,C=l.DOCUMENT_NODE=9,E=l.DOCUMENT_TYPE_NODE=10,P=l.DOCUMENT_FRAGMENT_NODE=11,N=l.NOTATION_NODE=12,q={},R={};q.INDEX_SIZE_ERR=(R[1]="Index size error",1),q.DOMSTRING_SIZE_ERR=(R[2]="DOMString size error",2);var g=q.HIERARCHY_REQUEST_ERR=(R[3]="Hierarchy request error",3);q.WRONG_DOCUMENT_ERR=(R[4]="Wrong document",4),q.INVALID_CHARACTER_ERR=(R[5]="Invalid character",5),q.NO_DATA_ALLOWED_ERR=(R[6]="No data allowed",6),q.NO_MODIFICATION_ALLOWED_ERR=(R[7]="No modification allowed",7);var O=q.NOT_FOUND_ERR=(R[8]="Not found",8);q.NOT_SUPPORTED_ERR=(R[9]="Not supported",9);var j=q.INUSE_ATTRIBUTE_ERR=(R[10]="Attribute in use",10);q.INVALID_STATE_ERR=(R[11]="Invalid state",11),q.SYNTAX_ERR=(R[12]="Syntax error",12),q.INVALID_MODIFICATION_ERR=(R[13]="Invalid modification",13),q.NAMESPACE_ERR=(R[14]="Invalid namespace",14),q.INVALID_ACCESS_ERR=(R[15]="Invalid access",15);function Q(p,h){if(h instanceof Error)var D=h;else D=this,Error.call(this,R[p]),this.message=R[p],Error.captureStackTrace&&Error.captureStackTrace(this,Q);return D.code=p,h&&(this.message=this.message+": "+h),D}Q.prototype=Error.prototype,u(q,Q);function H(){}H.prototype={length:0,item:function(p){return p>=0&&p<this.length?this[p]:null},toString:function(p,h){for(var D=[],k=0;k<this.length;k++)Wt(this[k],D,p,h);return D.join("")},filter:function(p){return Array.prototype.filter.call(this,p)},indexOf:function(p){return Array.prototype.indexOf.call(this,p)}};function V(p,h){this._node=p,this._refresh=h,G(this)}function G(p){var h=p._node._inc||p._node.ownerDocument._inc;if(p._inc!==h){var D=p._refresh(p._node);if(ya(p,"length",D.length),!p.$$length||D.length<p.$$length)for(var k=D.length;k in p;k++)Object.prototype.hasOwnProperty.call(p,k)&&delete p[k];u(D,p),p._inc=h}}V.prototype.item=function(p){return G(this),this[p]||null},c(V,H);function Y(){}function _(p,h){for(var D=p.length;D--;)if(p[D]===h)return D}function z(p,h,D,k){if(k?h[_(h,k)]=D:h[h.length++]=D,p){D.ownerElement=p;var X=p.ownerDocument;X&&(k&&$(X,p,k),L(X,p,D))}}function J(p,h,D){var k=_(h,D);if(k>=0){for(var X=h.length-1;k<X;)h[k]=h[++k];if(h.length=X,p){var ie=p.ownerDocument;ie&&($(ie,p,D),D.ownerElement=null)}}else throw new Q(O,new Error(p.tagName+"@"+D))}Y.prototype={length:0,item:H.prototype.item,getNamedItem:function(p){for(var h=this.length;h--;){var D=this[h];if(D.nodeName==p)return D}},setNamedItem:function(p){var h=p.ownerElement;if(h&&h!=this._ownerElement)throw new Q(j);var D=this.getNamedItem(p.nodeName);return z(this._ownerElement,this,p,D),D},setNamedItemNS:function(p){var h=p.ownerElement,D;if(h&&h!=this._ownerElement)throw new Q(j);return D=this.getNamedItemNS(p.namespaceURI,p.localName),z(this._ownerElement,this,p,D),D},removeNamedItem:function(p){var h=this.getNamedItem(p);return J(this._ownerElement,this,h),h},removeNamedItemNS:function(p,h){var D=this.getNamedItemNS(p,h);return J(this._ownerElement,this,D),D},getNamedItemNS:function(p,h){for(var D=this.length;D--;){var k=this[D];if(k.localName==h&&k.namespaceURI==p)return k}return null}};function ae(){}ae.prototype={hasFeature:function(p,h){return!0},createDocument:function(p,h,D){var k=new I;if(k.implementation=this,k.childNodes=new H,k.doctype=D||null,D&&k.appendChild(D),h){var X=k.createElementNS(p,h);k.appendChild(X)}return k},createDocumentType:function(p,h,D){var k=new nn;return k.name=p,k.nodeName=p,k.publicId=h||"",k.systemId=D||"",k}};function Z(){}Z.prototype={firstChild:null,lastChild:null,previousSibling:null,nextSibling:null,attributes:null,parentNode:null,childNodes:null,ownerDocument:null,nodeValue:null,namespaceURI:null,prefix:null,localName:null,insertBefore:function(p,h){return U(this,p,h)},replaceChild:function(p,h){U(this,p,h,Xt),h&&this.removeChild(h)},removeChild:function(p){return W(this,p)},appendChild:function(p){return this.insertBefore(p,null)},hasChildNodes:function(){return this.firstChild!=null},cloneNode:function(p){return ui(this.ownerDocument||this,this,p)},normalize:function(){for(var p=this.firstChild;p;){var h=p.nextSibling;h&&h.nodeType==v&&p.nodeType==v?(this.removeChild(h),p.appendData(h.data)):(p.normalize(),p=h)}},isSupported:function(p,h){return this.ownerDocument.implementation.hasFeature(p,h)},hasAttributes:function(){return this.attributes.length>0},lookupPrefix:function(p){for(var h=this;h;){var D=h._nsMap;if(D){for(var k in D)if(Object.prototype.hasOwnProperty.call(D,k)&&D[k]===p)return k}h=h.nodeType==d?h.ownerDocument:h.parentNode}return null},lookupNamespaceURI:function(p){for(var h=this;h;){var D=h._nsMap;if(D&&Object.prototype.hasOwnProperty.call(D,p))return D[p];h=h.nodeType==d?h.ownerDocument:h.parentNode}return null},isDefaultNamespace:function(p){var h=this.lookupPrefix(p);return h==null}};function m(p){return p=="<"&&"&lt;"||p==">"&&"&gt;"||p=="&"&&"&amp;"||p=='"'&&"&quot;"||"&#"+p.charCodeAt()+";"}u(l,Z),u(l,Z.prototype);function S(p,h){if(h(p))return!0;if(p=p.firstChild)do if(S(p,h))return!0;while(p=p.nextSibling)}function I(){this.ownerDocument=this}function L(p,h,D){p&&p._inc++;var k=D.namespaceURI;k===r.XMLNS&&(h._nsMap[D.prefix?D.localName:""]=D.value)}function $(p,h,D,k){p&&p._inc++;var X=D.namespaceURI;X===r.XMLNS&&delete h._nsMap[D.prefix?D.localName:""]}function te(p,h,D){if(p&&p._inc){p._inc++;var k=h.childNodes;if(D)k[k.length++]=D;else{for(var X=h.firstChild,ie=0;X;)k[ie++]=X,X=X.nextSibling;k.length=ie,delete k[k.length]}}}function W(p,h){var D=h.previousSibling,k=h.nextSibling;return D?D.nextSibling=k:p.firstChild=k,k?k.previousSibling=D:p.lastChild=D,h.parentNode=null,h.previousSibling=null,h.nextSibling=null,te(p.ownerDocument,p),h}function ne(p){return p&&(p.nodeType===Z.DOCUMENT_NODE||p.nodeType===Z.DOCUMENT_FRAGMENT_NODE||p.nodeType===Z.ELEMENT_NODE)}function ce(p){return p&&(pe(p)||Ke(p)||de(p)||p.nodeType===Z.DOCUMENT_FRAGMENT_NODE||p.nodeType===Z.COMMENT_NODE||p.nodeType===Z.PROCESSING_INSTRUCTION_NODE)}function de(p){return p&&p.nodeType===Z.DOCUMENT_TYPE_NODE}function pe(p){return p&&p.nodeType===Z.ELEMENT_NODE}function Ke(p){return p&&p.nodeType===Z.TEXT_NODE}function De(p,h){var D=p.childNodes||[];if(t(D,pe)||de(h))return!1;var k=t(D,de);return!(h&&k&&D.indexOf(k)>D.indexOf(h))}function Ze(p,h){var D=p.childNodes||[];function k(ie){return pe(ie)&&ie!==h}if(t(D,k))return!1;var X=t(D,de);return!(h&&X&&D.indexOf(X)>D.indexOf(h))}function Se(p,h,D){if(!ne(p))throw new Q(g,"Unexpected parent node type "+p.nodeType);if(D&&D.parentNode!==p)throw new Q(O,"child not in parent");if(!ce(h)||de(h)&&p.nodeType!==Z.DOCUMENT_NODE)throw new Q(g,"Unexpected node type "+h.nodeType+" for parent node type "+p.nodeType)}function Gt(p,h,D){var k=p.childNodes||[],X=h.childNodes||[];if(h.nodeType===Z.DOCUMENT_FRAGMENT_NODE){var ie=X.filter(pe);if(ie.length>1||t(X,Ke))throw new Q(g,"More than one element or text in fragment");if(ie.length===1&&!De(p,D))throw new Q(g,"Element in fragment can not be inserted before doctype")}if(pe(h)&&!De(p,D))throw new Q(g,"Only one element can be added and only after doctype");if(de(h)){if(t(k,de))throw new Q(g,"Only one doctype is allowed");var me=t(k,pe);if(D&&k.indexOf(me)<k.indexOf(D))throw new Q(g,"Doctype can only be inserted before an element");if(!D&&me)throw new Q(g,"Doctype can not be appended since element is present")}}function Xt(p,h,D){var k=p.childNodes||[],X=h.childNodes||[];if(h.nodeType===Z.DOCUMENT_FRAGMENT_NODE){var ie=X.filter(pe);if(ie.length>1||t(X,Ke))throw new Q(g,"More than one element or text in fragment");if(ie.length===1&&!Ze(p,D))throw new Q(g,"Element in fragment can not be inserted before doctype")}if(pe(h)&&!Ze(p,D))throw new Q(g,"Only one element can be added and only after doctype");if(de(h)){if(t(k,function(lt){return de(lt)&&lt!==D}))throw new Q(g,"Only one doctype is allowed");var me=t(k,pe);if(D&&k.indexOf(me)<k.indexOf(D))throw new Q(g,"Doctype can only be inserted before an element")}}function U(p,h,D,k){Se(p,h,D),p.nodeType===Z.DOCUMENT_NODE&&(k||Gt)(p,h,D);var X=h.parentNode;if(X&&X.removeChild(h),h.nodeType===P){var ie=h.firstChild;if(ie==null)return h;var me=h.lastChild}else ie=me=h;var Fe=D?D.previousSibling:p.lastChild;ie.previousSibling=Fe,me.nextSibling=D,Fe?Fe.nextSibling=ie:p.firstChild=ie,D==null?p.lastChild=me:D.previousSibling=me;do ie.parentNode=p;while(ie!==me&&(ie=ie.nextSibling));return te(p.ownerDocument||p,p),h.nodeType==P&&(h.firstChild=h.lastChild=null),h}function Jt(p,h){return h.parentNode&&h.parentNode.removeChild(h),h.parentNode=p,h.previousSibling=p.lastChild,h.nextSibling=null,h.previousSibling?h.previousSibling.nextSibling=h:p.firstChild=h,p.lastChild=h,te(p.ownerDocument,p,h),h}I.prototype={nodeName:"#document",nodeType:C,doctype:null,documentElement:null,_inc:1,insertBefore:function(p,h){if(p.nodeType==P){for(var D=p.firstChild;D;){var k=D.nextSibling;this.insertBefore(D,h),D=k}return p}return U(this,p,h),p.ownerDocument=this,this.documentElement===null&&p.nodeType===f&&(this.documentElement=p),p},removeChild:function(p){return this.documentElement==p&&(this.documentElement=null),W(this,p)},replaceChild:function(p,h){U(this,p,h,Xt),p.ownerDocument=this,h&&this.removeChild(h),pe(p)&&(this.documentElement=p)},importNode:function(p,h){return ma(this,p,h)},getElementById:function(p){var h=null;return S(this.documentElement,function(D){if(D.nodeType==f&&D.getAttribute("id")==p)return h=D,!0}),h},getElementsByClassName:function(p){var h=a(p);return new V(this,function(D){var k=[];return h.length>0&&S(D.documentElement,function(X){if(X!==D&&X.nodeType===f){var ie=X.getAttribute("class");if(ie){var me=p===ie;if(!me){var Fe=a(ie);me=h.every(s(Fe))}me&&k.push(X)}}}),k})},createElement:function(p){var h=new he;h.ownerDocument=this,h.nodeName=p,h.tagName=p,h.localName=p,h.childNodes=new H;var D=h.attributes=new Y;return D._ownerElement=h,h},createDocumentFragment:function(){var p=new on;return p.ownerDocument=this,p.childNodes=new H,p},createTextNode:function(p){var h=new ri;return h.ownerDocument=this,h.appendData(p),h},createComment:function(p){var h=new ni;return h.ownerDocument=this,h.appendData(p),h},createCDATASection:function(p){var h=new ii;return h.ownerDocument=this,h.appendData(p),h},createProcessingInstruction:function(p,h){var D=new ai;return D.ownerDocument=this,D.tagName=D.nodeName=D.target=p,D.nodeValue=D.data=h,D},createAttribute:function(p){var h=new Re;return h.ownerDocument=this,h.name=p,h.nodeName=p,h.localName=p,h.specified=!0,h},createEntityReference:function(p){var h=new oi;return h.ownerDocument=this,h.nodeName=p,h},createElementNS:function(p,h){var D=new he,k=h.split(":"),X=D.attributes=new Y;return D.childNodes=new H,D.ownerDocument=this,D.nodeName=h,D.tagName=h,D.namespaceURI=p,k.length==2?(D.prefix=k[0],D.localName=k[1]):D.localName=h,X._ownerElement=D,D},createAttributeNS:function(p,h){var D=new Re,k=h.split(":");return D.ownerDocument=this,D.nodeName=h,D.name=h,D.namespaceURI=p,D.specified=!0,k.length==2?(D.prefix=k[0],D.localName=k[1]):D.localName=h,D}},c(I,Z);function he(){this._nsMap={}}he.prototype={nodeType:f,hasAttribute:function(p){return this.getAttributeNode(p)!=null},getAttribute:function(p){var h=this.getAttributeNode(p);return h&&h.value||""},getAttributeNode:function(p){return this.attributes.getNamedItem(p)},setAttribute:function(p,h){var D=this.ownerDocument.createAttribute(p);D.value=D.nodeValue=""+h,this.setAttributeNode(D)},removeAttribute:function(p){var h=this.getAttributeNode(p);h&&this.removeAttributeNode(h)},appendChild:function(p){return p.nodeType===P?this.insertBefore(p,null):Jt(this,p)},setAttributeNode:function(p){return this.attributes.setNamedItem(p)},setAttributeNodeNS:function(p){return this.attributes.setNamedItemNS(p)},removeAttributeNode:function(p){return this.attributes.removeNamedItem(p.nodeName)},removeAttributeNS:function(p,h){var D=this.getAttributeNodeNS(p,h);D&&this.removeAttributeNode(D)},hasAttributeNS:function(p,h){return this.getAttributeNodeNS(p,h)!=null},getAttributeNS:function(p,h){var D=this.getAttributeNodeNS(p,h);return D&&D.value||""},setAttributeNS:function(p,h,D){var k=this.ownerDocument.createAttributeNS(p,h);k.value=k.nodeValue=""+D,this.setAttributeNode(k)},getAttributeNodeNS:function(p,h){return this.attributes.getNamedItemNS(p,h)},getElementsByTagName:function(p){return new V(this,function(h){var D=[];return S(h,function(k){k!==h&&k.nodeType==f&&(p==="*"||k.tagName==p)&&D.push(k)}),D})},getElementsByTagNameNS:function(p,h){return new V(this,function(D){var k=[];return S(D,function(X){X!==D&&X.nodeType===f&&(p==="*"||X.namespaceURI===p)&&(h==="*"||X.localName==h)&&k.push(X)}),k})}},I.prototype.getElementsByTagName=he.prototype.getElementsByTagName,I.prototype.getElementsByTagNameNS=he.prototype.getElementsByTagNameNS,c(he,Z);function Re(){}Re.prototype.nodeType=d,c(Re,Z);function Ot(){}Ot.prototype={data:"",substringData:function(p,h){return this.data.substring(p,p+h)},appendData:function(p){p=this.data+p,this.nodeValue=this.data=p,this.length=p.length},insertData:function(p,h){this.replaceData(p,0,h)},appendChild:function(p){throw new Error(R[g])},deleteData:function(p,h){this.replaceData(p,h,"")},replaceData:function(p,h,D){var k=this.data.substring(0,p),X=this.data.substring(p+h);D=k+D+X,this.nodeValue=this.data=D,this.length=D.length}},c(Ot,Z);function ri(){}ri.prototype={nodeName:"#text",nodeType:v,splitText:function(p){var h=this.data,D=h.substring(p);h=h.substring(0,p),this.data=this.nodeValue=h,this.length=h.length;var k=this.ownerDocument.createTextNode(D);return this.parentNode&&this.parentNode.insertBefore(k,this.nextSibling),k}},c(ri,Ot);function ni(){}ni.prototype={nodeName:"#comment",nodeType:B},c(ni,Ot);function ii(){}ii.prototype={nodeName:"#cdata-section",nodeType:w},c(ii,Ot);function nn(){}nn.prototype.nodeType=E,c(nn,Z);function da(){}da.prototype.nodeType=N,c(da,Z);function ha(){}ha.prototype.nodeType=A,c(ha,Z);function oi(){}oi.prototype.nodeType=T,c(oi,Z);function on(){}on.prototype.nodeName="#document-fragment",on.prototype.nodeType=P,c(on,Z);function ai(){}ai.prototype.nodeType=b,c(ai,Z);function Aa(){}Aa.prototype.serializeToString=function(p,h,D){return va.call(p,h,D)},Z.prototype.toString=va;function va(p,h){var D=[],k=this.nodeType==9&&this.documentElement||this,X=k.prefix,ie=k.namespaceURI;if(ie&&X==null){var X=k.lookupPrefix(ie);if(X==null)var me=[{namespace:ie,prefix:null}]}return Wt(this,D,p,h,me),D.join("")}function ga(p,h,D){var k=p.prefix||"",X=p.namespaceURI;if(!X||k==="xml"&&X===r.XML||X===r.XMLNS)return!1;for(var ie=D.length;ie--;){var me=D[ie];if(me.prefix===k)return me.namespace!==X}return!0}function si(p,h,D){p.push(" ",h,'="',D.replace(/[<>&"\t\n\r]/g,m),'"')}function Wt(p,h,D,k,X){if(X||(X=[]),k)if(p=k(p),p){if(typeof p=="string"){h.push(p);return}}else return;switch(p.nodeType){case f:var ie=p.attributes,me=ie.length,Le=p.firstChild,Fe=p.tagName;D=r.isHTML(p.namespaceURI)||D;var lt=Fe;if(!D&&!p.prefix&&p.namespaceURI){for(var mt,ft=0;ft<ie.length;ft++)if(ie.item(ft).name==="xmlns"){mt=ie.item(ft).value;break}if(!mt)for(var Pt=X.length-1;Pt>=0;Pt--){var Rt=X[Pt];if(Rt.prefix===""&&Rt.namespace===p.namespaceURI){mt=Rt.namespace;break}}if(mt!==p.namespaceURI)for(var Pt=X.length-1;Pt>=0;Pt--){var Rt=X[Pt];if(Rt.namespace===p.namespaceURI){Rt.prefix&&(lt=Rt.prefix+":"+Fe);break}}}h.push("<",lt);for(var kt=0;kt<me;kt++){var nt=ie.item(kt);nt.prefix=="xmlns"?X.push({prefix:nt.localName,namespace:nt.value}):nt.nodeName=="xmlns"&&X.push({prefix:"",namespace:nt.value})}for(var kt=0;kt<me;kt++){var nt=ie.item(kt);if(ga(nt,D,X)){var Lt=nt.prefix||"",hr=nt.namespaceURI;si(h,Lt?"xmlns:"+Lt:"xmlns",hr),X.push({prefix:Lt,namespace:hr})}Wt(nt,h,D,k,X)}if(Fe===lt&&ga(p,D,X)){var Lt=p.prefix||"",hr=p.namespaceURI;si(h,Lt?"xmlns:"+Lt:"xmlns",hr),X.push({prefix:Lt,namespace:hr})}if(Le||D&&!/^(?:meta|link|img|br|hr|input)$/i.test(Fe)){if(h.push(">"),D&&/^script$/i.test(Fe))for(;Le;)Le.data?h.push(Le.data):Wt(Le,h,D,k,X.slice()),Le=Le.nextSibling;else for(;Le;)Wt(Le,h,D,k,X.slice()),Le=Le.nextSibling;h.push("</",lt,">")}else h.push("/>");return;case C:case P:for(var Le=p.firstChild;Le;)Wt(Le,h,D,k,X.slice()),Le=Le.nextSibling;return;case d:return si(h,p.name,p.value);case v:return h.push(p.data.replace(/[<&>]/g,m));case w:return h.push("<![CDATA[",p.data,"]]>");case B:return h.push("<!--",p.data,"-->");case E:var Ea=p.publicId,Yt=p.systemId;if(h.push("<!DOCTYPE ",p.name),Ea)h.push(" PUBLIC ",Ea),Yt&&Yt!="."&&h.push(" ",Yt),h.push(">");else if(Yt&&Yt!=".")h.push(" SYSTEM ",Yt,">");else{var ba=p.internalSubset;ba&&h.push(" [",ba,"]"),h.push(">")}return;case b:return h.push("<?",p.target," ",p.data,"?>");case T:return h.push("&",p.nodeName,";");default:h.push("??",p.nodeName)}}function ma(p,h,D){var k;switch(h.nodeType){case f:k=h.cloneNode(!1),k.ownerDocument=p;case P:break;case d:D=!0;break}if(k||(k=h.cloneNode(!1)),k.ownerDocument=p,k.parentNode=null,D)for(var X=h.firstChild;X;)k.appendChild(ma(p,X,D)),X=X.nextSibling;return k}function ui(p,h,D){var k=new h.constructor;for(var X in h)if(Object.prototype.hasOwnProperty.call(h,X)){var ie=h[X];typeof ie!="object"&&ie!=k[X]&&(k[X]=ie)}switch(h.childNodes&&(k.childNodes=new H),k.ownerDocument=p,k.nodeType){case f:var me=h.attributes,Fe=k.attributes=new Y,lt=me.length;Fe._ownerElement=k;for(var mt=0;mt<lt;mt++)k.setAttributeNode(ui(p,me.item(mt),!0));break;case d:D=!0}if(D)for(var ft=h.firstChild;ft;)k.appendChild(ui(p,ft,D)),ft=ft.nextSibling;return k}function ya(p,h,D){p[h]=D}try{if(Object.defineProperty){let p=function(h){switch(h.nodeType){case f:case P:var D=[];for(h=h.firstChild;h;)h.nodeType!==7&&h.nodeType!==8&&D.push(p(h)),h=h.nextSibling;return D.join("");default:return h.nodeValue}};Object.defineProperty(V.prototype,"length",{get:function(){return G(this),this.$$length}}),Object.defineProperty(Z.prototype,"textContent",{get:function(){return p(this)},set:function(h){switch(this.nodeType){case f:case P:for(;this.firstChild;)this.removeChild(this.firstChild);(h||String(h))&&this.appendChild(this.ownerDocument.createTextNode(h));break;default:this.data=h,this.value=h,this.nodeValue=h}}}),ya=function(h,D,k){h["$$"+D]=k}}}catch{}return pt.DocumentType=nn,pt.DOMException=Q,pt.DOMImplementation=ae,pt.Element=he,pt.Node=Z,pt.NodeList=H,pt.XMLSerializer=Aa,pt}var Dr={},qi={},Cs;function MA(){return Cs||(Cs=1,function(e){var t=_n().freeze;e.XML_ENTITIES=t({amp:"&",apos:"'",gt:">",lt:"<",quot:'"'}),e.HTML_ENTITIES=t({Aacute:"Á",aacute:"á",Abreve:"Ă",abreve:"ă",ac:"∾",acd:"∿",acE:"∾̳",Acirc:"Â",acirc:"â",acute:"´",Acy:"А",acy:"а",AElig:"Æ",aelig:"æ",af:"⁡",Afr:"𝔄",afr:"𝔞",Agrave:"À",agrave:"à",alefsym:"ℵ",aleph:"ℵ",Alpha:"Α",alpha:"α",Amacr:"Ā",amacr:"ā",amalg:"⨿",AMP:"&",amp:"&",And:"⩓",and:"∧",andand:"⩕",andd:"⩜",andslope:"⩘",andv:"⩚",ang:"∠",ange:"⦤",angle:"∠",angmsd:"∡",angmsdaa:"⦨",angmsdab:"⦩",angmsdac:"⦪",angmsdad:"⦫",angmsdae:"⦬",angmsdaf:"⦭",angmsdag:"⦮",angmsdah:"⦯",angrt:"∟",angrtvb:"⊾",angrtvbd:"⦝",angsph:"∢",angst:"Å",angzarr:"⍼",Aogon:"Ą",aogon:"ą",Aopf:"𝔸",aopf:"𝕒",ap:"≈",apacir:"⩯",apE:"⩰",ape:"≊",apid:"≋",apos:"'",ApplyFunction:"⁡",approx:"≈",approxeq:"≊",Aring:"Å",aring:"å",Ascr:"𝒜",ascr:"𝒶",Assign:"≔",ast:"*",asymp:"≈",asympeq:"≍",Atilde:"Ã",atilde:"ã",Auml:"Ä",auml:"ä",awconint:"∳",awint:"⨑",backcong:"≌",backepsilon:"϶",backprime:"‵",backsim:"∽",backsimeq:"⋍",Backslash:"∖",Barv:"⫧",barvee:"⊽",Barwed:"⌆",barwed:"⌅",barwedge:"⌅",bbrk:"⎵",bbrktbrk:"⎶",bcong:"≌",Bcy:"Б",bcy:"б",bdquo:"„",becaus:"∵",Because:"∵",because:"∵",bemptyv:"⦰",bepsi:"϶",bernou:"ℬ",Bernoullis:"ℬ",Beta:"Β",beta:"β",beth:"ℶ",between:"≬",Bfr:"𝔅",bfr:"𝔟",bigcap:"⋂",bigcirc:"◯",bigcup:"⋃",bigodot:"⨀",bigoplus:"⨁",bigotimes:"⨂",bigsqcup:"⨆",bigstar:"★",bigtriangledown:"▽",bigtriangleup:"△",biguplus:"⨄",bigvee:"⋁",bigwedge:"⋀",bkarow:"⤍",blacklozenge:"⧫",blacksquare:"▪",blacktriangle:"▴",blacktriangledown:"▾",blacktriangleleft:"◂",blacktriangleright:"▸",blank:"␣",blk12:"▒",blk14:"░",blk34:"▓",block:"█",bne:"=⃥",bnequiv:"≡⃥",bNot:"⫭",bnot:"⌐",Bopf:"𝔹",bopf:"𝕓",bot:"⊥",bottom:"⊥",bowtie:"⋈",boxbox:"⧉",boxDL:"╗",boxDl:"╖",boxdL:"╕",boxdl:"┐",boxDR:"╔",boxDr:"╓",boxdR:"╒",boxdr:"┌",boxH:"═",boxh:"─",boxHD:"╦",boxHd:"╤",boxhD:"╥",boxhd:"┬",boxHU:"╩",boxHu:"╧",boxhU:"╨",boxhu:"┴",boxminus:"⊟",boxplus:"⊞",boxtimes:"⊠",boxUL:"╝",boxUl:"╜",boxuL:"╛",boxul:"┘",boxUR:"╚",boxUr:"╙",boxuR:"╘",boxur:"└",boxV:"║",boxv:"│",boxVH:"╬",boxVh:"╫",boxvH:"╪",boxvh:"┼",boxVL:"╣",boxVl:"╢",boxvL:"╡",boxvl:"┤",boxVR:"╠",boxVr:"╟",boxvR:"╞",boxvr:"├",bprime:"‵",Breve:"˘",breve:"˘",brvbar:"¦",Bscr:"ℬ",bscr:"𝒷",bsemi:"⁏",bsim:"∽",bsime:"⋍",bsol:"\\",bsolb:"⧅",bsolhsub:"⟈",bull:"•",bullet:"•",bump:"≎",bumpE:"⪮",bumpe:"≏",Bumpeq:"≎",bumpeq:"≏",Cacute:"Ć",cacute:"ć",Cap:"⋒",cap:"∩",capand:"⩄",capbrcup:"⩉",capcap:"⩋",capcup:"⩇",capdot:"⩀",CapitalDifferentialD:"ⅅ",caps:"∩︀",caret:"⁁",caron:"ˇ",Cayleys:"ℭ",ccaps:"⩍",Ccaron:"Č",ccaron:"č",Ccedil:"Ç",ccedil:"ç",Ccirc:"Ĉ",ccirc:"ĉ",Cconint:"∰",ccups:"⩌",ccupssm:"⩐",Cdot:"Ċ",cdot:"ċ",cedil:"¸",Cedilla:"¸",cemptyv:"⦲",cent:"¢",CenterDot:"·",centerdot:"·",Cfr:"ℭ",cfr:"𝔠",CHcy:"Ч",chcy:"ч",check:"✓",checkmark:"✓",Chi:"Χ",chi:"χ",cir:"○",circ:"ˆ",circeq:"≗",circlearrowleft:"↺",circlearrowright:"↻",circledast:"⊛",circledcirc:"⊚",circleddash:"⊝",CircleDot:"⊙",circledR:"®",circledS:"Ⓢ",CircleMinus:"⊖",CirclePlus:"⊕",CircleTimes:"⊗",cirE:"⧃",cire:"≗",cirfnint:"⨐",cirmid:"⫯",cirscir:"⧂",ClockwiseContourIntegral:"∲",CloseCurlyDoubleQuote:"”",CloseCurlyQuote:"’",clubs:"♣",clubsuit:"♣",Colon:"∷",colon:":",Colone:"⩴",colone:"≔",coloneq:"≔",comma:",",commat:"@",comp:"∁",compfn:"∘",complement:"∁",complexes:"ℂ",cong:"≅",congdot:"⩭",Congruent:"≡",Conint:"∯",conint:"∮",ContourIntegral:"∮",Copf:"ℂ",copf:"𝕔",coprod:"∐",Coproduct:"∐",COPY:"©",copy:"©",copysr:"℗",CounterClockwiseContourIntegral:"∳",crarr:"↵",Cross:"⨯",cross:"✗",Cscr:"𝒞",cscr:"𝒸",csub:"⫏",csube:"⫑",csup:"⫐",csupe:"⫒",ctdot:"⋯",cudarrl:"⤸",cudarrr:"⤵",cuepr:"⋞",cuesc:"⋟",cularr:"↶",cularrp:"⤽",Cup:"⋓",cup:"∪",cupbrcap:"⩈",CupCap:"≍",cupcap:"⩆",cupcup:"⩊",cupdot:"⊍",cupor:"⩅",cups:"∪︀",curarr:"↷",curarrm:"⤼",curlyeqprec:"⋞",curlyeqsucc:"⋟",curlyvee:"⋎",curlywedge:"⋏",curren:"¤",curvearrowleft:"↶",curvearrowright:"↷",cuvee:"⋎",cuwed:"⋏",cwconint:"∲",cwint:"∱",cylcty:"⌭",Dagger:"‡",dagger:"†",daleth:"ℸ",Darr:"↡",dArr:"⇓",darr:"↓",dash:"‐",Dashv:"⫤",dashv:"⊣",dbkarow:"⤏",dblac:"˝",Dcaron:"Ď",dcaron:"ď",Dcy:"Д",dcy:"д",DD:"ⅅ",dd:"ⅆ",ddagger:"‡",ddarr:"⇊",DDotrahd:"⤑",ddotseq:"⩷",deg:"°",Del:"∇",Delta:"Δ",delta:"δ",demptyv:"⦱",dfisht:"⥿",Dfr:"𝔇",dfr:"𝔡",dHar:"⥥",dharl:"⇃",dharr:"⇂",DiacriticalAcute:"´",DiacriticalDot:"˙",DiacriticalDoubleAcute:"˝",DiacriticalGrave:"`",DiacriticalTilde:"˜",diam:"⋄",Diamond:"⋄",diamond:"⋄",diamondsuit:"♦",diams:"♦",die:"¨",DifferentialD:"ⅆ",digamma:"ϝ",disin:"⋲",div:"÷",divide:"÷",divideontimes:"⋇",divonx:"⋇",DJcy:"Ђ",djcy:"ђ",dlcorn:"⌞",dlcrop:"⌍",dollar:"$",Dopf:"𝔻",dopf:"𝕕",Dot:"¨",dot:"˙",DotDot:"⃜",doteq:"≐",doteqdot:"≑",DotEqual:"≐",dotminus:"∸",dotplus:"∔",dotsquare:"⊡",doublebarwedge:"⌆",DoubleContourIntegral:"∯",DoubleDot:"¨",DoubleDownArrow:"⇓",DoubleLeftArrow:"⇐",DoubleLeftRightArrow:"⇔",DoubleLeftTee:"⫤",DoubleLongLeftArrow:"⟸",DoubleLongLeftRightArrow:"⟺",DoubleLongRightArrow:"⟹",DoubleRightArrow:"⇒",DoubleRightTee:"⊨",DoubleUpArrow:"⇑",DoubleUpDownArrow:"⇕",DoubleVerticalBar:"∥",DownArrow:"↓",Downarrow:"⇓",downarrow:"↓",DownArrowBar:"⤓",DownArrowUpArrow:"⇵",DownBreve:"̑",downdownarrows:"⇊",downharpoonleft:"⇃",downharpoonright:"⇂",DownLeftRightVector:"⥐",DownLeftTeeVector:"⥞",DownLeftVector:"↽",DownLeftVectorBar:"⥖",DownRightTeeVector:"⥟",DownRightVector:"⇁",DownRightVectorBar:"⥗",DownTee:"⊤",DownTeeArrow:"↧",drbkarow:"⤐",drcorn:"⌟",drcrop:"⌌",Dscr:"𝒟",dscr:"𝒹",DScy:"Ѕ",dscy:"ѕ",dsol:"⧶",Dstrok:"Đ",dstrok:"đ",dtdot:"⋱",dtri:"▿",dtrif:"▾",duarr:"⇵",duhar:"⥯",dwangle:"⦦",DZcy:"Џ",dzcy:"џ",dzigrarr:"⟿",Eacute:"É",eacute:"é",easter:"⩮",Ecaron:"Ě",ecaron:"ě",ecir:"≖",Ecirc:"Ê",ecirc:"ê",ecolon:"≕",Ecy:"Э",ecy:"э",eDDot:"⩷",Edot:"Ė",eDot:"≑",edot:"ė",ee:"ⅇ",efDot:"≒",Efr:"𝔈",efr:"𝔢",eg:"⪚",Egrave:"È",egrave:"è",egs:"⪖",egsdot:"⪘",el:"⪙",Element:"∈",elinters:"⏧",ell:"ℓ",els:"⪕",elsdot:"⪗",Emacr:"Ē",emacr:"ē",empty:"∅",emptyset:"∅",EmptySmallSquare:"◻",emptyv:"∅",EmptyVerySmallSquare:"▫",emsp:" ",emsp13:" ",emsp14:" ",ENG:"Ŋ",eng:"ŋ",ensp:" ",Eogon:"Ę",eogon:"ę",Eopf:"𝔼",eopf:"𝕖",epar:"⋕",eparsl:"⧣",eplus:"⩱",epsi:"ε",Epsilon:"Ε",epsilon:"ε",epsiv:"ϵ",eqcirc:"≖",eqcolon:"≕",eqsim:"≂",eqslantgtr:"⪖",eqslantless:"⪕",Equal:"⩵",equals:"=",EqualTilde:"≂",equest:"≟",Equilibrium:"⇌",equiv:"≡",equivDD:"⩸",eqvparsl:"⧥",erarr:"⥱",erDot:"≓",Escr:"ℰ",escr:"ℯ",esdot:"≐",Esim:"⩳",esim:"≂",Eta:"Η",eta:"η",ETH:"Ð",eth:"ð",Euml:"Ë",euml:"ë",euro:"€",excl:"!",exist:"∃",Exists:"∃",expectation:"ℰ",ExponentialE:"ⅇ",exponentiale:"ⅇ",fallingdotseq:"≒",Fcy:"Ф",fcy:"ф",female:"♀",ffilig:"ﬃ",fflig:"ﬀ",ffllig:"ﬄ",Ffr:"𝔉",ffr:"𝔣",filig:"ﬁ",FilledSmallSquare:"◼",FilledVerySmallSquare:"▪",fjlig:"fj",flat:"♭",fllig:"ﬂ",fltns:"▱",fnof:"ƒ",Fopf:"𝔽",fopf:"𝕗",ForAll:"∀",forall:"∀",fork:"⋔",forkv:"⫙",Fouriertrf:"ℱ",fpartint:"⨍",frac12:"½",frac13:"⅓",frac14:"¼",frac15:"⅕",frac16:"⅙",frac18:"⅛",frac23:"⅔",frac25:"⅖",frac34:"¾",frac35:"⅗",frac38:"⅜",frac45:"⅘",frac56:"⅚",frac58:"⅝",frac78:"⅞",frasl:"⁄",frown:"⌢",Fscr:"ℱ",fscr:"𝒻",gacute:"ǵ",Gamma:"Γ",gamma:"γ",Gammad:"Ϝ",gammad:"ϝ",gap:"⪆",Gbreve:"Ğ",gbreve:"ğ",Gcedil:"Ģ",Gcirc:"Ĝ",gcirc:"ĝ",Gcy:"Г",gcy:"г",Gdot:"Ġ",gdot:"ġ",gE:"≧",ge:"≥",gEl:"⪌",gel:"⋛",geq:"≥",geqq:"≧",geqslant:"⩾",ges:"⩾",gescc:"⪩",gesdot:"⪀",gesdoto:"⪂",gesdotol:"⪄",gesl:"⋛︀",gesles:"⪔",Gfr:"𝔊",gfr:"𝔤",Gg:"⋙",gg:"≫",ggg:"⋙",gimel:"ℷ",GJcy:"Ѓ",gjcy:"ѓ",gl:"≷",gla:"⪥",glE:"⪒",glj:"⪤",gnap:"⪊",gnapprox:"⪊",gnE:"≩",gne:"⪈",gneq:"⪈",gneqq:"≩",gnsim:"⋧",Gopf:"𝔾",gopf:"𝕘",grave:"`",GreaterEqual:"≥",GreaterEqualLess:"⋛",GreaterFullEqual:"≧",GreaterGreater:"⪢",GreaterLess:"≷",GreaterSlantEqual:"⩾",GreaterTilde:"≳",Gscr:"𝒢",gscr:"ℊ",gsim:"≳",gsime:"⪎",gsiml:"⪐",Gt:"≫",GT:">",gt:">",gtcc:"⪧",gtcir:"⩺",gtdot:"⋗",gtlPar:"⦕",gtquest:"⩼",gtrapprox:"⪆",gtrarr:"⥸",gtrdot:"⋗",gtreqless:"⋛",gtreqqless:"⪌",gtrless:"≷",gtrsim:"≳",gvertneqq:"≩︀",gvnE:"≩︀",Hacek:"ˇ",hairsp:" ",half:"½",hamilt:"ℋ",HARDcy:"Ъ",hardcy:"ъ",hArr:"⇔",harr:"↔",harrcir:"⥈",harrw:"↭",Hat:"^",hbar:"ℏ",Hcirc:"Ĥ",hcirc:"ĥ",hearts:"♥",heartsuit:"♥",hellip:"…",hercon:"⊹",Hfr:"ℌ",hfr:"𝔥",HilbertSpace:"ℋ",hksearow:"⤥",hkswarow:"⤦",hoarr:"⇿",homtht:"∻",hookleftarrow:"↩",hookrightarrow:"↪",Hopf:"ℍ",hopf:"𝕙",horbar:"―",HorizontalLine:"─",Hscr:"ℋ",hscr:"𝒽",hslash:"ℏ",Hstrok:"Ħ",hstrok:"ħ",HumpDownHump:"≎",HumpEqual:"≏",hybull:"⁃",hyphen:"‐",Iacute:"Í",iacute:"í",ic:"⁣",Icirc:"Î",icirc:"î",Icy:"И",icy:"и",Idot:"İ",IEcy:"Е",iecy:"е",iexcl:"¡",iff:"⇔",Ifr:"ℑ",ifr:"𝔦",Igrave:"Ì",igrave:"ì",ii:"ⅈ",iiiint:"⨌",iiint:"∭",iinfin:"⧜",iiota:"℩",IJlig:"Ĳ",ijlig:"ĳ",Im:"ℑ",Imacr:"Ī",imacr:"ī",image:"ℑ",ImaginaryI:"ⅈ",imagline:"ℐ",imagpart:"ℑ",imath:"ı",imof:"⊷",imped:"Ƶ",Implies:"⇒",in:"∈",incare:"℅",infin:"∞",infintie:"⧝",inodot:"ı",Int:"∬",int:"∫",intcal:"⊺",integers:"ℤ",Integral:"∫",intercal:"⊺",Intersection:"⋂",intlarhk:"⨗",intprod:"⨼",InvisibleComma:"⁣",InvisibleTimes:"⁢",IOcy:"Ё",iocy:"ё",Iogon:"Į",iogon:"į",Iopf:"𝕀",iopf:"𝕚",Iota:"Ι",iota:"ι",iprod:"⨼",iquest:"¿",Iscr:"ℐ",iscr:"𝒾",isin:"∈",isindot:"⋵",isinE:"⋹",isins:"⋴",isinsv:"⋳",isinv:"∈",it:"⁢",Itilde:"Ĩ",itilde:"ĩ",Iukcy:"І",iukcy:"і",Iuml:"Ï",iuml:"ï",Jcirc:"Ĵ",jcirc:"ĵ",Jcy:"Й",jcy:"й",Jfr:"𝔍",jfr:"𝔧",jmath:"ȷ",Jopf:"𝕁",jopf:"𝕛",Jscr:"𝒥",jscr:"𝒿",Jsercy:"Ј",jsercy:"ј",Jukcy:"Є",jukcy:"є",Kappa:"Κ",kappa:"κ",kappav:"ϰ",Kcedil:"Ķ",kcedil:"ķ",Kcy:"К",kcy:"к",Kfr:"𝔎",kfr:"𝔨",kgreen:"ĸ",KHcy:"Х",khcy:"х",KJcy:"Ќ",kjcy:"ќ",Kopf:"𝕂",kopf:"𝕜",Kscr:"𝒦",kscr:"𝓀",lAarr:"⇚",Lacute:"Ĺ",lacute:"ĺ",laemptyv:"⦴",lagran:"ℒ",Lambda:"Λ",lambda:"λ",Lang:"⟪",lang:"⟨",langd:"⦑",langle:"⟨",lap:"⪅",Laplacetrf:"ℒ",laquo:"«",Larr:"↞",lArr:"⇐",larr:"←",larrb:"⇤",larrbfs:"⤟",larrfs:"⤝",larrhk:"↩",larrlp:"↫",larrpl:"⤹",larrsim:"⥳",larrtl:"↢",lat:"⪫",lAtail:"⤛",latail:"⤙",late:"⪭",lates:"⪭︀",lBarr:"⤎",lbarr:"⤌",lbbrk:"❲",lbrace:"{",lbrack:"[",lbrke:"⦋",lbrksld:"⦏",lbrkslu:"⦍",Lcaron:"Ľ",lcaron:"ľ",Lcedil:"Ļ",lcedil:"ļ",lceil:"⌈",lcub:"{",Lcy:"Л",lcy:"л",ldca:"⤶",ldquo:"“",ldquor:"„",ldrdhar:"⥧",ldrushar:"⥋",ldsh:"↲",lE:"≦",le:"≤",LeftAngleBracket:"⟨",LeftArrow:"←",Leftarrow:"⇐",leftarrow:"←",LeftArrowBar:"⇤",LeftArrowRightArrow:"⇆",leftarrowtail:"↢",LeftCeiling:"⌈",LeftDoubleBracket:"⟦",LeftDownTeeVector:"⥡",LeftDownVector:"⇃",LeftDownVectorBar:"⥙",LeftFloor:"⌊",leftharpoondown:"↽",leftharpoonup:"↼",leftleftarrows:"⇇",LeftRightArrow:"↔",Leftrightarrow:"⇔",leftrightarrow:"↔",leftrightarrows:"⇆",leftrightharpoons:"⇋",leftrightsquigarrow:"↭",LeftRightVector:"⥎",LeftTee:"⊣",LeftTeeArrow:"↤",LeftTeeVector:"⥚",leftthreetimes:"⋋",LeftTriangle:"⊲",LeftTriangleBar:"⧏",LeftTriangleEqual:"⊴",LeftUpDownVector:"⥑",LeftUpTeeVector:"⥠",LeftUpVector:"↿",LeftUpVectorBar:"⥘",LeftVector:"↼",LeftVectorBar:"⥒",lEg:"⪋",leg:"⋚",leq:"≤",leqq:"≦",leqslant:"⩽",les:"⩽",lescc:"⪨",lesdot:"⩿",lesdoto:"⪁",lesdotor:"⪃",lesg:"⋚︀",lesges:"⪓",lessapprox:"⪅",lessdot:"⋖",lesseqgtr:"⋚",lesseqqgtr:"⪋",LessEqualGreater:"⋚",LessFullEqual:"≦",LessGreater:"≶",lessgtr:"≶",LessLess:"⪡",lesssim:"≲",LessSlantEqual:"⩽",LessTilde:"≲",lfisht:"⥼",lfloor:"⌊",Lfr:"𝔏",lfr:"𝔩",lg:"≶",lgE:"⪑",lHar:"⥢",lhard:"↽",lharu:"↼",lharul:"⥪",lhblk:"▄",LJcy:"Љ",ljcy:"љ",Ll:"⋘",ll:"≪",llarr:"⇇",llcorner:"⌞",Lleftarrow:"⇚",llhard:"⥫",lltri:"◺",Lmidot:"Ŀ",lmidot:"ŀ",lmoust:"⎰",lmoustache:"⎰",lnap:"⪉",lnapprox:"⪉",lnE:"≨",lne:"⪇",lneq:"⪇",lneqq:"≨",lnsim:"⋦",loang:"⟬",loarr:"⇽",lobrk:"⟦",LongLeftArrow:"⟵",Longleftarrow:"⟸",longleftarrow:"⟵",LongLeftRightArrow:"⟷",Longleftrightarrow:"⟺",longleftrightarrow:"⟷",longmapsto:"⟼",LongRightArrow:"⟶",Longrightarrow:"⟹",longrightarrow:"⟶",looparrowleft:"↫",looparrowright:"↬",lopar:"⦅",Lopf:"𝕃",lopf:"𝕝",loplus:"⨭",lotimes:"⨴",lowast:"∗",lowbar:"_",LowerLeftArrow:"↙",LowerRightArrow:"↘",loz:"◊",lozenge:"◊",lozf:"⧫",lpar:"(",lparlt:"⦓",lrarr:"⇆",lrcorner:"⌟",lrhar:"⇋",lrhard:"⥭",lrm:"‎",lrtri:"⊿",lsaquo:"‹",Lscr:"ℒ",lscr:"𝓁",Lsh:"↰",lsh:"↰",lsim:"≲",lsime:"⪍",lsimg:"⪏",lsqb:"[",lsquo:"‘",lsquor:"‚",Lstrok:"Ł",lstrok:"ł",Lt:"≪",LT:"<",lt:"<",ltcc:"⪦",ltcir:"⩹",ltdot:"⋖",lthree:"⋋",ltimes:"⋉",ltlarr:"⥶",ltquest:"⩻",ltri:"◃",ltrie:"⊴",ltrif:"◂",ltrPar:"⦖",lurdshar:"⥊",luruhar:"⥦",lvertneqq:"≨︀",lvnE:"≨︀",macr:"¯",male:"♂",malt:"✠",maltese:"✠",Map:"⤅",map:"↦",mapsto:"↦",mapstodown:"↧",mapstoleft:"↤",mapstoup:"↥",marker:"▮",mcomma:"⨩",Mcy:"М",mcy:"м",mdash:"—",mDDot:"∺",measuredangle:"∡",MediumSpace:" ",Mellintrf:"ℳ",Mfr:"𝔐",mfr:"𝔪",mho:"℧",micro:"µ",mid:"∣",midast:"*",midcir:"⫰",middot:"·",minus:"−",minusb:"⊟",minusd:"∸",minusdu:"⨪",MinusPlus:"∓",mlcp:"⫛",mldr:"…",mnplus:"∓",models:"⊧",Mopf:"𝕄",mopf:"𝕞",mp:"∓",Mscr:"ℳ",mscr:"𝓂",mstpos:"∾",Mu:"Μ",mu:"μ",multimap:"⊸",mumap:"⊸",nabla:"∇",Nacute:"Ń",nacute:"ń",nang:"∠⃒",nap:"≉",napE:"⩰̸",napid:"≋̸",napos:"ŉ",napprox:"≉",natur:"♮",natural:"♮",naturals:"ℕ",nbsp:" ",nbump:"≎̸",nbumpe:"≏̸",ncap:"⩃",Ncaron:"Ň",ncaron:"ň",Ncedil:"Ņ",ncedil:"ņ",ncong:"≇",ncongdot:"⩭̸",ncup:"⩂",Ncy:"Н",ncy:"н",ndash:"–",ne:"≠",nearhk:"⤤",neArr:"⇗",nearr:"↗",nearrow:"↗",nedot:"≐̸",NegativeMediumSpace:"​",NegativeThickSpace:"​",NegativeThinSpace:"​",NegativeVeryThinSpace:"​",nequiv:"≢",nesear:"⤨",nesim:"≂̸",NestedGreaterGreater:"≫",NestedLessLess:"≪",NewLine:`
`,nexist:"∄",nexists:"∄",Nfr:"𝔑",nfr:"𝔫",ngE:"≧̸",nge:"≱",ngeq:"≱",ngeqq:"≧̸",ngeqslant:"⩾̸",nges:"⩾̸",nGg:"⋙̸",ngsim:"≵",nGt:"≫⃒",ngt:"≯",ngtr:"≯",nGtv:"≫̸",nhArr:"⇎",nharr:"↮",nhpar:"⫲",ni:"∋",nis:"⋼",nisd:"⋺",niv:"∋",NJcy:"Њ",njcy:"њ",nlArr:"⇍",nlarr:"↚",nldr:"‥",nlE:"≦̸",nle:"≰",nLeftarrow:"⇍",nleftarrow:"↚",nLeftrightarrow:"⇎",nleftrightarrow:"↮",nleq:"≰",nleqq:"≦̸",nleqslant:"⩽̸",nles:"⩽̸",nless:"≮",nLl:"⋘̸",nlsim:"≴",nLt:"≪⃒",nlt:"≮",nltri:"⋪",nltrie:"⋬",nLtv:"≪̸",nmid:"∤",NoBreak:"⁠",NonBreakingSpace:" ",Nopf:"ℕ",nopf:"𝕟",Not:"⫬",not:"¬",NotCongruent:"≢",NotCupCap:"≭",NotDoubleVerticalBar:"∦",NotElement:"∉",NotEqual:"≠",NotEqualTilde:"≂̸",NotExists:"∄",NotGreater:"≯",NotGreaterEqual:"≱",NotGreaterFullEqual:"≧̸",NotGreaterGreater:"≫̸",NotGreaterLess:"≹",NotGreaterSlantEqual:"⩾̸",NotGreaterTilde:"≵",NotHumpDownHump:"≎̸",NotHumpEqual:"≏̸",notin:"∉",notindot:"⋵̸",notinE:"⋹̸",notinva:"∉",notinvb:"⋷",notinvc:"⋶",NotLeftTriangle:"⋪",NotLeftTriangleBar:"⧏̸",NotLeftTriangleEqual:"⋬",NotLess:"≮",NotLessEqual:"≰",NotLessGreater:"≸",NotLessLess:"≪̸",NotLessSlantEqual:"⩽̸",NotLessTilde:"≴",NotNestedGreaterGreater:"⪢̸",NotNestedLessLess:"⪡̸",notni:"∌",notniva:"∌",notnivb:"⋾",notnivc:"⋽",NotPrecedes:"⊀",NotPrecedesEqual:"⪯̸",NotPrecedesSlantEqual:"⋠",NotReverseElement:"∌",NotRightTriangle:"⋫",NotRightTriangleBar:"⧐̸",NotRightTriangleEqual:"⋭",NotSquareSubset:"⊏̸",NotSquareSubsetEqual:"⋢",NotSquareSuperset:"⊐̸",NotSquareSupersetEqual:"⋣",NotSubset:"⊂⃒",NotSubsetEqual:"⊈",NotSucceeds:"⊁",NotSucceedsEqual:"⪰̸",NotSucceedsSlantEqual:"⋡",NotSucceedsTilde:"≿̸",NotSuperset:"⊃⃒",NotSupersetEqual:"⊉",NotTilde:"≁",NotTildeEqual:"≄",NotTildeFullEqual:"≇",NotTildeTilde:"≉",NotVerticalBar:"∤",npar:"∦",nparallel:"∦",nparsl:"⫽⃥",npart:"∂̸",npolint:"⨔",npr:"⊀",nprcue:"⋠",npre:"⪯̸",nprec:"⊀",npreceq:"⪯̸",nrArr:"⇏",nrarr:"↛",nrarrc:"⤳̸",nrarrw:"↝̸",nRightarrow:"⇏",nrightarrow:"↛",nrtri:"⋫",nrtrie:"⋭",nsc:"⊁",nsccue:"⋡",nsce:"⪰̸",Nscr:"𝒩",nscr:"𝓃",nshortmid:"∤",nshortparallel:"∦",nsim:"≁",nsime:"≄",nsimeq:"≄",nsmid:"∤",nspar:"∦",nsqsube:"⋢",nsqsupe:"⋣",nsub:"⊄",nsubE:"⫅̸",nsube:"⊈",nsubset:"⊂⃒",nsubseteq:"⊈",nsubseteqq:"⫅̸",nsucc:"⊁",nsucceq:"⪰̸",nsup:"⊅",nsupE:"⫆̸",nsupe:"⊉",nsupset:"⊃⃒",nsupseteq:"⊉",nsupseteqq:"⫆̸",ntgl:"≹",Ntilde:"Ñ",ntilde:"ñ",ntlg:"≸",ntriangleleft:"⋪",ntrianglelefteq:"⋬",ntriangleright:"⋫",ntrianglerighteq:"⋭",Nu:"Ν",nu:"ν",num:"#",numero:"№",numsp:" ",nvap:"≍⃒",nVDash:"⊯",nVdash:"⊮",nvDash:"⊭",nvdash:"⊬",nvge:"≥⃒",nvgt:">⃒",nvHarr:"⤄",nvinfin:"⧞",nvlArr:"⤂",nvle:"≤⃒",nvlt:"<⃒",nvltrie:"⊴⃒",nvrArr:"⤃",nvrtrie:"⊵⃒",nvsim:"∼⃒",nwarhk:"⤣",nwArr:"⇖",nwarr:"↖",nwarrow:"↖",nwnear:"⤧",Oacute:"Ó",oacute:"ó",oast:"⊛",ocir:"⊚",Ocirc:"Ô",ocirc:"ô",Ocy:"О",ocy:"о",odash:"⊝",Odblac:"Ő",odblac:"ő",odiv:"⨸",odot:"⊙",odsold:"⦼",OElig:"Œ",oelig:"œ",ofcir:"⦿",Ofr:"𝔒",ofr:"𝔬",ogon:"˛",Ograve:"Ò",ograve:"ò",ogt:"⧁",ohbar:"⦵",ohm:"Ω",oint:"∮",olarr:"↺",olcir:"⦾",olcross:"⦻",oline:"‾",olt:"⧀",Omacr:"Ō",omacr:"ō",Omega:"Ω",omega:"ω",Omicron:"Ο",omicron:"ο",omid:"⦶",ominus:"⊖",Oopf:"𝕆",oopf:"𝕠",opar:"⦷",OpenCurlyDoubleQuote:"“",OpenCurlyQuote:"‘",operp:"⦹",oplus:"⊕",Or:"⩔",or:"∨",orarr:"↻",ord:"⩝",order:"ℴ",orderof:"ℴ",ordf:"ª",ordm:"º",origof:"⊶",oror:"⩖",orslope:"⩗",orv:"⩛",oS:"Ⓢ",Oscr:"𝒪",oscr:"ℴ",Oslash:"Ø",oslash:"ø",osol:"⊘",Otilde:"Õ",otilde:"õ",Otimes:"⨷",otimes:"⊗",otimesas:"⨶",Ouml:"Ö",ouml:"ö",ovbar:"⌽",OverBar:"‾",OverBrace:"⏞",OverBracket:"⎴",OverParenthesis:"⏜",par:"∥",para:"¶",parallel:"∥",parsim:"⫳",parsl:"⫽",part:"∂",PartialD:"∂",Pcy:"П",pcy:"п",percnt:"%",period:".",permil:"‰",perp:"⊥",pertenk:"‱",Pfr:"𝔓",pfr:"𝔭",Phi:"Φ",phi:"φ",phiv:"ϕ",phmmat:"ℳ",phone:"☎",Pi:"Π",pi:"π",pitchfork:"⋔",piv:"ϖ",planck:"ℏ",planckh:"ℎ",plankv:"ℏ",plus:"+",plusacir:"⨣",plusb:"⊞",pluscir:"⨢",plusdo:"∔",plusdu:"⨥",pluse:"⩲",PlusMinus:"±",plusmn:"±",plussim:"⨦",plustwo:"⨧",pm:"±",Poincareplane:"ℌ",pointint:"⨕",Popf:"ℙ",popf:"𝕡",pound:"£",Pr:"⪻",pr:"≺",prap:"⪷",prcue:"≼",prE:"⪳",pre:"⪯",prec:"≺",precapprox:"⪷",preccurlyeq:"≼",Precedes:"≺",PrecedesEqual:"⪯",PrecedesSlantEqual:"≼",PrecedesTilde:"≾",preceq:"⪯",precnapprox:"⪹",precneqq:"⪵",precnsim:"⋨",precsim:"≾",Prime:"″",prime:"′",primes:"ℙ",prnap:"⪹",prnE:"⪵",prnsim:"⋨",prod:"∏",Product:"∏",profalar:"⌮",profline:"⌒",profsurf:"⌓",prop:"∝",Proportion:"∷",Proportional:"∝",propto:"∝",prsim:"≾",prurel:"⊰",Pscr:"𝒫",pscr:"𝓅",Psi:"Ψ",psi:"ψ",puncsp:" ",Qfr:"𝔔",qfr:"𝔮",qint:"⨌",Qopf:"ℚ",qopf:"𝕢",qprime:"⁗",Qscr:"𝒬",qscr:"𝓆",quaternions:"ℍ",quatint:"⨖",quest:"?",questeq:"≟",QUOT:'"',quot:'"',rAarr:"⇛",race:"∽̱",Racute:"Ŕ",racute:"ŕ",radic:"√",raemptyv:"⦳",Rang:"⟫",rang:"⟩",rangd:"⦒",range:"⦥",rangle:"⟩",raquo:"»",Rarr:"↠",rArr:"⇒",rarr:"→",rarrap:"⥵",rarrb:"⇥",rarrbfs:"⤠",rarrc:"⤳",rarrfs:"⤞",rarrhk:"↪",rarrlp:"↬",rarrpl:"⥅",rarrsim:"⥴",Rarrtl:"⤖",rarrtl:"↣",rarrw:"↝",rAtail:"⤜",ratail:"⤚",ratio:"∶",rationals:"ℚ",RBarr:"⤐",rBarr:"⤏",rbarr:"⤍",rbbrk:"❳",rbrace:"}",rbrack:"]",rbrke:"⦌",rbrksld:"⦎",rbrkslu:"⦐",Rcaron:"Ř",rcaron:"ř",Rcedil:"Ŗ",rcedil:"ŗ",rceil:"⌉",rcub:"}",Rcy:"Р",rcy:"р",rdca:"⤷",rdldhar:"⥩",rdquo:"”",rdquor:"”",rdsh:"↳",Re:"ℜ",real:"ℜ",realine:"ℛ",realpart:"ℜ",reals:"ℝ",rect:"▭",REG:"®",reg:"®",ReverseElement:"∋",ReverseEquilibrium:"⇋",ReverseUpEquilibrium:"⥯",rfisht:"⥽",rfloor:"⌋",Rfr:"ℜ",rfr:"𝔯",rHar:"⥤",rhard:"⇁",rharu:"⇀",rharul:"⥬",Rho:"Ρ",rho:"ρ",rhov:"ϱ",RightAngleBracket:"⟩",RightArrow:"→",Rightarrow:"⇒",rightarrow:"→",RightArrowBar:"⇥",RightArrowLeftArrow:"⇄",rightarrowtail:"↣",RightCeiling:"⌉",RightDoubleBracket:"⟧",RightDownTeeVector:"⥝",RightDownVector:"⇂",RightDownVectorBar:"⥕",RightFloor:"⌋",rightharpoondown:"⇁",rightharpoonup:"⇀",rightleftarrows:"⇄",rightleftharpoons:"⇌",rightrightarrows:"⇉",rightsquigarrow:"↝",RightTee:"⊢",RightTeeArrow:"↦",RightTeeVector:"⥛",rightthreetimes:"⋌",RightTriangle:"⊳",RightTriangleBar:"⧐",RightTriangleEqual:"⊵",RightUpDownVector:"⥏",RightUpTeeVector:"⥜",RightUpVector:"↾",RightUpVectorBar:"⥔",RightVector:"⇀",RightVectorBar:"⥓",ring:"˚",risingdotseq:"≓",rlarr:"⇄",rlhar:"⇌",rlm:"‏",rmoust:"⎱",rmoustache:"⎱",rnmid:"⫮",roang:"⟭",roarr:"⇾",robrk:"⟧",ropar:"⦆",Ropf:"ℝ",ropf:"𝕣",roplus:"⨮",rotimes:"⨵",RoundImplies:"⥰",rpar:")",rpargt:"⦔",rppolint:"⨒",rrarr:"⇉",Rrightarrow:"⇛",rsaquo:"›",Rscr:"ℛ",rscr:"𝓇",Rsh:"↱",rsh:"↱",rsqb:"]",rsquo:"’",rsquor:"’",rthree:"⋌",rtimes:"⋊",rtri:"▹",rtrie:"⊵",rtrif:"▸",rtriltri:"⧎",RuleDelayed:"⧴",ruluhar:"⥨",rx:"℞",Sacute:"Ś",sacute:"ś",sbquo:"‚",Sc:"⪼",sc:"≻",scap:"⪸",Scaron:"Š",scaron:"š",sccue:"≽",scE:"⪴",sce:"⪰",Scedil:"Ş",scedil:"ş",Scirc:"Ŝ",scirc:"ŝ",scnap:"⪺",scnE:"⪶",scnsim:"⋩",scpolint:"⨓",scsim:"≿",Scy:"С",scy:"с",sdot:"⋅",sdotb:"⊡",sdote:"⩦",searhk:"⤥",seArr:"⇘",searr:"↘",searrow:"↘",sect:"§",semi:";",seswar:"⤩",setminus:"∖",setmn:"∖",sext:"✶",Sfr:"𝔖",sfr:"𝔰",sfrown:"⌢",sharp:"♯",SHCHcy:"Щ",shchcy:"щ",SHcy:"Ш",shcy:"ш",ShortDownArrow:"↓",ShortLeftArrow:"←",shortmid:"∣",shortparallel:"∥",ShortRightArrow:"→",ShortUpArrow:"↑",shy:"­",Sigma:"Σ",sigma:"σ",sigmaf:"ς",sigmav:"ς",sim:"∼",simdot:"⩪",sime:"≃",simeq:"≃",simg:"⪞",simgE:"⪠",siml:"⪝",simlE:"⪟",simne:"≆",simplus:"⨤",simrarr:"⥲",slarr:"←",SmallCircle:"∘",smallsetminus:"∖",smashp:"⨳",smeparsl:"⧤",smid:"∣",smile:"⌣",smt:"⪪",smte:"⪬",smtes:"⪬︀",SOFTcy:"Ь",softcy:"ь",sol:"/",solb:"⧄",solbar:"⌿",Sopf:"𝕊",sopf:"𝕤",spades:"♠",spadesuit:"♠",spar:"∥",sqcap:"⊓",sqcaps:"⊓︀",sqcup:"⊔",sqcups:"⊔︀",Sqrt:"√",sqsub:"⊏",sqsube:"⊑",sqsubset:"⊏",sqsubseteq:"⊑",sqsup:"⊐",sqsupe:"⊒",sqsupset:"⊐",sqsupseteq:"⊒",squ:"□",Square:"□",square:"□",SquareIntersection:"⊓",SquareSubset:"⊏",SquareSubsetEqual:"⊑",SquareSuperset:"⊐",SquareSupersetEqual:"⊒",SquareUnion:"⊔",squarf:"▪",squf:"▪",srarr:"→",Sscr:"𝒮",sscr:"𝓈",ssetmn:"∖",ssmile:"⌣",sstarf:"⋆",Star:"⋆",star:"☆",starf:"★",straightepsilon:"ϵ",straightphi:"ϕ",strns:"¯",Sub:"⋐",sub:"⊂",subdot:"⪽",subE:"⫅",sube:"⊆",subedot:"⫃",submult:"⫁",subnE:"⫋",subne:"⊊",subplus:"⪿",subrarr:"⥹",Subset:"⋐",subset:"⊂",subseteq:"⊆",subseteqq:"⫅",SubsetEqual:"⊆",subsetneq:"⊊",subsetneqq:"⫋",subsim:"⫇",subsub:"⫕",subsup:"⫓",succ:"≻",succapprox:"⪸",succcurlyeq:"≽",Succeeds:"≻",SucceedsEqual:"⪰",SucceedsSlantEqual:"≽",SucceedsTilde:"≿",succeq:"⪰",succnapprox:"⪺",succneqq:"⪶",succnsim:"⋩",succsim:"≿",SuchThat:"∋",Sum:"∑",sum:"∑",sung:"♪",Sup:"⋑",sup:"⊃",sup1:"¹",sup2:"²",sup3:"³",supdot:"⪾",supdsub:"⫘",supE:"⫆",supe:"⊇",supedot:"⫄",Superset:"⊃",SupersetEqual:"⊇",suphsol:"⟉",suphsub:"⫗",suplarr:"⥻",supmult:"⫂",supnE:"⫌",supne:"⊋",supplus:"⫀",Supset:"⋑",supset:"⊃",supseteq:"⊇",supseteqq:"⫆",supsetneq:"⊋",supsetneqq:"⫌",supsim:"⫈",supsub:"⫔",supsup:"⫖",swarhk:"⤦",swArr:"⇙",swarr:"↙",swarrow:"↙",swnwar:"⤪",szlig:"ß",Tab:"	",target:"⌖",Tau:"Τ",tau:"τ",tbrk:"⎴",Tcaron:"Ť",tcaron:"ť",Tcedil:"Ţ",tcedil:"ţ",Tcy:"Т",tcy:"т",tdot:"⃛",telrec:"⌕",Tfr:"𝔗",tfr:"𝔱",there4:"∴",Therefore:"∴",therefore:"∴",Theta:"Θ",theta:"θ",thetasym:"ϑ",thetav:"ϑ",thickapprox:"≈",thicksim:"∼",ThickSpace:"  ",thinsp:" ",ThinSpace:" ",thkap:"≈",thksim:"∼",THORN:"Þ",thorn:"þ",Tilde:"∼",tilde:"˜",TildeEqual:"≃",TildeFullEqual:"≅",TildeTilde:"≈",times:"×",timesb:"⊠",timesbar:"⨱",timesd:"⨰",tint:"∭",toea:"⤨",top:"⊤",topbot:"⌶",topcir:"⫱",Topf:"𝕋",topf:"𝕥",topfork:"⫚",tosa:"⤩",tprime:"‴",TRADE:"™",trade:"™",triangle:"▵",triangledown:"▿",triangleleft:"◃",trianglelefteq:"⊴",triangleq:"≜",triangleright:"▹",trianglerighteq:"⊵",tridot:"◬",trie:"≜",triminus:"⨺",TripleDot:"⃛",triplus:"⨹",trisb:"⧍",tritime:"⨻",trpezium:"⏢",Tscr:"𝒯",tscr:"𝓉",TScy:"Ц",tscy:"ц",TSHcy:"Ћ",tshcy:"ћ",Tstrok:"Ŧ",tstrok:"ŧ",twixt:"≬",twoheadleftarrow:"↞",twoheadrightarrow:"↠",Uacute:"Ú",uacute:"ú",Uarr:"↟",uArr:"⇑",uarr:"↑",Uarrocir:"⥉",Ubrcy:"Ў",ubrcy:"ў",Ubreve:"Ŭ",ubreve:"ŭ",Ucirc:"Û",ucirc:"û",Ucy:"У",ucy:"у",udarr:"⇅",Udblac:"Ű",udblac:"ű",udhar:"⥮",ufisht:"⥾",Ufr:"𝔘",ufr:"𝔲",Ugrave:"Ù",ugrave:"ù",uHar:"⥣",uharl:"↿",uharr:"↾",uhblk:"▀",ulcorn:"⌜",ulcorner:"⌜",ulcrop:"⌏",ultri:"◸",Umacr:"Ū",umacr:"ū",uml:"¨",UnderBar:"_",UnderBrace:"⏟",UnderBracket:"⎵",UnderParenthesis:"⏝",Union:"⋃",UnionPlus:"⊎",Uogon:"Ų",uogon:"ų",Uopf:"𝕌",uopf:"𝕦",UpArrow:"↑",Uparrow:"⇑",uparrow:"↑",UpArrowBar:"⤒",UpArrowDownArrow:"⇅",UpDownArrow:"↕",Updownarrow:"⇕",updownarrow:"↕",UpEquilibrium:"⥮",upharpoonleft:"↿",upharpoonright:"↾",uplus:"⊎",UpperLeftArrow:"↖",UpperRightArrow:"↗",Upsi:"ϒ",upsi:"υ",upsih:"ϒ",Upsilon:"Υ",upsilon:"υ",UpTee:"⊥",UpTeeArrow:"↥",upuparrows:"⇈",urcorn:"⌝",urcorner:"⌝",urcrop:"⌎",Uring:"Ů",uring:"ů",urtri:"◹",Uscr:"𝒰",uscr:"𝓊",utdot:"⋰",Utilde:"Ũ",utilde:"ũ",utri:"▵",utrif:"▴",uuarr:"⇈",Uuml:"Ü",uuml:"ü",uwangle:"⦧",vangrt:"⦜",varepsilon:"ϵ",varkappa:"ϰ",varnothing:"∅",varphi:"ϕ",varpi:"ϖ",varpropto:"∝",vArr:"⇕",varr:"↕",varrho:"ϱ",varsigma:"ς",varsubsetneq:"⊊︀",varsubsetneqq:"⫋︀",varsupsetneq:"⊋︀",varsupsetneqq:"⫌︀",vartheta:"ϑ",vartriangleleft:"⊲",vartriangleright:"⊳",Vbar:"⫫",vBar:"⫨",vBarv:"⫩",Vcy:"В",vcy:"в",VDash:"⊫",Vdash:"⊩",vDash:"⊨",vdash:"⊢",Vdashl:"⫦",Vee:"⋁",vee:"∨",veebar:"⊻",veeeq:"≚",vellip:"⋮",Verbar:"‖",verbar:"|",Vert:"‖",vert:"|",VerticalBar:"∣",VerticalLine:"|",VerticalSeparator:"❘",VerticalTilde:"≀",VeryThinSpace:" ",Vfr:"𝔙",vfr:"𝔳",vltri:"⊲",vnsub:"⊂⃒",vnsup:"⊃⃒",Vopf:"𝕍",vopf:"𝕧",vprop:"∝",vrtri:"⊳",Vscr:"𝒱",vscr:"𝓋",vsubnE:"⫋︀",vsubne:"⊊︀",vsupnE:"⫌︀",vsupne:"⊋︀",Vvdash:"⊪",vzigzag:"⦚",Wcirc:"Ŵ",wcirc:"ŵ",wedbar:"⩟",Wedge:"⋀",wedge:"∧",wedgeq:"≙",weierp:"℘",Wfr:"𝔚",wfr:"𝔴",Wopf:"𝕎",wopf:"𝕨",wp:"℘",wr:"≀",wreath:"≀",Wscr:"𝒲",wscr:"𝓌",xcap:"⋂",xcirc:"◯",xcup:"⋃",xdtri:"▽",Xfr:"𝔛",xfr:"𝔵",xhArr:"⟺",xharr:"⟷",Xi:"Ξ",xi:"ξ",xlArr:"⟸",xlarr:"⟵",xmap:"⟼",xnis:"⋻",xodot:"⨀",Xopf:"𝕏",xopf:"𝕩",xoplus:"⨁",xotime:"⨂",xrArr:"⟹",xrarr:"⟶",Xscr:"𝒳",xscr:"𝓍",xsqcup:"⨆",xuplus:"⨄",xutri:"△",xvee:"⋁",xwedge:"⋀",Yacute:"Ý",yacute:"ý",YAcy:"Я",yacy:"я",Ycirc:"Ŷ",ycirc:"ŷ",Ycy:"Ы",ycy:"ы",yen:"¥",Yfr:"𝔜",yfr:"𝔶",YIcy:"Ї",yicy:"ї",Yopf:"𝕐",yopf:"𝕪",Yscr:"𝒴",yscr:"𝓎",YUcy:"Ю",yucy:"ю",Yuml:"Ÿ",yuml:"ÿ",Zacute:"Ź",zacute:"ź",Zcaron:"Ž",zcaron:"ž",Zcy:"З",zcy:"з",Zdot:"Ż",zdot:"ż",zeetrf:"ℨ",ZeroWidthSpace:"​",Zeta:"Ζ",zeta:"ζ",Zfr:"ℨ",zfr:"𝔷",ZHcy:"Ж",zhcy:"ж",zigrarr:"⇝",Zopf:"ℤ",zopf:"𝕫",Zscr:"𝒵",zscr:"𝓏",zwj:"‍",zwnj:"‌"}),e.entityMap=e.HTML_ENTITIES}(qi)),qi}var vn={},Bs;function QA(){if(Bs)return vn;Bs=1;var e=_n().NAMESPACE,t=/[A-Z_a-z\xC0-\xD6\xD8-\xF6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]/,r=new RegExp("[\\-\\.0-9"+t.source.slice(1,-1)+"\\u00B7\\u0300-\\u036F\\u203F-\\u2040]"),n=new RegExp("^"+t.source+r.source+"*(?::"+t.source+r.source+"*)?$"),i=0,o=1,a=2,s=3,u=4,c=5,l=6,f=7;function d(g,O){this.message=g,this.locator=O,Error.captureStackTrace&&Error.captureStackTrace(this,d)}d.prototype=new Error,d.prototype.name=d.name;function v(){}v.prototype={parse:function(g,O,j){var Q=this.domBuilder;Q.startDocument(),E(O,O={}),w(g,O,j,Q,this.errorHandler),Q.endDocument()}};function w(g,O,j,Q,H){function V(he){if(he>65535){he-=65536;var Re=55296+(he>>10),Ot=56320+(he&1023);return String.fromCharCode(Re,Ot)}else return String.fromCharCode(he)}function G(he){var Re=he.slice(1,-1);return Object.hasOwnProperty.call(j,Re)?j[Re]:Re.charAt(0)==="#"?V(parseInt(Re.substr(1).replace("x","0x"))):(H.error("entity not found:"+he),he)}function Y(he){if(he>I){var Re=g.substring(I,he).replace(/&#?\w+;/g,G);Z&&_(I),Q.characters(Re,0,he-I),I=he}}function _(he,Re){for(;he>=J&&(Re=ae.exec(g));)z=Re.index,J=z+Re[0].length,Z.lineNumber++;Z.columnNumber=he-z+1}for(var z=0,J=0,ae=/.*(?:\r\n?|\n)|.*$/g,Z=Q.locator,m=[{currentNSMap:O}],S={},I=0;;){try{var L=g.indexOf("<",I);if(L<0){if(!g.substr(I).match(/^\s*$/)){var $=Q.doc,te=$.createTextNode(g.substr(I));$.appendChild(te),Q.currentElement=te}return}switch(L>I&&Y(L),g.charAt(L+1)){case"/":var Se=g.indexOf(">",L+3),W=g.substring(L+2,Se).replace(/[ \t\n\r]+$/g,""),ne=m.pop();Se<0?(W=g.substring(L+2).replace(/[\s<].*/,""),H.error("end tag name: "+W+" is not complete:"+ne.tagName),Se=L+1+W.length):W.match(/\s</)&&(W=W.replace(/[\s<].*/,""),H.error("end tag name: "+W+" maybe not complete"),Se=L+1+W.length);var ce=ne.localNSMap,de=ne.tagName==W,pe=de||ne.tagName&&ne.tagName.toLowerCase()==W.toLowerCase();if(pe){if(Q.endElement(ne.uri,ne.localName,W),ce)for(var Ke in ce)Object.prototype.hasOwnProperty.call(ce,Ke)&&Q.endPrefixMapping(Ke);de||H.fatalError("end tag name: "+W+" is not match the current start tagName:"+ne.tagName)}else m.push(ne);Se++;break;case"?":Z&&_(L),Se=N(g,L,Q);break;case"!":Z&&_(L),Se=P(g,L,Q,H);break;default:Z&&_(L);var De=new q,Ze=m[m.length-1].currentNSMap,Se=A(g,L,De,Ze,G,H),Gt=De.length;if(!De.closed&&C(g,Se,De.tagName,S)&&(De.closed=!0,j.nbsp||H.warning("unclosed xml attribute")),Z&&Gt){for(var Xt=T(Z,{}),U=0;U<Gt;U++){var Jt=De[U];_(Jt.offset),Jt.locator=T(Z,{})}Q.locator=Xt,b(De,Q,Ze)&&m.push(De),Q.locator=Z}else b(De,Q,Ze)&&m.push(De);e.isHTML(De.uri)&&!De.closed?Se=B(g,Se,De.tagName,G,Q):Se++}}catch(he){if(he instanceof d)throw he;H.error("element parse error: "+he),Se=-1}Se>I?I=Se:Y(Math.max(L,I)+1)}}function T(g,O){return O.lineNumber=g.lineNumber,O.columnNumber=g.columnNumber,O}function A(g,O,j,Q,H,V){function G(Z,m,S){j.attributeNames.hasOwnProperty(Z)&&V.fatalError("Attribute "+Z+" redefined"),j.addValue(Z,m.replace(/[\t\n\r]/g," ").replace(/&#?\w+;/g,H),S)}for(var Y,_,z=++O,J=i;;){var ae=g.charAt(z);switch(ae){case"=":if(J===o)Y=g.slice(O,z),J=s;else if(J===a)J=s;else throw new Error("attribute equal must after attrName");break;case"'":case'"':if(J===s||J===o)if(J===o&&(V.warning('attribute value must after "="'),Y=g.slice(O,z)),O=z+1,z=g.indexOf(ae,O),z>0)_=g.slice(O,z),G(Y,_,O-1),J=c;else throw new Error("attribute value no end '"+ae+"' match");else if(J==u)_=g.slice(O,z),G(Y,_,O),V.warning('attribute "'+Y+'" missed start quot('+ae+")!!"),O=z+1,J=c;else throw new Error('attribute value must after "="');break;case"/":switch(J){case i:j.setTagName(g.slice(O,z));case c:case l:case f:J=f,j.closed=!0;case u:case o:break;case a:j.closed=!0;break;default:throw new Error("attribute invalid close char('/')")}break;case"":return V.error("unexpected end of input"),J==i&&j.setTagName(g.slice(O,z)),z;case">":switch(J){case i:j.setTagName(g.slice(O,z));case c:case l:case f:break;case u:case o:_=g.slice(O,z),_.slice(-1)==="/"&&(j.closed=!0,_=_.slice(0,-1));case a:J===a&&(_=Y),J==u?(V.warning('attribute "'+_+'" missed quot(")!'),G(Y,_,O)):((!e.isHTML(Q[""])||!_.match(/^(?:disabled|checked|selected)$/i))&&V.warning('attribute "'+_+'" missed value!! "'+_+'" instead!!'),G(_,_,O));break;case s:throw new Error("attribute value missed!!")}return z;case"":ae=" ";default:if(ae<=" ")switch(J){case i:j.setTagName(g.slice(O,z)),J=l;break;case o:Y=g.slice(O,z),J=a;break;case u:var _=g.slice(O,z);V.warning('attribute "'+_+'" missed quot(")!!'),G(Y,_,O);case c:J=l;break}else switch(J){case a:j.tagName,(!e.isHTML(Q[""])||!Y.match(/^(?:disabled|checked|selected)$/i))&&V.warning('attribute "'+Y+'" missed value!! "'+Y+'" instead2!!'),G(Y,Y,O),O=z,J=o;break;case c:V.warning('attribute space is required"'+Y+'"!!');case l:J=o,O=z;break;case s:J=u,O=z;break;case f:throw new Error("elements closed character '/' and '>' must be connected to")}}z++}}function b(g,O,j){for(var Q=g.tagName,H=null,ae=g.length;ae--;){var V=g[ae],G=V.qName,Y=V.value,Z=G.indexOf(":");if(Z>0)var _=V.prefix=G.slice(0,Z),z=G.slice(Z+1),J=_==="xmlns"&&z;else z=G,_=null,J=G==="xmlns"&&"";V.localName=z,J!==!1&&(H==null&&(H={},E(j,j={})),j[J]=H[J]=Y,V.uri=e.XMLNS,O.startPrefixMapping(J,Y))}for(var ae=g.length;ae--;){V=g[ae];var _=V.prefix;_&&(_==="xml"&&(V.uri=e.XML),_!=="xmlns"&&(V.uri=j[_||""]))}var Z=Q.indexOf(":");Z>0?(_=g.prefix=Q.slice(0,Z),z=g.localName=Q.slice(Z+1)):(_=null,z=g.localName=Q);var m=g.uri=j[_||""];if(O.startElement(m,z,Q,g),g.closed){if(O.endElement(m,z,Q),H)for(_ in H)Object.prototype.hasOwnProperty.call(H,_)&&O.endPrefixMapping(_)}else return g.currentNSMap=j,g.localNSMap=H,!0}function B(g,O,j,Q,H){if(/^(?:script|textarea)$/i.test(j)){var V=g.indexOf("</"+j+">",O),G=g.substring(O+1,V);if(/[&<]/.test(G))return/^script$/i.test(j)?(H.characters(G,0,G.length),V):(G=G.replace(/&#?\w+;/g,Q),H.characters(G,0,G.length),V)}return O+1}function C(g,O,j,Q){var H=Q[j];return H==null&&(H=g.lastIndexOf("</"+j+">"),H<O&&(H=g.lastIndexOf("</"+j)),Q[j]=H),H<O}function E(g,O){for(var j in g)Object.prototype.hasOwnProperty.call(g,j)&&(O[j]=g[j])}function P(g,O,j,Q){var H=g.charAt(O+2);switch(H){case"-":if(g.charAt(O+3)==="-"){var V=g.indexOf("-->",O+4);return V>O?(j.comment(g,O+4,V-O-4),V+3):(Q.error("Unclosed comment"),-1)}else return-1;default:if(g.substr(O+3,6)=="CDATA["){var V=g.indexOf("]]>",O+9);return j.startCDATA(),j.characters(g,O+9,V-O-9),j.endCDATA(),V+3}var G=R(g,O),Y=G.length;if(Y>1&&/!doctype/i.test(G[0][0])){var _=G[1][0],z=!1,J=!1;Y>3&&(/^public$/i.test(G[2][0])?(z=G[3][0],J=Y>4&&G[4][0]):/^system$/i.test(G[2][0])&&(J=G[3][0]));var ae=G[Y-1];return j.startDTD(_,z,J),j.endDTD(),ae.index+ae[0].length}}return-1}function N(g,O,j){var Q=g.indexOf("?>",O);if(Q){var H=g.substring(O,Q).match(/^<\?(\S*)\s*([\s\S]*?)\s*$/);return H?(H[0].length,j.processingInstruction(H[1],H[2]),Q+2):-1}return-1}function q(){this.attributeNames={}}q.prototype={setTagName:function(g){if(!n.test(g))throw new Error("invalid tagName:"+g);this.tagName=g},addValue:function(g,O,j){if(!n.test(g))throw new Error("invalid attribute:"+g);this.attributeNames[g]=this.length,this[this.length++]={qName:g,value:O,offset:j}},length:0,getLocalName:function(g){return this[g].localName},getLocator:function(g){return this[g].locator},getQName:function(g){return this[g].qName},getURI:function(g){return this[g].uri},getValue:function(g){return this[g].value}};function R(g,O){var j,Q=[],H=/'[^']+'|"[^"]+"|[^\s<>\/=]+=?|(\/?\s*>|<)/g;for(H.lastIndex=O,H.exec(g);j=H.exec(g);)if(Q.push(j),j[1])return Q}return vn.XMLReader=v,vn.ParseError=d,vn}var Os;function UA(){if(Os)return Dr;Os=1;var e=_n(),t=ul(),r=MA(),n=QA(),i=t.DOMImplementation,o=e.NAMESPACE,a=n.ParseError,s=n.XMLReader;function u(A){return A.replace(/\r[\n\u0085]/g,`
`).replace(/[\r\u0085\u2028]/g,`
`)}function c(A){this.options=A||{locator:{}}}c.prototype.parseFromString=function(A,b){var B=this.options,C=new s,E=B.domBuilder||new f,P=B.errorHandler,N=B.locator,q=B.xmlns||{},R=/\/x?html?$/.test(b),g=R?r.HTML_ENTITIES:r.XML_ENTITIES;N&&E.setDocumentLocator(N),C.errorHandler=l(P,E,N),C.domBuilder=B.domBuilder||E,R&&(q[""]=o.HTML),q.xml=q.xml||o.XML;var O=B.normalizeLineEndings||u;return A&&typeof A=="string"?C.parse(O(A),q,g):C.errorHandler.error("invalid doc source"),E.doc};function l(A,b,B){if(!A){if(b instanceof f)return b;A=b}var C={},E=A instanceof Function;B=B||{};function P(N){var q=A[N];!q&&E&&(q=A.length==2?function(R){A(N,R)}:A),C[N]=q&&function(R){q("[xmldom "+N+"]	"+R+v(B))}||function(){}}return P("warning"),P("error"),P("fatalError"),C}function f(){this.cdata=!1}function d(A,b){b.lineNumber=A.lineNumber,b.columnNumber=A.columnNumber}f.prototype={startDocument:function(){this.doc=new i().createDocument(null,null,null),this.locator&&(this.doc.documentURI=this.locator.systemId)},startElement:function(A,b,B,C){var E=this.doc,P=E.createElementNS(A,B||b),N=C.length;T(this,P),this.currentElement=P,this.locator&&d(this.locator,P);for(var q=0;q<N;q++){var A=C.getURI(q),R=C.getValue(q),B=C.getQName(q),g=E.createAttributeNS(A,B);this.locator&&d(C.getLocator(q),g),g.value=g.nodeValue=R,P.setAttributeNode(g)}},endElement:function(A,b,B){var C=this.currentElement;C.tagName,this.currentElement=C.parentNode},startPrefixMapping:function(A,b){},endPrefixMapping:function(A){},processingInstruction:function(A,b){var B=this.doc.createProcessingInstruction(A,b);this.locator&&d(this.locator,B),T(this,B)},ignorableWhitespace:function(A,b,B){},characters:function(A,b,B){if(A=w.apply(this,arguments),A){if(this.cdata)var C=this.doc.createCDATASection(A);else var C=this.doc.createTextNode(A);this.currentElement?this.currentElement.appendChild(C):/^\s*$/.test(A)&&this.doc.appendChild(C),this.locator&&d(this.locator,C)}},skippedEntity:function(A){},endDocument:function(){this.doc.normalize()},setDocumentLocator:function(A){(this.locator=A)&&(A.lineNumber=0)},comment:function(A,b,B){A=w.apply(this,arguments);var C=this.doc.createComment(A);this.locator&&d(this.locator,C),T(this,C)},startCDATA:function(){this.cdata=!0},endCDATA:function(){this.cdata=!1},startDTD:function(A,b,B){var C=this.doc.implementation;if(C&&C.createDocumentType){var E=C.createDocumentType(A,b,B);this.locator&&d(this.locator,E),T(this,E),this.doc.doctype=E}},warning:function(A){console.warn("[xmldom warning]	"+A,v(this.locator))},error:function(A){console.error("[xmldom error]	"+A,v(this.locator))},fatalError:function(A){throw new a(A,this.locator)}};function v(A){if(A)return`
@`+(A.systemId||"")+"#[line:"+A.lineNumber+",col:"+A.columnNumber+"]"}function w(A,b,B){return typeof A=="string"?A.substr(b,B):A.length>=b+B||b?new java.lang.String(A,b,B)+"":A}"endDTD,startEntity,endEntity,attributeDecl,elementDecl,externalEntityDecl,internalEntityDecl,resolveEntity,getExternalSubset,notationDecl,unparsedEntityDecl".replace(/\w+/g,function(A){f.prototype[A]=function(){return null}});function T(A,b){A.currentElement?A.currentElement.appendChild(b):A.doc.appendChild(b)}return Dr.__DOMHandler=f,Dr.normalizeLineEndings=u,Dr.DOMParser=c,Dr}var Ps;function jA(){if(Ps)return br;Ps=1;var e=ul();return br.DOMImplementation=e.DOMImplementation,br.XMLSerializer=e.XMLSerializer,br.DOMParser=UA().DOMParser,br}var Tr={},Rs;function qA(){if(Rs)return Tr;Rs=1,Object.defineProperty(Tr,"__esModule",{value:!0}),Tr.parseJson=void 0;function e(t){try{var r=JSON.parse(t);return r}catch{return null}}return Tr.parseJson=e,Tr}var wr={},ks;function HA(){if(ks)return wr;ks=1,Object.defineProperty(wr,"__esModule",{value:!0}),wr.bufferFrom=void 0;function e(t){var r=encodeURIComponent(t),n=r.replace(/%([0-9A-F]{2})/g,function(o,a){return String.fromCharCode("0x"+a)}),i=new Uint8Array(n.length);return Array.prototype.forEach.call(n,function(o,a){i[a]=o.charCodeAt(0)}),i}return wr.bufferFrom=e,wr}var Ir={},Sr={},Ls;function cl(){if(Ls)return Sr;Ls=1,Object.defineProperty(Sr,"__esModule",{value:!0}),Sr.EventPolyfill=void 0;var e=function(){function t(r,n){this.AT_TARGET=0,this.BUBBLING_PHASE=0,this.CAPTURING_PHASE=0,this.NONE=0,this.type="",this.srcElement=null,this.currentTarget=null,this.eventPhase=0,this.isTrusted=!0,this.composed=!1,this.cancelable=!0,this.defaultPrevented=!1,this.bubbles=!0,this.lengthComputable=!0,this.loaded=0,this.total=0,this.cancelBubble=!1,this.returnValue=!0,this.type=r,this.target=n?.target||null,this.currentTarget=n?.currentTarget||null,this.timeStamp=Date.now()}return t.prototype.composedPath=function(){return[]},t.prototype.initEvent=function(r,n,i){this.type=r,this.bubbles=!!n,this.cancelable=!!i},t.prototype.preventDefault=function(){this.defaultPrevented=!0},t.prototype.stopPropagation=function(){},t.prototype.stopImmediatePropagation=function(){},t}();return Sr.EventPolyfill=e,Sr}var Nr={},xs;function VA(){if(xs)return Nr;xs=1;var e=K&&K.__extends||function(){var n=function(i,o){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(a,s){a.__proto__=s}||function(a,s){for(var u in s)Object.prototype.hasOwnProperty.call(s,u)&&(a[u]=s[u])},n(i,o)};return function(i,o){if(typeof o!="function"&&o!==null)throw new TypeError("Class extends value "+String(o)+" is not a constructor or null");n(i,o);function a(){this.constructor=i}i.prototype=o===null?Object.create(o):(a.prototype=o.prototype,new a)}}();Object.defineProperty(Nr,"__esModule",{value:!0}),Nr.ProgressEventPolyfill=void 0;var t=cl(),r=function(n){e(i,n);function i(o,a){var s=n.call(this,o)||this;return s.lengthComputable=a?.lengthComputable||!1,s.composed=a?.composed||!1,s.loaded=a?.loaded||0,s.total=a?.total||0,s}return i}(t.EventPolyfill);return Nr.ProgressEventPolyfill=r,Nr}var Fs;function zA(){if(Fs)return Ir;Fs=1,Object.defineProperty(Ir,"__esModule",{value:!0}),Ir.createEvent=void 0;var e=cl(),t=VA(),r=typeof ProgressEvent<"u";function n(i,o,a){var s=["error","progress","loadstart","loadend","load","timeout","abort"],u=r?ProgressEvent:t.ProgressEventPolyfill,c=s.includes(o)?new u(o,{lengthComputable:!0,loaded:a?.loaded||0,total:a?.total||0}):new e.EventPolyfill(o,{target:i,currentTarget:i});return c}return Ir.createEvent=n,Ir}var Ms;function GA(){if(Ms)return Er;Ms=1;var e=K&&K.__awaiter||function(T,A,b,B){function C(E){return E instanceof b?E:new b(function(P){P(E)})}return new(b||(b=Promise))(function(E,P){function N(g){try{R(B.next(g))}catch(O){P(O)}}function q(g){try{R(B.throw(g))}catch(O){P(O)}}function R(g){g.done?E(g.value):C(g.value).then(N,q)}R((B=B.apply(T,A||[])).next())})},t=K&&K.__generator||function(T,A){var b={label:0,sent:function(){if(E[0]&1)throw E[1];return E[1]},trys:[],ops:[]},B,C,E,P;return P={next:N(0),throw:N(1),return:N(2)},typeof Symbol=="function"&&(P[Symbol.iterator]=function(){return this}),P;function N(R){return function(g){return q([R,g])}}function q(R){if(B)throw new TypeError("Generator is already executing.");for(;b;)try{if(B=1,C&&(E=R[0]&2?C.return:R[0]?C.throw||((E=C.return)&&E.call(C),0):C.next)&&!(E=E.call(C,R[1])).done)return E;switch(C=0,E&&(R=[R[0]&2,E.value]),R[0]){case 0:case 1:E=R;break;case 4:return b.label++,{value:R[1],done:!1};case 5:b.label++,C=R[1],R=[0];continue;case 7:R=b.ops.pop(),b.trys.pop();continue;default:if(E=b.trys,!(E=E.length>0&&E[E.length-1])&&(R[0]===6||R[0]===2)){b=0;continue}if(R[0]===3&&(!E||R[1]>E[0]&&R[1]<E[3])){b.label=R[1];break}if(R[0]===6&&b.label<E[1]){b.label=E[1],E=R;break}if(E&&b.label<E[2]){b.label=E[2],b.ops.push(R);break}E[2]&&b.ops.pop(),b.trys.pop();continue}R=A.call(T,b)}catch(g){R=[6,g],C=0}finally{B=E=0}if(R[0]&5)throw R[1];return{value:R[0]?R[1]:void 0,done:!0}}},r=K&&K.__values||function(T){var A=typeof Symbol=="function"&&Symbol.iterator,b=A&&T[A],B=0;if(b)return b.call(T);if(T&&typeof T.length=="number")return{next:function(){return T&&B>=T.length&&(T=void 0),{value:T&&T[B++],done:!T}}};throw new TypeError(A?"Object is not iterable.":"Symbol.iterator is not defined.")},n=K&&K.__read||function(T,A){var b=typeof Symbol=="function"&&T[Symbol.iterator];if(!b)return T;var B=b.call(T),C,E=[],P;try{for(;(A===void 0||A-- >0)&&!(C=B.next()).done;)E.push(C.value)}catch(N){P={error:N}}finally{try{C&&!C.done&&(b=B.return)&&b.call(B)}finally{if(P)throw P.error}}return E};Object.defineProperty(Er,"__esModule",{value:!0}),Er.createXMLHttpRequestOverride=void 0;var i=St,o=We,a=jA(),s=qA(),u=sl(),c=HA(),l=zA(),f=Vt,d=et,v=sr,w=function(T){var A,b=T.XMLHttpRequest,B=T.emitter,C=T.log;return A=function(){function E(){this._events=[],this.log=C,this.UNSENT=0,this.OPENED=1,this.HEADERS_RECEIVED=2,this.LOADING=3,this.DONE=4,this.onreadystatechange=null,this.onabort=null,this.onerror=null,this.onload=null,this.onloadend=null,this.onloadstart=null,this.onprogress=null,this.ontimeout=null,this.url="",this.method="GET",this.readyState=this.UNSENT,this.withCredentials=!1,this.status=200,this.statusText="OK",this.response="",this.responseType="text",this.responseText="",this.responseXML=null,this.responseURL="",this.upload={},this.timeout=0,this._requestHeaders=new o.Headers,this._responseHeaders=new o.Headers}return E.prototype.setReadyState=function(P){P!==this.readyState&&(this.log("readyState change %d -> %d",this.readyState,P),this.readyState=P,P!==this.UNSENT&&(this.log("triggering readystate change..."),this.trigger("readystatechange")))},E.prototype.trigger=function(P,N){var q,R;this.log('trigger "%s" (%d)',P,this.readyState),this.log('resolve listener for event "%s"',P);var g=this["on"+P];g?.call(this,l.createEvent(this,P,N));try{for(var O=r(this._events),j=O.next();!j.done;j=O.next()){var Q=j.value;Q.name===P&&(C('calling mock event listener "%s" (%d)',P,this.readyState),Q.listener.call(this,l.createEvent(this,P,N)))}}catch(H){q={error:H}}finally{try{j&&!j.done&&(R=O.return)&&R.call(O)}finally{if(q)throw q.error}}return this},E.prototype.reset=function(){this.log("reset"),this.setReadyState(this.UNSENT),this.status=200,this.statusText="OK",this.response=null,this.responseText=null,this.responseXML=null,this._requestHeaders=new o.Headers,this._responseHeaders=new o.Headers},E.prototype.open=function(P,N,q,R,g){return q===void 0&&(q=!0),e(this,void 0,void 0,function(){return t(this,function(O){return this.log=this.log.extend("request "+P+" "+N),this.log("open",{method:P,url:N,async:q,user:R,password:g}),this.reset(),this.setReadyState(this.OPENED),typeof N>"u"?(this.url=P,this.method="GET"):(this.url=N,this.method=P,this.async=q,this.user=R,this.password=g),[2]})})},E.prototype.send=function(P){var N=this;this.log("send %s %s",this.method,this.url);var q;typeof P=="string"?q=d.encodeBuffer(P):q=P||new ArrayBuffer(0);var R;try{R=new URL(this.url)}catch{R=new URL(this.url,window.location.href)}this.log("request headers",this._requestHeaders);var g=new f.IsomorphicRequest(R,{body:q,method:this.method,headers:this._requestHeaders,credentials:this.withCredentials?"include":"omit"}),O=new v.InteractiveIsomorphicRequest(g);this.log('emitting the "request" event for %d listener(s)...',B.listenerCount("request")),B.emit("request",O),this.log("awaiting mocked response..."),Promise.resolve(i.until(function(){return e(N,void 0,void 0,function(){var j,Q;return t(this,function(H){switch(H.label){case 0:return[4,B.untilIdle("request",function(V){var G=n(V.args,1),Y=G[0];return Y.id===O.id})];case 1:return H.sent(),this.log("all request listeners have been resolved!"),[4,O.respondWith.invoked()];case 2:return j=n.apply(void 0,[H.sent(),1]),Q=j[0],this.log("event.respondWith called with:",Q),[2,Q]}})})})).then(function(j){var Q,H,V=n(j,2),G=V[0],Y=V[1];if(G){N.log("middleware function threw an exception!",G),N.trigger("error"),N.abort();return}if(Y){if(N.log("received mocked response",Y),N.trigger("loadstart"),N.status=(Q=Y.status)!==null&&Q!==void 0?Q:200,N.statusText=Y.statusText||"OK",N._responseHeaders=Y.headers?o.objectToHeaders(Y.headers):new o.Headers,N.log("set response status",N.status,N.statusText),N.log("set response headers",N._responseHeaders),N.setReadyState(N.HEADERS_RECEIVED),N.log("response type",N.responseType),N.response=N.getResponseBody(Y.body),N.responseURL=N.url,N.responseText=Y.body||"",N.responseXML=N.getResponseXML(),N.log("set response body",N.response),Y.body&&N.response){N.setReadyState(N.LOADING);var _=c.bufferFrom(Y.body);N.trigger("progress",{loaded:_.length,total:_.length})}N.setReadyState(N.DONE),N.trigger("load"),N.trigger("loadend"),B.emit("response",g,u.toIsoResponse(Y))}else{N.log("no mocked response received!");var z=new b;N.log("opening an original request %s %s",N.method,N.url),z.open(N.method,N.url,(H=N.async)!==null&&H!==void 0?H:!0,N.user,N.password),z.addEventListener("load",function(){N.log('original "onload"'),N.status=z.status,N.statusText=z.statusText,N.responseURL=z.responseURL,N.responseType=z.responseType,N.response=z.response,N.responseText=z.responseText,N.responseXML=z.responseXML,N.log("set mock request readyState to DONE"),N.setReadyState(N.DONE),N.log("received original response",N.status,N.statusText),N.log("original response body:",N.response);var J=z.getAllResponseHeaders();N.log(`original response headers:
`,J),N._responseHeaders=o.stringToHeaders(J),N.log("original response headers (normalized)",N._responseHeaders),N.log("original response finished"),B.emit("response",g,{status:z.status,statusText:z.statusText,headers:N._responseHeaders,body:z.response})}),N.propagateCallbacks(z),N.propagateListeners(z),N.propagateHeaders(z,N._requestHeaders),N.async&&(z.timeout=N.timeout),N.log("send",P),z.send(P)}})},E.prototype.abort=function(){this.log("abort"),this.readyState>this.UNSENT&&this.readyState<this.DONE&&(this.setReadyState(this.UNSENT),this.trigger("abort"))},E.prototype.dispatchEvent=function(){return!1},E.prototype.setRequestHeader=function(P,N){this.log('set request header "%s" to "%s"',P,N),this._requestHeaders.append(P,N)},E.prototype.getResponseHeader=function(P){if(this.log('get response header "%s"',P),this.readyState<this.HEADERS_RECEIVED)return this.log("cannot return a header: headers not received (state: %s)",this.readyState),null;var N=this._responseHeaders.get(P);return this.log('resolved response header "%s" to "%s"',P,N,this._responseHeaders),N},E.prototype.getAllResponseHeaders=function(){return this.log("get all response headers"),this.readyState<this.HEADERS_RECEIVED?(this.log("cannot return headers: headers not received (state: %s)",this.readyState),""):o.headersToString(this._responseHeaders)},E.prototype.addEventListener=function(P,N){this.log("addEventListener",P,N),this._events.push({name:P,listener:N})},E.prototype.removeEventListener=function(P,N){this.log("removeEventListener",P,N),this._events=this._events.filter(function(q){return q.name!==P&&q.listener!==N})},E.prototype.overrideMimeType=function(){},E.prototype.getResponseBody=function(P){var N=P??"";switch(this.log("coerced response body to",N),this.responseType){case"json":return this.log("resolving response body as JSON"),s.parseJson(N);case"blob":{var q=this.getResponseHeader("content-type")||"text/plain";return this.log("resolving response body as Blob",{type:q}),new Blob([N],{type:q})}case"arraybuffer":{this.log("resolving response body as ArrayBuffer");var R=c.bufferFrom(N);return R}default:return N}},E.prototype.getResponseXML=function(){var P=this.getResponseHeader("Content-Type");return P==="application/xml"||P==="text/xml"?new a.DOMParser().parseFromString(this.responseText,P):null},E.prototype.propagateCallbacks=function(P){var N,q;this.log("propagating request callbacks to the original request");var R=["abort","onerror","ontimeout","onload","onloadstart","onloadend","onprogress","onreadystatechange"];try{for(var g=r(R),O=g.next();!O.done;O=g.next()){var j=O.value,Q=this[j];Q&&(P[j]=this[j],this.log('propagated the "%s" callback',j,Q))}}catch(H){N={error:H}}finally{try{O&&!O.done&&(q=g.return)&&q.call(g)}finally{if(N)throw N.error}}P.onabort=this.abort,P.onerror=this.onerror,P.ontimeout=this.ontimeout,P.onload=this.onload,P.onloadstart=this.onloadstart,P.onloadend=this.onloadend,P.onprogress=this.onprogress,P.onreadystatechange=this.onreadystatechange},E.prototype.propagateListeners=function(P){this.log("propagating request listeners (%d) to the original request",this._events.length,this._events),this._events.forEach(function(N){var q=N.name,R=N.listener;P.addEventListener(q,R)})},E.prototype.propagateHeaders=function(P,N){var q=this;this.log("propagating request headers to the original request",N),Object.entries(N.raw()).forEach(function(R){var g=n(R,2),O=g[0],j=g[1];q.log('setting "%s" (%s) header on the original request',O,j),P.setRequestHeader(O,j)})},E}(),A.UNSENT=0,A.OPENED=1,A.HEADERS_RECEIVED=2,A.LOADING=3,A.DONE=4,A};return Er.createXMLHttpRequestOverride=w,Er}var Qs;function XA(){if(Qs)return yr;Qs=1;var e=K&&K.__extends||function(){var a=function(s,u){return a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(c,l){c.__proto__=l}||function(c,l){for(var f in l)Object.prototype.hasOwnProperty.call(l,f)&&(c[f]=l[f])},a(s,u)};return function(s,u){if(typeof u!="function"&&u!==null)throw new TypeError("Class extends value "+String(u)+" is not a constructor or null");a(s,u);function c(){this.constructor=s}s.prototype=u===null?Object.create(u):(c.prototype=u.prototype,new c)}}();Object.defineProperty(yr,"__esModule",{value:!0}),yr.XMLHttpRequestInterceptor=void 0;var t=gt,r=ar,n=Vr,i=GA(),o=function(a){e(s,a);function s(){return a.call(this,s.symbol)||this}return s.prototype.checkEnvironment=function(){return typeof window<"u"&&typeof window.XMLHttpRequest<"u"},s.prototype.setup=function(){var u=this.log.extend("setup");u('patching "XMLHttpRequest" module...');var c=window.XMLHttpRequest;t.invariant(!c[r.IS_PATCHED_MODULE],'Failed to patch the "XMLHttpRequest" module: already patched.'),window.XMLHttpRequest=i.createXMLHttpRequestOverride({XMLHttpRequest:c,emitter:this.emitter,log:this.log}),u('native "XMLHttpRequest" module patched!',window.XMLHttpRequest.name),Object.defineProperty(window.XMLHttpRequest,r.IS_PATCHED_MODULE,{enumerable:!0,configurable:!0,value:!0}),this.subscriptions.push(function(){Object.defineProperty(window.XMLHttpRequest,r.IS_PATCHED_MODULE,{value:void 0}),window.XMLHttpRequest=c,u('native "XMLHttpRequest" module restored!',window.XMLHttpRequest.name)})},s.symbol=Symbol("xhr"),s}(n.Interceptor);return yr.XMLHttpRequestInterceptor=o,yr}var Hi={},Cr={},Br={},Us;function ll(){if(Us)return Br;Us=1,Object.defineProperty(Br,"__esModule",{value:!0}),Br.MemoryLeakError=void 0;let e=class extends Error{constructor(r,n,i){super(`Possible EventEmitter memory leak detected. ${i} ${n.toString()} listeners added. Use emitter.setMaxListeners() to increase limit`),this.emitter=r,this.type=n,this.count=i,this.name="MaxListenersExceededWarning"}};return Br.MemoryLeakError=e,Br}var js;function JA(){if(js)return Cr;js=1,Object.defineProperty(Cr,"__esModule",{value:!0}),Cr.Emitter=void 0;const e=ll();let t=class fl{constructor(){this.events=new Map,this.maxListeners=fl.defaultMaxListeners,this.hasWarnedAboutPotentialMemoryLeak=!1}static listenerCount(n,i){return n.listenerCount(i)}_emitInternalEvent(n,i,o){this.emit(n,i,o)}_getListeners(n){return this.events.get(n)||[]}_removeListener(n,i){const o=n.indexOf(i);return o>-1&&n.splice(o,1),[]}_wrapOnceListener(n,i){const o=(...a)=>{this.removeListener(n,o),i.apply(this,a)};return o}setMaxListeners(n){return this.maxListeners=n,this}getMaxListeners(){return this.maxListeners}eventNames(){return Array.from(this.events.keys())}emit(n,...i){const o=this._getListeners(n);return o.forEach(a=>{a.apply(this,i)}),o.length>0}addListener(n,i){this._emitInternalEvent("newListener",n,i);const o=this._getListeners(n).concat(i);if(this.events.set(n,o),this.maxListeners>0&&this.listenerCount(n)>this.maxListeners&&!this.hasWarnedAboutPotentialMemoryLeak){this.hasWarnedAboutPotentialMemoryLeak=!0;const a=new e.MemoryLeakError(this,n,this.listenerCount(n));console.warn(a)}return this}on(n,i){return this.addListener(n,i)}once(n,i){return this.addListener(n,this._wrapOnceListener(n,i))}prependListener(n,i){const o=this._getListeners(n);if(o.length>0){const a=[i].concat(o);this.events.set(n,a)}else this.events.set(n,o.concat(i));return this}prependOnceListener(n,i){return this.prependListener(n,this._wrapOnceListener(n,i))}removeListener(n,i){const o=this._getListeners(n);return o.length>0&&(this._removeListener(o,i),this.events.set(n,o),this._emitInternalEvent("removeListener",n,i)),this}off(n,i){return this.removeListener(n,i)}removeAllListeners(n){return n?this.events.delete(n):this.events.clear(),this}listeners(n){return Array.from(this._getListeners(n))}listenerCount(n){return this._getListeners(n).length}rawListeners(n){return this.listeners(n)}};return Cr.Emitter=t,t.defaultMaxListeners=10,Cr}var qs;function WA(){return qs||(qs=1,function(e){var t=K&&K.__createBinding||(Object.create?function(n,i,o,a){a===void 0&&(a=o);var s=Object.getOwnPropertyDescriptor(i,o);(!s||("get"in s?!i.__esModule:s.writable||s.configurable))&&(s={enumerable:!0,get:function(){return i[o]}}),Object.defineProperty(n,a,s)}:function(n,i,o,a){a===void 0&&(a=o),n[a]=i[o]}),r=K&&K.__exportStar||function(n,i){for(var o in n)o!=="default"&&!Object.prototype.hasOwnProperty.call(i,o)&&t(i,n,o)};Object.defineProperty(e,"__esModule",{value:!0}),r(JA(),e),r(ll(),e)}(Hi)),Hi}var YA=Object.create,$n=Object.defineProperty,KA=Object.getOwnPropertyDescriptor,ZA=Object.getOwnPropertyNames,_A=Object.getPrototypeOf,$A=Object.prototype.hasOwnProperty,pl=(e,t)=>{for(var r in t)$n(e,r,{get:t[r],enumerable:!0})},dl=(e,t,r,n)=>{if(t&&typeof t=="object"||typeof t=="function")for(let i of ZA(t))!$A.call(e,i)&&i!==r&&$n(e,i,{get:()=>t[i],enumerable:!(n=KA(t,i))||n.enumerable});return e},en=(e,t,r)=>(r=e!=null?YA(_A(e)):{},dl(t||!e||!e.__esModule?$n(r,"default",{value:e,enumerable:!0}):r,e)),ev=e=>dl($n({},"__esModule",{value:!0}),e),hl={};pl(hl,{GraphQLHandler:()=>ti,MockedRequest:()=>tn,RESTMethods:()=>Ul,RequestHandler:()=>la,RestHandler:()=>fa,SetupApi:()=>Xl,SetupWorkerApi:()=>Jl,cleanUrl:()=>ua,compose:()=>Fl,context:()=>Al,createResponseComposition:()=>io,defaultContext:()=>ei,defaultResponse:()=>Ml,graphql:()=>Ug,graphqlContext:()=>Hl,handleRequest:()=>pa,matchRequestUrl:()=>ca,response:()=>Ql,rest:()=>Fg,restContext:()=>jl,setupWorker:()=>xg});var Qt=ev(hl),Al={};pl(Al,{body:()=>ml,cookie:()=>oa,data:()=>yl,delay:()=>bl,errors:()=>Dl,extensions:()=>El,fetch:()=>Tl,json:()=>dr,set:()=>gl,status:()=>vl,text:()=>wl,xml:()=>Il});var tv={100:"Continue",101:"Switching Protocols",102:"Processing",103:"Early Hints",200:"OK",201:"Created",202:"Accepted",203:"Non-Authoritative Information",204:"No Content",205:"Reset Content",206:"Partial Content",207:"Multi-Status",208:"Already Reported",226:"IM Used",300:"Multiple Choices",301:"Moved Permanently",302:"Found",303:"See Other",304:"Not Modified",305:"Use Proxy",307:"Temporary Redirect",308:"Permanent Redirect",400:"Bad Request",401:"Unauthorized",402:"Payment Required",403:"Forbidden",404:"Not Found",405:"Method Not Allowed",406:"Not Acceptable",407:"Proxy Authentication Required",408:"Request Timeout",409:"Conflict",410:"Gone",411:"Length Required",412:"Precondition Failed",413:"Payload Too Large",414:"URI Too Long",415:"Unsupported Media Type",416:"Range Not Satisfiable",417:"Expectation Failed",418:"I'm a Teapot",421:"Misdirected Request",422:"Unprocessable Entity",423:"Locked",424:"Failed Dependency",425:"Too Early",426:"Upgrade Required",428:"Precondition Required",429:"Too Many Requests",431:"Request Header Fields Too Large",451:"Unavailable For Legal Reasons",500:"Internal Server Error",501:"Not Implemented",502:"Bad Gateway",503:"Service Unavailable",504:"Gateway Timeout",505:"HTTP Version Not Supported",506:"Variant Also Negotiates",507:"Insufficient Storage",508:"Loop Detected",509:"Bandwidth Limit Exceeded",510:"Not Extended",511:"Network Authentication Required"},vl=(e,t)=>r=>(r.status=e,r.statusText=t||tv[String(e)],r),rv=We;function gl(...e){return t=>{const[r,n]=e;return typeof r=="string"?t.headers.append(r,n):(0,rv.objectToHeaders)(r).forEach((o,a)=>{t.headers.append(a,o)}),t}}var nv=en(Hr),oa=(e,t,r)=>n=>{const i=nv.serialize(e,t,r);return n.headers.append("Set-Cookie",i),typeof document<"u"&&(document.cookie=i),n},ml=e=>t=>(t.body=e,t);function wt(e){try{return JSON.parse(e)}catch{return}}function Hs(e){return e!=null&&typeof e=="object"&&!Array.isArray(e)}function pr(e,t){return Object.entries(t).reduce((r,[n,i])=>{const o=r[n];return Array.isArray(o)&&Array.isArray(i)?(r[n]=o.concat(i),r):Hs(o)&&Hs(i)?(r[n]=pr(o,i),r):(r[n]=i,r)},Object.assign({},e))}var dr=e=>t=>(t.headers.set("Content-Type","application/json"),t.body=JSON.stringify(e),t),yl=e=>t=>{const r=wt(t.body)||{},n=pr(r,{data:e});return dr(n)(t)},El=e=>t=>{const r=wt(t.body)||{},n=pr(r,{extensions:e});return dr(n)(t)},iv=so,Vi=2147483647,Vs=100,ov=400,av=5,zs=()=>(0,iv.isNodeProcess)()?av:Math.floor(Math.random()*(ov-Vs)+Vs),bl=e=>t=>{let r;if(typeof e=="string")switch(e){case"infinite":{r=Vi;break}case"real":{r=zs();break}default:throw new Error(`Failed to delay a response: unknown delay mode "${e}". Please make sure you provide one of the supported modes ("real", "infinite") or a number to "ctx.delay".`)}else if(typeof e>"u")r=zs();else{if(e>Vi)throw new Error(`Failed to delay a response: provided delay duration (${e}) exceeds the maximum allowed duration for "setTimeout" (${Vi}). This will cause the response to be returned immediately. Please use a number within the allowed range to delay the response by exact duration, or consider the "infinite" delay mode to delay the response indefinitely.`);r=e}return t.delay=r,t},Dl=e=>t=>{if(e==null)return t;const r=wt(t.body)||{},n=pr(r,{errors:e});return dr(n)(t)},sv=so,uv=We,Gs=(0,sv.isNodeProcess)()?(e,t)=>Promise.resolve().then(()=>en(Mf())).then(({default:r})=>r(e,t)):globalThis.fetch,Xs=e=>{const t=new uv.Headers(e.headers);return t.set("x-msw-bypass","true"),{...e,headers:t.all()}},cv=e=>{const{body:t,method:r}=e,n={...e,body:void 0};return["GET","HEAD"].includes(r)||(typeof t=="object"||typeof t=="number"||typeof t=="boolean"?n.body=JSON.stringify(t):n.body=t),n},Tl=(e,t={})=>{if(typeof e=="string")return Gs(e,Xs(t));const r=cv(e),n=Xs(r);return Gs(e.url.href,n)},wl=e=>t=>(t.headers.set("Content-Type","text/plain"),t.body=e,t),Il=e=>t=>(t.headers.set("Content-Type","text/xml"),t.body=e,t),lv=gt,fv=gt,pv="[MSW]";function aa(e,...t){const r=(0,fv.format)(e,...t);return`${pv} ${r}`}function dv(e,...t){console.warn(aa(e,...t))}function hv(e,...t){console.error(aa(e,...t))}var ve={formatMessage:aa,warn:dv,error:hv};function Av(){(0,lv.invariant)(typeof URL<"u",ve.formatMessage(`Global "URL" class is not defined. This likely means that you're running MSW in an environment that doesn't support all Node.js standard API (e.g. React Native). If that's the case, please use an appropriate polyfill for the "URL" class, like "react-native-url-polyfill".`))}var vv=gt,gv=so,mv=St,yv=St;function zi(e,t,r){return[e.active,e.installing,e.waiting].filter(a=>a!=null).find(a=>r(a.scriptURL,t))||null}function Ev(e){return new URL(e,location.href).href}var bv=async(e,t={},r)=>{const n=Ev(e),i=await navigator.serviceWorker.getRegistrations().then(u=>u.filter(c=>zi(c,n,r)));!navigator.serviceWorker.controller&&i.length>0&&location.reload();const[o]=i;if(o)return o.update().then(()=>[zi(o,n,r),o]);const[a,s]=await(0,yv.until)(async()=>{const u=await navigator.serviceWorker.register(e,t);return[zi(u,n,r),u]});if(a){if(a.message.includes("(404)")){const c=new URL(t?.scope||"/",location.href);throw new Error(ve.formatMessage(`Failed to register a Service Worker for scope ('${c.href}') with script ('${n}'): Service Worker script does not exist at the given path.

Did you forget to run "npx msw init <PUBLIC_DIR>"?

Learn more about creating the Service Worker script: https://mswjs.io/docs/cli/init`))}throw new Error(ve.formatMessage(`Failed to register the Service Worker:

%s`,a.message))}return s};function Sl(e={}){if(e.quiet)return;const t=e.message||"Mocking enabled.";console.groupCollapsed(`%c${ve.formatMessage(t)}`,"color:orangered;font-weight:bold;"),console.log("%cDocumentation: %chttps://mswjs.io/docs","font-weight:bold","font-weight:normal"),console.log("Found an issue? https://github.com/mswjs/msw/issues"),e.workerUrl&&console.log("Worker script URL:",e.workerUrl),e.workerScope&&console.log("Worker scope:",e.workerScope),console.groupEnd()}async function Dv(e,t){var r,n;if(e.workerChannel.send("MOCK_ACTIVATE"),await e.events.once("MOCKING_ENABLED"),e.isMockingEnabled){ve.warn('Found a redundant "worker.start()" call. Note that starting the worker while mocking is already enabled will have no effect. Consider removing this "worker.start()" call.');return}e.isMockingEnabled=!0,Sl({quiet:t.quiet,workerScope:(r=e.registration)==null?void 0:r.scope,workerUrl:(n=e.worker)==null?void 0:n.scriptURL})}var Tv=class{constructor(e){this.port=e}postMessage(e,...t){const[r,n]=t;this.port.postMessage({type:e,data:r},{transfer:n})}},Nl=class extends Error{constructor(e){super(e),this.name="NetworkError"}},wv=kn,Iv=We,Sv=en(Hr),Js=Ao,Nv=kn,Cv=et,Bv=We,Ov=en(Hr);function Ws(){return Ov.parse(document.cookie)}function Pv(e){if(typeof document>"u"||typeof location>"u")return{};switch(e.credentials){case"same-origin":return location.origin===e.url.origin?Ws():{};case"include":return Ws();default:return{}}}var Rv=We;function kv(e){var t,r;const n=(0,Rv.stringToHeaders)(e),i=n.get("content-type")||"text/plain",o=n.get("content-disposition");if(!o)throw new Error('"Content-Disposition" header is required.');const a=o.split(";").reduce((c,l)=>{const[f,...d]=l.trim().split("=");return c[f]=d.join("="),c},{}),s=(t=a.name)==null?void 0:t.slice(1,-1),u=(r=a.filename)==null?void 0:r.slice(1,-1);return{name:s,filename:u,contentType:i}}function Lv(e,t){const r=t?.get("content-type");if(!r)return;const[,...n]=r.split(/; */),i=n.filter(u=>u.startsWith("boundary=")).map(u=>u.replace(/^boundary=/,""))[0];if(!i)return;const o=new RegExp(`--+${i}`),a=e.split(o).filter(u=>u.startsWith(`\r
`)&&u.endsWith(`\r
`)).map(u=>u.trimStart().replace(/\r\n$/,""));if(!a.length)return;const s={};try{for(const u of a){const[c,...l]=u.split(`\r
\r
`),f=l.join(`\r
\r
`),{contentType:d,filename:v,name:w}=kv(c),T=v===void 0?f:new File([f],v,{type:d}),A=s[w];A===void 0?s[w]=T:Array.isArray(A)?s[w]=[...A,T]:s[w]=[A,T]}return s}catch{return}}function Cl(e,t){var r;if(!e)return e;const n=((r=t?.get("content-type"))==null?void 0:r.toLowerCase())||"";return n.startsWith("multipart/form-data")&&typeof e!="object"?Lv(e.toString(),t)||e:n.includes("json")&&typeof e!="object"&&wt(e.toString())||e}function sa(e,t){return e.toLowerCase()===t.toLowerCase()}var tn=class extends Nv.IsomorphicRequest{constructor(e,t={}){super(e,t),t.id&&(this.id=t.id),this.cache=t.cache||"default",this.destination=t.destination||"",this.integrity=t.integrity||"",this.keepalive=t.keepalive||!1,this.mode=t.mode||"cors",this.priority=t.priority||"auto",this.redirect=t.redirect||"follow",this.referrer=t.referrer||"",this.referrerPolicy=t.referrerPolicy||"no-referrer",this.cookies=t.cookies||this.getCookies()}get body(){const e=(0,Cv.decodeBuffer)(this._body),t=Cl(e,this.headers);if(!(sa(this.method,"GET")&&t===""))return t}passthrough(){return{status:101,statusText:"Continue",headers:new Bv.Headers,body:null,passthrough:!0,once:!1}}getCookies(){var e;const t=this.headers.get("cookie"),r=t?Sv.parse(t):{};Js.store.hydrate();const n=Array.from((e=Js.store.get({...this,url:this.url.href}))==null?void 0:e.entries()).reduce((a,[s,{value:u}])=>Object.assign(a,{[s.trim()]:u}),{}),o={...Pv(this),...n};for(const[a,s]of Object.entries(o))this.headers.append("cookie",`${a}=${s}`);return{...o,...r}}};function xv(e){const t=new URL(e.url),r=new Iv.Headers(e.headers);return new tn(t,{...e,body:(0,wv.encodeBuffer)(e.body||""),headers:r})}var Fv=St,Mv=async(e,t,r)=>{const n=t.filter(o=>o.test(e,r));if(n.length===0)return{handler:void 0,response:void 0};const i=await n.reduce(async(o,a)=>{const s=await o;if(s?.response)return o;const u=await a.run(e,r);return u===null||u.handler.shouldSkip?null:u.response?(u.response.once&&a.markAsSkipped(!0),u):{request:u.request,handler:u.handler,response:void 0,parsedResult:u.parsedResult}},Promise.resolve(null));return i?{handler:i.handler,publicRequest:i.request,parsedRequest:i.parsedResult,response:i.response}:{handler:void 0,response:void 0}},Bl=en(jp()),Qv=NA,rn=e=>e.referrer.startsWith(e.url.origin)?e.url.pathname:new URL(e.url.pathname,`${e.url.protocol}//${e.url.host}`).href;function Ol(e){var t;const r=e.definitions.find(n=>n.kind==="OperationDefinition");return{operationType:r?.operation,operationName:(t=r?.name)==null?void 0:t.value}}function Uv(e){try{const t=(0,Qv.parse)(e);return Ol(t)}catch(t){return t}}function jv(e,t,r){const n={variables:e};for(const[i,o]of Object.entries(t)){if(!(i in r))throw new Error(`Given files do not have a key '${i}' .`);for(const a of o){const[s,...u]=a.split(".").reverse(),c=u.reverse();let l=n;for(const f of c){if(!(f in l))throw new Error(`Property '${c}' is not in operations.`);l=l[f]}l[s]=r[i]}}return n.variables}function qv(e){var t,r;switch(e.method){case"GET":{const n=e.url.searchParams.get("query"),i=e.url.searchParams.get("variables")||"";return{query:n,variables:wt(i)}}case"POST":{if((t=e.body)!=null&&t.query){const{query:n,variables:i}=e.body;return{query:n,variables:i}}if((r=e.body)!=null&&r.operations){const{operations:n,map:i,...o}=e.body,a=wt(n)||{};if(!a.query)return null;const s=wt(i||"")||{},u=a.variables?jv(a.variables,s,o):{};return{query:a.query,variables:u}}}default:return null}}function Pl(e){const t=qv(e);if(!t||!t.query)return;const{query:r,variables:n}=t,i=Uv(r);if(i instanceof Error){const o=rn(e);throw new Error(ve.formatMessage(`Failed to intercept a GraphQL request to "%s %s": cannot parse query. See the error message from the parser below.

%s`,e.method,o,i.message))}return{operationType:i.operationType,operationName:i.operationName,variables:n}}function Rl(e){return e<300?"#69AB32":e<400?"#F0BB4B":"#E95F5D"}function kl(){const e=new Date;return[e.getHours(),e.getMinutes(),e.getSeconds()].map(String).map(t=>t.slice(0,2)).map(t=>t.padStart(2,"0")).join(":")}function Ll(e){return{...e,body:e.body,headers:e.headers.all()}}var Hv=We;function xl(e){const t=(0,Hv.objectToHeaders)(e.headers),r=Cl(e.body,t);return{...e,body:r}}var Vv=xA,zv=zr,Gv=/[\?|#].*$/g;function Xv(e){return new URL(`/${e}`,"http://localhost").searchParams}function ua(e){return e.replace(Gv,"")}function Jv(e){return/^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(e)}function Wv(e,t){if(Jv(e)||e.startsWith("*"))return e;const r=t||typeof document<"u"&&document.baseURI;return r?decodeURI(new URL(encodeURI(e),r).href):e}function Yv(e,t){if(e instanceof RegExp)return e;const r=Wv(e,t);return ua(r)}function Kv(e){return e.replace(/([:a-zA-Z_-]*)(\*{1,2})+/g,(t,r,n)=>{const i="(.*)";return r?r.startsWith(":")?`${r}${n}`:`${r}${i}`:i}).replace(/([^\/])(:)(?=\d+)/,"$1\\$2").replace(/^([^\/]+)(:)(?=\/\/)/,"$1\\$2")}function ca(e,t,r){const n=Yv(t,r),i=typeof n=="string"?Kv(n):n,o=(0,zv.getCleanUrl)(e),a=(0,Vv.match)(i,{decode:decodeURIComponent})(o),s=a&&a.params||{};return{matches:a!==!1,params:s}}var Zv=We;function Fl(...e){return(...t)=>e.reduceRight((r,n)=>r instanceof Promise?Promise.resolve(r).then(n):n(r),t[0])}var Ml={status:200,statusText:"OK",body:null,delay:0,once:!1,passthrough:!1},_v=[];function io(e,t=_v){return async(...r)=>{const n=Object.assign({},Ml,{headers:new Zv.Headers({"x-powered-by":"msw"})},e),i=[...t,...r].filter(Boolean);return i.length>0?Fl(...i)(n):n}}var Ql=Object.assign(io(),{once:io({once:!0}),networkError(e){throw new Nl(e)}}),$v=/[\/\\]msw[\/\\]src[\/\\](.+)/,eg=/(node_modules)?[\/\\]lib[\/\\](umd|esm|iief|cjs)[\/\\]|^[^\/\\]*$/;function tg(e){const t=e.stack;if(!t)return;const n=t.split(`
`).slice(1).find(o=>!($v.test(o)||eg.test(o)));return n?n.replace(/\s*at [^()]*\(([^)]+)\)/,"$1").replace(/^@/,""):void 0}function rg(e){return e?typeof e[Symbol.iterator]=="function":!1}var ei={status:vl,set:gl,delay:bl,fetch:Tl},la=class{constructor(e){this.shouldSkip=!1,this.ctx=e.ctx||ei,this.resolver=e.resolver;const t=tg(new Error);this.info={...e.info,callFrame:t}}parse(e,t){return null}test(e,t){return this.predicate(e,this.parse(e,t),t)}getPublicRequest(e,t){return e}markAsSkipped(e=!0){this.shouldSkip=e}async run(e,t){if(this.shouldSkip)return null;const r=this.parse(e,t);if(!this.predicate(e,r,t))return null;const i=this.getPublicRequest(e,r),a=await this.wrapResolver(this.resolver)(i,Ql,this.ctx);return this.createExecutionResult(r,i,a)}wrapResolver(e){return async(t,r,n)=>{const i=this.resolverGenerator||await e(t,r,n);if(rg(i)){const{value:o,done:a}=i[Symbol.iterator]().next(),s=await o;return!s&&a?this.resolverGeneratorResult:(this.resolverGenerator||(this.resolverGenerator=i),this.resolverGeneratorResult=s,s)}return i}}createExecutionResult(e,t,r){return{handler:this,parsedResult:e||null,request:t,response:r||null}}},Ul=(e=>(e.HEAD="HEAD",e.GET="GET",e.POST="POST",e.PUT="PUT",e.PATCH="PATCH",e.OPTIONS="OPTIONS",e.DELETE="DELETE",e))(Ul||{}),jl={...ei,cookie:oa,body:ml,text:wl,json:dr,xml:Il},ng=class extends tn{constructor(e,t){super(e.url,{...e,body:e._body}),this.params=t,this.id=e.id}},fa=class extends la{constructor(e,t,r){super({info:{header:`${e} ${t}`,path:t,method:e},ctx:jl,resolver:r}),this.checkRedundantQueryParameters()}checkRedundantQueryParameters(){const{method:e,path:t}=this.info;if(t instanceof RegExp||ua(t)===t)return;Xv(t).forEach((i,o)=>{}),ve.warn(`Found a redundant usage of query parameters in the request handler URL for "${e} ${t}". Please match against a path instead and access query parameters in the response resolver function using "req.url.searchParams".`)}parse(e,t){return ca(e.url,this.info.path,t?.baseUrl)}getPublicRequest(e,t){return new ng(e,t.params||{})}predicate(e,t){return(this.info.method instanceof RegExp?this.info.method.test(e.method):sa(this.info.method,e.method))&&t.matches}log(e,t){const r=rn(e),n=Ll(e),i=xl(t),o=Rl(t.status);console.groupCollapsed(ve.formatMessage("%s %s %s (%c%s%c)"),kl(),e.method,r,`color:${o}`,`${t.status} ${t.statusText}`,"color:inherit"),console.log("Request",n),console.log("Handler:",this),console.log("Response",i),console.groupEnd()}},gn=gt,ig=(e,t)=>r=>{og(e);const n=wt(r.body)||{},i=pr(n,{[e]:t});return dr(i)(r)};function og(e){(0,gn.invariant)(e.trim()!=="",ve.formatMessage("Failed to set a custom field on a GraphQL response: field name cannot be empty.")),(0,gn.invariant)(e!=="data",ve.formatMessage('Failed to set a custom "%s" field on a mocked GraphQL response: forbidden field name. Did you mean to call "ctx.data()" instead?',e)),(0,gn.invariant)(e!=="errors",ve.formatMessage('Failed to set a custom "%s" field on a mocked GraphQL response: forbidden field name. Did you mean to call "ctx.errors()" instead?',e)),(0,gn.invariant)(e!=="extensions",ve.formatMessage('Failed to set a custom "%s" field on a mocked GraphQL response: forbidden field name. Did you mean to call "ctx.extensions()" instead?',e))}function ql(e,t){try{return e()}catch(r){t?.(r)}}var Hl={...ei,data:yl,extensions:El,errors:Dl,cookie:oa,field:ig};function ag(e){return e==null?!1:typeof e=="object"&&"kind"in e&&"definitions"in e}var sg=class extends tn{constructor(e,t,r){super(e.url,{...e,body:e._body}),this.variables=t,this.operationName=r}},ti=class extends la{constructor(e,t,r,n){let i=t;if(ag(t)){const a=Ol(t);if(a.operationType!==e)throw new Error(`Failed to create a GraphQL handler: provided a DocumentNode with a mismatched operation type (expected "${e}", but got "${a.operationType}").`);if(!a.operationName)throw new Error("Failed to create a GraphQL handler: provided a DocumentNode with no operation name.");i=a.operationName}const o=e==="all"?`${e} (origin: ${r.toString()})`:`${e} ${i} (origin: ${r.toString()})`;super({info:{header:o,operationType:e,operationName:i},ctx:Hl,resolver:n}),this.endpoint=r}parse(e){return ql(()=>Pl(e),t=>console.error(t.message))}getPublicRequest(e,t){var r,n;return new sg(e,(r=t?.variables)!=null?r:{},(n=t?.operationName)!=null?n:"")}predicate(e,t){if(!t)return!1;if(!t.operationName&&this.info.operationType!=="all"){const o=rn(e);return ve.warn(`Failed to intercept a GraphQL request at "${e.method} ${o}": anonymous GraphQL operations are not supported.

Consider naming this operation or using "graphql.operation()" request handler to intercept GraphQL requests regardless of their operation name/type. Read more: https://mswjs.io/docs/api/graphql/operation      `),!1}const r=ca(e.url,this.endpoint),n=this.info.operationType==="all"||t.operationType===this.info.operationType,i=this.info.operationName instanceof RegExp?this.info.operationName.test(t.operationName||""):t.operationName===this.info.operationName;return r.matches&&n&&i}log(e,t,r){const n=Ll(e),i=xl(t),o=Rl(t.status),a=r?.operationName?`${r?.operationType} ${r?.operationName}`:`anonymous ${r?.operationType}`;console.groupCollapsed(ve.formatMessage("%s %s (%c%s%c)"),kl(),`${a}`,`color:${o}`,`${t.status} ${t.statusText}`,"color:inherit"),console.log("Request:",n),console.log("Handler:",this),console.log("Response:",i),console.groupEnd()}},ug=3,cg=4,Vl=.5;function lg(e){return e.reduce((t,r)=>(r instanceof fa&&t.rest.push(r),r instanceof ti&&t.graphql.push(r),t),{rest:[],graphql:[]})}function fg(){return(e,t)=>{const{path:r,method:n}=t.info;if(r instanceof RegExp||n instanceof RegExp)return 1/0;const o=sa(e.method,n)?Vl:0,a=rn(e);return(0,Bl.default)(a,r)-o}}function pg(e){return(t,r)=>{if(typeof e.operationName>"u")return 1/0;const{operationType:n,operationName:i}=r.info;if(typeof i!="string")return 1/0;const a=e.operationType===n?Vl:0;return(0,Bl.default)(e.operationName,i)-a}}function dg(e,t,r){return t.reduce((i,o)=>{const a=r(e,o);return i.concat([[a,o]])},[]).sort(([i],[o])=>i-o).filter(([i])=>i<=ug).slice(0,cg).map(([,i])=>i)}function hg(e){return e.length>1?`Did you mean to request one of the following resources instead?

${e.map(t=>`  • ${t.info.header}`).join(`
`)}`:`Did you mean to request "${e[0].info.header}" instead?`}function Ag(e,t,r="warn"){const n=ql(()=>Pl(e));function i(){const s=lg(t),u=n?s.graphql:s.rest,c=dg(e,u,n?pg(n):fg());return c.length>0?hg(c):""}function o(){const s=rn(e),u=n?`${n.operationType} ${n.operationName} (${e.method} ${s})`:`${e.method} ${s}`,c=i();return["captured a request without a matching request handler:",`  • ${u}`,c,`If you still wish to intercept this unhandled request, please create a request handler for it.
Read more: https://mswjs.io/docs/getting-started/mocks`].filter(Boolean).join(`

`)}function a(s){const u=o();switch(s){case"error":throw ve.error("Error: %s",u),new Error(ve.formatMessage('Cannot bypass a request when using the "error" strategy for the "onUnhandledRequest" option.'));case"warn":{ve.warn("Warning: %s",u);break}case"bypass":break;default:throw new Error(ve.formatMessage('Failed to react to an unhandled request: unknown strategy "%s". Please provide one of the supported strategies ("bypass", "warn", "error") or a custom callback function as the value of the "onUnhandledRequest" option.',s))}}if(typeof r=="function"){r(e,{warning:a.bind(null,"warn"),error:a.bind(null,"error")});return}a(r)}var Ys=Ao;function vg(e,t){Ys.store.add({...e,url:e.url.toString()},t),Ys.store.persist()}async function pa(e,t,r,n,i){var o,a,s,u,c,l;if(n.emit("request:start",e),e.headers.get("x-msw-bypass")==="true"){n.emit("request:end",e),(o=i?.onPassthroughResponse)==null||o.call(i,e);return}const[f,d]=await(0,Fv.until)(()=>Mv(e,t,i?.resolutionContext));if(f)throw n.emit("unhandledException",f,e),f;const{handler:v,response:w}=d;if(!v){Ag(e,t,r.onUnhandledRequest),n.emit("request:unhandled",e),n.emit("request:end",e),(a=i?.onPassthroughResponse)==null||a.call(i,e);return}if(!w){ve.warn(`Expected response resolver to return a mocked response Object, but got %s. The original response is going to be used instead.

  • %s
    %s`,w,v.info.header,v.info.callFrame),n.emit("request:end",e),(s=i?.onPassthroughResponse)==null||s.call(i,e);return}if(w.passthrough){n.emit("request:end",e),(u=i?.onPassthroughResponse)==null||u.call(i,e);return}vg(e,w),n.emit("request:match",e);const T=d,A=((c=i?.transformResponse)==null?void 0:c.call(i,w))||w;return(l=i?.onMockedResponse)==null||l.call(i,A,T),n.emit("request:end",e),A}var Ks=We;async function zl(e){return{status:e.status,statusText:e.statusText,headers:(0,Ks.flattenHeadersObject)((0,Ks.headersToObject)(e.headers)),body:await e.clone().text()}}var gg=(e,t)=>async(r,n)=>{var i;const o=new Tv(r.ports[0]),a=xv(n.payload);try{await pa(a,e.requestHandlers,t,e.emitter,{transformResponse:mg,onPassthroughResponse(){o.postMessage("NOT_FOUND")},async onMockedResponse(s,{handler:u,publicRequest:c,parsedRequest:l}){if(s.body instanceof ReadableStream)throw new Error(ve.formatMessage('Failed to construct a mocked response with a "ReadableStream" body: mocked streams are not supported. Follow https://github.com/mswjs/msw/issues/1336 for more details.'));const f=new Response(s.body,s),d=f.clone(),v=await f.arrayBuffer(),w=s.body==null?null:v;o.postMessage("MOCK_RESPONSE",{...s,body:w},[v]),t.quiet||e.emitter.once("response:mocked",async()=>{u.log(c,await zl(d),l)})}})}catch(s){if(s instanceof Nl){o.postMessage("NETWORK_ERROR",{name:s.name,message:s.message});return}s instanceof Error&&(ve.error(`Uncaught exception in the request handler for "%s %s":

%s

This exception has been gracefully handled as a 500 response, however, it's strongly recommended to resolve this error, as it indicates a mistake in your code. If you wish to mock an error response, please see this guide: https://mswjs.io/docs/recipes/mocking-error-responses`,a.method,a.url,(i=s.stack)!=null?i:s),o.postMessage("MOCK_RESPONSE",{status:500,statusText:"Request Handler Error",headers:{"Content-Type":"application/json"},body:JSON.stringify({name:s.name,message:s.message,stack:s.stack})}))}};function mg(e){return{status:e.status,statusText:e.statusText,headers:e.headers.all(),body:e.body,delay:e.delay}}async function yg(e,t){e.workerChannel.send("INTEGRITY_CHECK_REQUEST");const{payload:r}=await e.events.once("INTEGRITY_CHECK_RESPONSE");if(r!=="3d6b9f06410d179a7f7404d4bf4c3c70")throw new Error(`Currently active Service Worker (${r}) is behind the latest published one (3d6b9f06410d179a7f7404d4bf4c3c70).`);return t}var Zs=St;function Eg(e){const t=window.XMLHttpRequest.prototype.send;window.XMLHttpRequest.prototype.send=function(...n){(0,Zs.until)(()=>e).then(()=>{window.XMLHttpRequest.prototype.send=t,this.send(...n)})};const r=window.fetch;window.fetch=async(...n)=>(await(0,Zs.until)(()=>e),window.fetch=r,window.fetch(...n))}function bg(e){return(t,r)=>{var n;const{payload:i}=r;if((n=i.type)!=null&&n.includes("opaque"))return;const o=new Response(i.body||null,i);o.headers.get("x-powered-by")==="msw"?e.emitter.emit("response:mocked",o,i.requestId):e.emitter.emit("response:bypass",o,i.requestId)}}function Dg(e,t){!t?.quiet&&!location.href.startsWith(e.scope)&&ve.warn(`Cannot intercept requests on this page because it's outside of the worker's scope ("${e.scope}"). If you wish to mock API requests on this page, you must resolve this scope issue.

- (Recommended) Register the worker at the root level ("/") of your application.
- Set the "Service-Worker-Allowed" response header to allow out-of-scope workers.`)}var Tg=e=>function(r,n){const o=(async()=>{e.events.removeAllListeners(),e.workerChannel.on("REQUEST",gg(e,r)),e.workerChannel.on("RESPONSE",bg(e));const a=await bv(r.serviceWorker.url,r.serviceWorker.options,r.findWorker),[s,u]=a;if(!s){const l=n?.findWorker?ve.formatMessage(`Failed to locate the Service Worker registration using a custom "findWorker" predicate.

Please ensure that the custom predicate properly locates the Service Worker registration at "%s".
More details: https://mswjs.io/docs/api/setup-worker/start#findworker
`,r.serviceWorker.url):ve.formatMessage(`Failed to locate the Service Worker registration.

This most likely means that the worker script URL "%s" cannot resolve against the actual public hostname (%s). This may happen if your application runs behind a proxy, or has a dynamic hostname.

Please consider using a custom "serviceWorker.url" option to point to the actual worker script location, or a custom "findWorker" option to resolve the Service Worker registration manually. More details: https://mswjs.io/docs/api/setup-worker/start`,r.serviceWorker.url,location.host);throw new Error(l)}e.worker=s,e.registration=u,e.events.addListener(window,"beforeunload",()=>{s.state!=="redundant"&&e.workerChannel.send("CLIENT_CLOSED"),window.clearInterval(e.keepAliveInterval)});const[c]=await(0,mv.until)(()=>yg(e,s));return c&&ve.error(`Detected outdated Service Worker: ${c.message}

The mocking is still enabled, but it's highly recommended that you update your Service Worker by running:

$ npx msw init <PUBLIC_DIR>

This is necessary to ensure that the Service Worker is in sync with the library to guarantee its stability.
If this message still persists after updating, please report an issue: https://github.com/open-draft/msw/issues      `),e.keepAliveInterval=window.setInterval(()=>e.workerChannel.send("KEEPALIVE_REQUEST"),5e3),Dg(u,e.startOptions),u})().then(async a=>{const s=a.installing||a.waiting;return s&&await new Promise(u=>{s.addEventListener("statechange",()=>{if(s.state==="activated")return u()})}),await Dv(e,r).catch(u=>{throw new Error(`Failed to enable mocking: ${u?.message}`)}),a});return r.waitUntilReady&&Eg(o),o};function Gl(e={}){e.quiet||console.log(`%c${ve.formatMessage("Mocking disabled.")}`,"color:orangered;font-weight:bold;")}var wg=e=>function(){var r;if(!e.isMockingEnabled){ve.warn('Found a redundant "worker.stop()" call. Note that stopping the worker while mocking already stopped has no effect. Consider removing this "worker.stop()" call.');return}e.workerChannel.send("MOCK_DEACTIVATE"),e.isMockingEnabled=!1,window.clearInterval(e.keepAliveInterval),Gl({quiet:(r=e.startOptions)==null?void 0:r.quiet})},Ig={serviceWorker:{url:"/mockServiceWorker.js",options:null},quiet:!1,waitUntilReady:!0,onUnhandledRequest:"warn",findWorker(e,t){return e===t}},Sg=kn,Ng=FA(),Cg=XA();function Bg(e){return new Response(e.body,{status:e.status,statusText:e.statusText,headers:e.headers})}function Og(e,t){const r=new Sg.BatchInterceptor({name:"fallback",interceptors:[new Ng.FetchInterceptor,new Cg.XMLHttpRequestInterceptor]});return r.on("request",async n=>{const i=new tn(n.url,{...n,body:await n.arrayBuffer()}),o=await pa(i,e.requestHandlers,t,e.emitter,{transformResponse(a){return{status:a.status,statusText:a.statusText,headers:a.headers.all(),body:a.body,delay:a.delay}},onMockedResponse(a,{handler:s,publicRequest:u,parsedRequest:c}){t.quiet||e.emitter.once("response:mocked",async l=>{s.log(u,await zl(l),c)})}});o&&n.respondWith(o)}),r.on("response",(n,i)=>{if(!n.id)return;const o=Bg(i);i.headers.get("x-powered-by")==="msw"?e.emitter.emit("response:mocked",o,n.id):e.emitter.emit("response:bypass",o,n.id)}),r.apply(),r}function Pg(e){return async function(r){e.fallbackInterceptor=Og(e,r),Sl({message:"Mocking enabled (fallback mode).",quiet:r.quiet})}}function Rg(e){return function(){var r,n;(r=e.fallbackInterceptor)==null||r.dispose(),Gl({quiet:(n=e.startOptions)==null?void 0:n.quiet})}}var kg=gt,_s=WA();function Lg(e,t){const r=e.emit;r._isPiped||(e.emit=function(n,...i){return t.emit(n,...i),r.call(this,n,...i)},e.emit._isPiped=!0)}function $s(e){const t=[...e];return Object.freeze(t),t}var Xl=class{constructor(...e){this.validateHandlers(...e),this.initialHandlers=$s(e),this.currentHandlers=[...e],this.emitter=new _s.Emitter,this.publicEmitter=new _s.Emitter,Lg(this.emitter,this.publicEmitter),this.events=this.createLifeCycleEvents()}validateHandlers(...e){for(const t of e)(0,kg.invariant)(!Array.isArray(t),ve.formatMessage('Failed to construct "%s" given an Array of request handlers. Make sure you spread the request handlers when calling the respective setup function.'),this.constructor.name)}dispose(){this.emitter.removeAllListeners(),this.publicEmitter.removeAllListeners()}use(...e){this.currentHandlers.unshift(...e)}restoreHandlers(){this.currentHandlers.forEach(e=>{e.markAsSkipped(!1)})}resetHandlers(...e){this.currentHandlers=e.length>0?[...e]:[...this.initialHandlers]}listHandlers(){return $s(this.currentHandlers)}createLifeCycleEvents(){return{on:(...e)=>this.publicEmitter.on(...e),removeListener:(...e)=>this.publicEmitter.removeListener(...e),removeAllListeners:(...e)=>this.publicEmitter.removeAllListeners(...e)}}},Jl=class extends Xl{constructor(...e){super(...e),this.startHandler=null,this.stopHandler=null,(0,vv.invariant)(!(0,gv.isNodeProcess)(),ve.formatMessage("Failed to execute `setupWorker` in a non-browser environment. Consider using `setupServer` for Node.js environment instead.")),this.listeners=[],this.context=this.createWorkerContext()}createWorkerContext(){const e={isMockingEnabled:!1,startOptions:null,worker:null,registration:null,requestHandlers:this.currentHandlers,emitter:this.emitter,workerChannel:{on:(t,r)=>{this.context.events.addListener(navigator.serviceWorker,"message",n=>{if(n.source!==this.context.worker)return;const i=n.data;i&&i.type===t&&r(n,i)})},send:t=>{var r;(r=this.context.worker)==null||r.postMessage(t)}},events:{addListener:(t,r,n)=>(t.addEventListener(r,n),this.listeners.push({eventType:r,target:t,callback:n}),()=>{t.removeEventListener(r,n)}),removeAllListeners:()=>{for(const{target:t,eventType:r,callback:n}of this.listeners)t.removeEventListener(r,n);this.listeners=[]},once:t=>{const r=[];return new Promise((n,i)=>{const o=a=>{try{const s=a.data;s.type===t&&n(s)}catch(s){i(s)}};r.push(this.context.events.addListener(navigator.serviceWorker,"message",o),this.context.events.addListener(navigator.serviceWorker,"messageerror",i))}).finally(()=>{r.forEach(n=>n())})}},useFallbackMode:!("serviceWorker"in navigator)||location.protocol==="file:"};return Object.defineProperties(e,{requestHandlers:{get:()=>this.currentHandlers}}),this.startHandler=e.useFallbackMode?Pg(e):Tg(e),this.stopHandler=e.useFallbackMode?Rg(e):wg(e),e}async start(e={}){return this.context.startOptions=pr(Ig,e),await this.startHandler(this.context.startOptions,e)}printHandlers(){this.listHandlers().forEach(t=>{const{header:r,callFrame:n}=t.info,i=t.info.hasOwnProperty("operationType")?"[graphql]":"[rest]";console.groupCollapsed(`${i} ${r}`),n&&console.log(`Declaration: ${n}`),console.log("Handler:",t),console.groupEnd()})}stop(){super.dispose(),this.context.events.removeAllListeners(),this.context.emitter.removeAllListeners(),this.stopHandler()}};function xg(...e){return new Jl(...e)}function yt(e){return(t,r)=>new fa(e,t,r)}var Fg={all:yt(/.+/),head:yt("HEAD"),get:yt("GET"),post:yt("POST"),put:yt("PUT"),delete:yt("DELETE"),patch:yt("PATCH"),options:yt("OPTIONS")};function Pn(e,t){return(r,n)=>new ti(e,r,t,n)}function Wl(e){return t=>new ti("all",new RegExp(".*"),e,t)}var Mg={operation:Wl("*"),query:Pn("query","*"),mutation:Pn("mutation","*")};function Qg(e){return{operation:Wl(e),query:Pn("query",e),mutation:Pn("mutation",e)}}var Ug={...Mg,link:Qg};Av();const jg=`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
zgue4OHa7Dwyi+e082Z07j8ikE/ZyuPdsC7KDw62TrPzYo8+ew2So7RT+D46x7MKD+nRcd6U4Z5c
WdLwFvkqOr8/xDOPhTVk1obxkvA8o4N/3lxeFOmt97XOi1cDbV6b6SE54qtxz4dA+oe+wpukjQVt
kWc5r6WKT7/PM3TIX/Tqmuc579MPo18mbV+0CzwbZD78pH+QMf1q6rApd9Knf70sz9aYO/Cnz+gD
3iB4s+KNi6/Wee68bfAGyhsSZ/c8gnjQH/J25hofvMXS0wvejlgXr27adIbowGu08uxSu6/PlaFs
X+fz3npTQx/wJtlJhS4T8ANjBz7oBm+XtiVS+3Ne4D/Z3hbSDdbP8n5bj2rtp4NH0308n/JMnaSc
yCQcQt+3BjA3jtJVDt4ucdZaW+8voP1j27p8O7VMD6428j3AZsju6ciTOlqLymOsjehU3nCBjEV+
xONrxkkTfS4vnul2+KgbvuhFfJIHcoOGusLO+mleXW/2BPKRMSzlPof87sQbLiKw6p1b/eXTCG0E
Dj2oW+PtM6zs+bhl3K+zj9smKLKeHvCRkOvMmubXsWbJvBsJ+DuakXmOTvg3y1zLYOFfyvvcFVaO
I2VOXpSVmbdraVZ+n5ufI3rBijwk8DzwfpKL7aOtfUacdOqw1iP5LsWr2zpb1r68HNqWx0BZDh5W
a6p8TW8NcLxXaxn4yS4U3/u937s/NvtW1qbk9/Ve6NmZwC4AU6bxKd2tkDzOaavp0d1eL+67A4R3
byR4xDfl/zbSypreDrS8rcjXx7wXPMKp68T7Fo99/vIITHnVRtYvbgPp3p6+cs/ejZGVKUO55gXj
jYoM2JUC3SMv0stzejmnsvCSuqR/8szhibfRWwT9L3rvqC+scZf68mVOPv3J6uGbZazPJv+e0Ufe
LuTtk71AfdVuNxE6yRuYH9v2WLYDircixi6Yp596i7WGWf767GXuZxunPurhLY79VMnFfCu26pzU
GV/zmbbalkrt3k9rVe3ZGg/oNmnYv5DnvfrrbZcJ9NU540zaOTiITzn4DT/b6/xdPtCzvp8XlT4T
Iif00fYad38jtE3Ydm+rfMIRvsk723bWy3V4ce1NloAv7Wdf6u1Ds/3N6WbsPPWp9K2cPYOtvb7t
jiCkbdF/XeP7XvAbGKJjrEsmF9rFGw3xaYd7+truQd3we/IEuE8wo+G9SjDTMcsV5HkdYfK2VW6f
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
wLiEwVE9Zhw+J9/hIfKKT0ZC6jzzTrm7VM4RrowueDCgJy6wSX+ZRihe8DANnHiYlKuM1CHn9IM5
wB+l0Z7Spt7a1BG5Weu11udIfmaaYDTPEzf1wCM+4jyabXmrXacBFV6Dx8r70f3kZW1P90f6O1ih
tz4/KmPGpc+mrEfzo5X+hsaRXM7yLtUv8rHWeeV/be/1+aWyjvId8aJ9E3+UZ+pnZUVWU+6lvLOs
a/IAy4nF1Kni9Uc86HszpJ+S2WvhLgN1ejHS8dcK5n4F6Z4GlGYFKnHXBPAoHz5WcK8BsJa78n8t
r8a4pQAmTpN2eL83/zU+nuPZiuUlHIJXzo/wv+Z1H+G+VN5z1O05aEx80Au/Oadu89mlclNvz+f1
pfRrfBSs+CiEtdzwNdOK017BXNlpP9dTcac+Rwo8WEh/TcFcqtvEKnW71P6T//C+4vEy9+GNgRXs
Jg8pV/0oU2eeaXjw2vD8TM/sJf4zkWecRklnXWp4UFbaMW2TOqV9PL/V19KGE49r+jPp5DOIhI/I
ibwT/+A06YenWf/Z7olHRxmhkbY8koVJP7hI54D/xOSIF3Gpy5H8Js/kc9J55Fo5a5vN/LN+RzLy
sjyE7iWaqX94Sbq07dpek55nuQ/+R3VaeQgOE49Z/yNcIxPz2crb5H3Slkf+axhPno7KP4o7orfG
rXU/oiNu4jfrdSn9PWnkneW7zpH8eX5P/7/Ey1F8ypn1UsYR39Loq3SlCSI9Kv+c7B+VMeNuGqhH
rtjEEY4jpXnE7C1GzngOjFfl5ZYCCgaznEvCm0Y9wmyt/yUal9Kt8bl/1fpfopv48Hkp3aPlwyjt
dg9Ol8q9FX8J37U+K/+X8inv6NkqH6sMpK7hN8+V6wjNmW7l6VJdV9prulnXazRXniadFa+Jg2dH
BszKx3PcH/ExMY1BJI7RKD3jJfVO/hWHGJYxUkMz95fyzTpN45QXNAYupU0+1kFk4h0PNr7ET310
qX0jO85Zo6b+DnnSLrnHg7STj3vqtbbbpTyrzCdf0q905n14Fecarcm3Ngwu0qhHZC51zTnPkj9Y
HpUfOXAOn0f8BrNLadY8oZsyg014n+fU+dIz8VNWrqVLeSs/KUP8it2UtZXv0FvPR/TXNPfSWvNN
2iuNPFvjVxqzvvJMvXCUNnHBZ6aJLN7KN5/fw194dL4nPd7C35p+ysf6bJYzy1pxDn1p0rdmnVxn
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
/wHV7R8R5VQ67wAAAABJRU5ErkJggg==`,qg=[Qt.rest.get("https://matrix.example.com/_matrix/media/v3/download/midnightthoughts.space/59ced67d3dfbcc5c129c3e12d3083bf5652f6ff5",async(e,t,r)=>{const n=Uint8Array.from(atob(jg),i=>i.charCodeAt(0));return t(r.set("Content-Length",n.byteLength.toString()),r.set("Content-Type","image/jpeg"),r.body(n))}),Qt.rest.get("https://matrix.example.com/_matrix/client/v3/profile/@example:example.com",async(e,t,r)=>t(r.status(200),r.json({avatar_url:"mxc://midnightthoughts.space/59ced67d3dfbcc5c129c3e12d3083bf5652f6ff5",displayname:"Alice Margatroid"}))),Qt.rest.post("https://matrix.example.com/_matrix/client/v3/logout",async(e,t,r)=>t(r.status(200),r.json({}))),Qt.rest.post("https://sliding.matrix.example.com/_matrix/client/unstable/org.matrix.msc3575/sync",async(e,t,r)=>t(r.status(404),r.json({errcode:"M_UNKNOWN",error:"Unknown error"}))),Qt.rest.post("https://matrix.example.com/_matrix/client/v3/keys/upload",async(e,t,r)=>t(r.status(200),r.json({one_time_key_counts:{curve25519:0,signed_curve25519:0}}))),Qt.rest.post("https://matrix.example.com/_matrix/client/v3/keys/query",async(e,t,r)=>t(r.status(200),r.json({})))],zg=Qt.setupWorker(...qg);export{zg as worker};
//# sourceMappingURL=browser-7311585d.js.map
