{"version":3,"file":"roomList-657c190b.js","sources":["../../../node_modules/lucide-react/dist/esm/icons/chevron-right.js","../../../src/components/roomList/roomList.tsx"],"sourcesContent":["/**\n * lucide-react v0.171.0 - ISC\n */\n\nimport createLucideIcon from '../createLucideIcon.js';\n\nconst ChevronRight = createLucideIcon(\"ChevronRight\", [\n  [\"polyline\", { points: \"9 18 15 12 9 6\", key: \"1rtp27\" }]\n]);\n\nexport { ChevronRight as default };\n//# sourceMappingURL=chevron-right.js.map\n","import { FC, memo, useState } from \"react\";\nimport RoomListItem from \"./roomListItem/roomListItem\";\nimport { ChevronDown, ChevronRight } from \"lucide-react\";\nimport './roomList.scss';\nimport { useNavigate } from \"react-router-dom\";\n\ntype Room = {\n    /**\n     * The URL of the Avatar image\n     */\n    avatarUrl?: string\n    /**\n     * The displayname of the room list item\n     */\n    displayname: string\n    /**\n     * Wether it is a DM or not\n     */\n    dm: boolean\n    /**\n     * Wether the user is online. Only used if dm is true.\n     */\n    online: boolean\n    /**\n     * The roomid of the Room\n     */\n    roomID: string\n};\n\nexport type Section = {\n    /**\n     * Section Name. Can be a Space or a Tag\n     */\n    sectionName: string\n    /**\n     * The Rooms within the Section\n     */\n    rooms: Room[]\n    /**\n     * The Subsections of the Section\n     */\n    subsections: Section[]\n    /**\n     * The roomid of the Space\n     */\n    roomID: string\n}\n\ntype RoomListProps = {\n    /**\n     * The Sections available\n     */\n    sections: Section[]\n    /**\n     * Rooms outside of any Sections\n     */\n    rooms: Room[]\n};\n\ntype RoomListRoomsProps = {\n    /**\n     * The roomid of the Space\n     */\n    sectionID: string\n    /**\n     * Rooms\n     */\n    rooms: Room[]\n    /**\n     * The onClick handler\n     */\n    onClick: (roomID: string) => void;\n    /**\n     * The activeRoom\n     */\n    activeRoom?: string;\n    /**\n     * If rooms are hidden\n     */\n    hidden: boolean\n};\n\nconst RoomListRooms: FC<RoomListRoomsProps> = memo(({ sectionID, rooms, onClick, activeRoom, hidden }: RoomListRoomsProps) => {\n    // Get room ids of rooms\n    const roomsRendered = rooms.map(room => {\n        return (\n            <RoomListItem\n                roomId={room.roomID}\n                hidden={hidden}\n                key={`${room.roomID}+${sectionID}`}\n                avatarUrl={room.avatarUrl}\n                displayname={room.displayname}\n                dm={room.dm}\n                online={room.online}\n                active={room.roomID === activeRoom}\n                onClick={() => { onClick(room.roomID) }}\n            />\n        );\n    });\n    return (\n        <>\n            {roomsRendered}\n        </>\n    );\n})\n\nconst RoomSection: FC<{ section: Section, onRoomClick: (roomID: string) => void, activeRoom: string | undefined }> = memo(({ section, onRoomClick, activeRoom }: { section: Section, onRoomClick: (roomID: string) => void, activeRoom: string | undefined }) => {\n    const [hidden, setHidden] = useState<boolean>(true);\n    return (\n        <div key={section.roomID} className=\"flex flex-col gap-1 pl-4\">\n            <div className=\"flex flex-row gap-2 py-1  items-center justify-start cursor-pointer h-8 text-slate-600\" onClick={() => setHidden(prev => !prev)}>\n                {hidden ? <ChevronRight size={14} /> : <ChevronDown size={14} />}\n                <span className='font-normal text-sm capitalize max-w-[32ch] overflow-hidden text-ellipsis w-full whitespace-nowrap'>{section.sectionName}</span>\n            </div >\n            {!hidden && (<RoomListRooms\n                hidden={hidden}\n                sectionID={section.roomID}\n                rooms={section.rooms}\n                onClick={onRoomClick}\n                activeRoom={activeRoom}\n            />)}\n            {!hidden && (\n                section.subsections.map(section => {\n                    return (\n                        <RoomSection\n                            key={section.roomID}\n                            section={section}\n                            onRoomClick={onRoomClick}\n                            activeRoom={activeRoom}\n                        />\n                    );\n                })\n            )}\n        </div>\n    );\n})\n\nconst RoomList: FC<RoomListProps> = memo(({ sections, rooms }: RoomListProps) => {\n    const [activeRoom, setActiveRoom] = useState<string | undefined>(undefined);\n    const navigate = useNavigate();\n\n    return (\n        <div className=\"flex flex-col gap-1 flex-1 p-2 min-w-[33ch] h-full overflow-y-auto overflow-x-hidden scrollbarSmall\">\n            {\n                sections.map(section => {\n                    return (\n                        <RoomSection\n                            key={section.roomID}\n                            section={section}\n                            onRoomClick={(roomID: string) => {\n                                setActiveRoom(roomID);\n                                navigate(`/${encodeURI(roomID)}`);\n                            }}\n                            activeRoom={activeRoom}\n                        />\n                    );\n                })\n            }\n            <RoomSection\n                section={{\n                    sectionName: \"Others\",\n                    roomID: \"other\",\n                    subsections: [],\n                    rooms: rooms\n                }}\n                onRoomClick={(roomID: string) => {\n                    setActiveRoom(roomID);\n                    navigate(`/${encodeURI(roomID)}`);\n                }}\n                activeRoom={activeRoom}\n            />\n\n        </div>\n    );\n})\n\nexport default RoomList"],"names":["ChevronRight","createLucideIcon","RoomListRooms","memo","sectionID","rooms","onClick","activeRoom","hidden","roomsRendered","room","jsx","RoomListItem","RoomSection","section","onRoomClick","setHidden","useState","jsxs","prev","ChevronDown","RoomList","sections","setActiveRoom","navigate","useNavigate","roomID"],"mappings":"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","x_google_ignoreList":[0]}