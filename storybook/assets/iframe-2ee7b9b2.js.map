{"version":3,"file":"iframe-2ee7b9b2.js","sources":["../../../.storybook/preview.tsx","../../../src/components/avatar/avatar.tsx","../../../src/components/button/button.tsx","../../../src/components/header/header.tsx","../../../src/components/input/basic/input.tsx","../../../src/components/input/chat/plugins/AutoLinkPlugin.tsx","../../../src/components/input/chat/plugins/ToolbarPlugin.tsx","../../../src/components/input/chat/plugins/CodeHighlightPlugin.ts","../../../src/components/input/chat/theme.ts","../../../src/components/input/chat/input.tsx","../../../src/app/sdk/api/apiTypes.ts","../../../src/app/sdk/room.ts","../../../src/app/sdk/client.ts","../../../src/components/roomList/roomListItem/roomListItem.tsx","../../../src/components/roomList/roomList.tsx","../../../src/documentation/Welcome.stories.mdx","../../../src/components/login/login.tsx","../../../src/pages/LoginPage.tsx","../../../src/components/events/messageEvent.tsx","../../../src/components/events/unknownEvent.tsx","../../../src/components/events/memberEvent.tsx","../../../src/pages/MainPage.tsx","../../../../../../../../virtual:/@storybook/builder-vite/storybook-stories.js","../../../../../../../../virtual:/@storybook/builder-vite/vite-app.js"],"sourcesContent":["import type { Preview } from \"@storybook/react\";\nimport React from \"react\";\nimport { withThemeByDataAttribute } from '@storybook/addon-styling';\nimport \"../src/index.scss\";\nimport \"./tailwindcss.scss\";\n\nconst preview: Preview = {\n  parameters: {\n    actions: { argTypesRegex: \"^on[A-Z].*\" },\n    controls: {\n      matchers: {\n        color: /(background|color)$/i,\n        date: /Date$/,\n      },\n    },\n    options: {\n      storySort: {\n        order: ['Introduction', 'Fundamentals', '*'],\n      },\n    },\n  },\n  decorators: [\n    withThemeByDataAttribute({\n      themes: {\n        light: 'light',\n        dark: 'dark',\n      },\n      defaultTheme: 'light',\n      attributeName: 'data-mode',\n    }),\n    (Story) => (\n      <Story />\n    ),\n  ]\n};\n\nexport default preview;\n","import { FC, memo } from \"react\";\n\ntype AvatarProps = {\n    /**\n     * The URL of the Avatar image\n     */\n    avatarUrl?: string\n    /**\n     * The displayname of the avatar user\n     */\n    displayname: string\n    /**\n     * Wether it is a DM or not\n     */\n    dm: boolean\n    /**\n     * Wether the user is online. Only used if dm is true.\n     */\n    online: boolean\n};\n\nconst Avatar: FC<AvatarProps> = memo(({ avatarUrl, displayname, dm = false, online = false }: AvatarProps) => {\n    if (avatarUrl) {\n        return (\n            <div className=\"flex relative min-w-[2rem] min-h-[2rem] justify-center items-center m-0 mr-3 text-xl rounded-full text-white\">\n                <img className=\"rounded-full w-8 h-8\" alt={displayname} src={avatarUrl} />\n                {\n                    dm ?\n                        (\n                            online ?\n                                <div className=\"bg-green-500 rounded-full w-3 h-3 absolute bottom-0 right-0\"></div> :\n                                <div className=\"bg-red-500 rounded-full w-3 h-3 absolute bottom-0 right-0\"></div>\n                        ) :\n                        <></>\n                }\n            </div>\n        );\n    }\n    return (\n        <div className=\"flex relative min-w-[2rem] min-h-[2rem] w-[2rem] h-[2rem] bg-orange-500 justify-center items-center m-0 mr-3 text-xl rounded-full text-white\">\n            {displayname.replace('@', '')[0].toUpperCase()}\n            {\n                dm ?\n                    (\n                        online ?\n                            <div className=\"bg-green-500 rounded-full w-3 h-3 absolute bottom-0 right-0\"></div> :\n                            <div className=\"bg-red-500 rounded-full w-3 h-3 absolute bottom-0 right-0\"></div>\n                    ) :\n                    <></>\n            }\n        </div>\n    );\n})\n\nexport default Avatar;","import { FC, memo } from \"react\";\nimport \"./button.scss\";\n\ntype ButtonProps = {\n    /**\n     * The button type\n     */\n    type?: \"button\" | \"submit\" | \"reset\";\n    /**\n     * The button style\n     */\n    style?: \"primary\" | \"secondary\" | \"abort\";\n    /**\n     * The button onClick handler\n     */\n    onClick?: () => void;\n    /**\n     * The button Label\n     */\n    children: string\n\n    /**\n     * If the button is readonly\n     */\n    readonly: boolean\n};\n\nconst Button: FC<ButtonProps> = memo(({ type = \"button\", style = \"primary\", onClick, children, readonly }: ButtonProps) => {\n    if (style === \"secondary\") {\n        return <button disabled={readonly} onClick={onClick} className=\"button bg-orange-400 hover:bg-orange-500 ease-out duration-150 disabled:bg-slate-200 disabled:cursor-not-allowed\" type={type}>{children}</button>;\n    } else if (style === \"abort\") {\n        return <button disabled={readonly} onClick={onClick} className=\"button bg-red-400 hover:bg-red-500 ease-out duration-150 disabled:bg-slate-200 disabled:cursor-not-allowed\" type={type}>{children}</button>;\n    } else {\n        return <button disabled={readonly} onClick={onClick} className=\"button bg-green-400 hover:bg-green-500 ease-out duration-150 disabled:bg-slate-200 disabled:cursor-not-allowed\" type={type}>{children}</button>;\n    }\n})\nexport default Button;","import { FC, memo } from \"react\";\n\ntype HeaderProps = {\n    /**\n     * The HeaderText\n     */\n    children: string\n};\n\nconst Header: FC<HeaderProps> = memo(({ children }: HeaderProps) => {\n    return <h1 className='text-black font-bold text-xl'>{children}</h1>;\n})\n\nexport default Header","import { ChangeEvent, FC, memo } from 'react';\n\ntype InputProps = {\n    /**\n     * The Placeholder text\n     */\n    placeholder: string\n    /**\n     * If it is a password input\n     */\n    password?: boolean\n    /**\n     * If input should be autofocused\n     */\n    autoFocus?: boolean\n    /**\n     * The value of the input field\n     */\n    value: string\n    /**\n     * If the input is readonly\n     */\n    readonly: boolean\n    /**\n     * Handler for the onChange event\n     */\n    onChange: (e: ChangeEvent<HTMLInputElement>) => void;\n};\n\nconst Input: FC<InputProps> = memo(({ placeholder, password = false, autoFocus = false, value, readonly, onChange }: InputProps) => {\n    return (\n        <input\n            disabled={readonly}\n            className='text-base form-input rounded-lg disabled:bg-slate-200 disabled:cursor-not-allowed transition-colors ease-in-out delay-150'\n            value={value}\n            type={password ? \"password\" : \"text\"}\n            autoFocus={autoFocus}\n            placeholder={placeholder}\n            onChange={onChange}\n        />\n    );\n})\nexport default Input;","import { AutoLinkPlugin, LinkMatcher } from \"@lexical/react/LexicalAutoLinkPlugin\";\n\nconst URL_MATCHER = /((https?:\\/\\/(www\\.)?)|(www\\.))[-a-zA-Z0-9@:%._+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-a-zA-Z0-9()@:%_+.~#?&//=]*)/;\n\nconst EMAIL_MATCHER = /(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))/;\n\nconst MATCHERS: LinkMatcher[] = [\n    (text) => {\n        const match = URL_MATCHER.exec(text);\n        return (\n            match && {\n                index: match.index,\n                length: match[0].length,\n                text: match[0],\n                url: match[0]\n            }\n        );\n    },\n    (text) => {\n        const match = EMAIL_MATCHER.exec(text);\n        return (\n            match && {\n                index: match.index,\n                length: match[0].length,\n                text: match[0],\n                url: `mailto:${match[0]}`\n            }\n        );\n    }\n];\n\nexport default function PlaygroundAutoLinkPlugin() {\n    return <AutoLinkPlugin matchers={MATCHERS} />;\n}\n","import { useLexicalComposerContext } from \"@lexical/react/LexicalComposerContext\";\nimport {\n    useCallback,\n    useEffect,\n    useMemo,\n    useRef,\n    useState,\n    ChangeEventHandler,\n    ChangeEvent,\n    MutableRefObject,\n    Dispatch,\n    SetStateAction,\n    createElement,\n    memo\n} from \"react\";\nimport {\n    CAN_REDO_COMMAND,\n    CAN_UNDO_COMMAND,\n    REDO_COMMAND,\n    UNDO_COMMAND,\n    SELECTION_CHANGE_COMMAND,\n    FORMAT_TEXT_COMMAND,\n    $getSelection,\n    $isRangeSelection,\n    $createParagraphNode,\n    $getNodeByKey,\n    LexicalEditor,\n    RangeSelection,\n    NodeSelection,\n    GridSelection\n} from \"lexical\";\nimport { $isLinkNode, TOGGLE_LINK_COMMAND } from \"@lexical/link\";\nimport {\n    $isParentElementRTL,\n    $wrapNodes,\n    $isAtNodeEnd\n} from \"@lexical/selection\";\nimport { $getNearestNodeOfType, mergeRegister } from \"@lexical/utils\";\nimport {\n    INSERT_ORDERED_LIST_COMMAND,\n    INSERT_UNORDERED_LIST_COMMAND,\n    REMOVE_LIST_COMMAND,\n    $isListNode,\n    ListNode\n} from \"@lexical/list\";\nimport { createPortal } from \"react-dom\";\nimport {\n    $createHeadingNode,\n    $createQuoteNode,\n    $isHeadingNode\n} from \"@lexical/rich-text\";\nimport {\n    $createCodeNode,\n    $isCodeNode,\n    getDefaultCodeLanguage,\n    getCodeLanguages\n} from \"@lexical/code\";\nimport { Bold, ChevronDown, Code, Heading1, Heading2, Heading4, Heading5, Italic, Link, List, ListOrdered, Quote, Redo, Strikethrough, Text, Underline, Undo } from \"lucide-react\";\nimport { Heading3 } from \"lucide-react\";\n\nconst LowPriority = 1;\n\nconst supportedBlockTypes = new Set([\n    \"paragraph\",\n    \"quote\",\n    \"code\",\n    \"h1\",\n    \"h2\",\n    \"ul\",\n    \"ol\"\n]);\n\ninterface BlockTypes {\n    code: string,\n    h1: string,\n    h2: string,\n    h3: string,\n    h4: string,\n    h5: string,\n    ol: string,\n    paragraph: string,\n    quote: string,\n    ul: string\n}\n\nconst blockTypeToBlockName: BlockTypes = {\n    code: \"Code Block\",\n    h1: \"Large Heading\",\n    h2: \"Small Heading\",\n    h3: \"Heading\",\n    h4: \"Heading\",\n    h5: \"Heading\",\n    ol: \"Numbered List\",\n    paragraph: \"Normal\",\n    quote: \"Quote\",\n    ul: \"Bulleted List\"\n} as const;\n\ntype BlockType = keyof typeof blockTypeToBlockName;\n\nconst Divider = memo(() => {\n    return <div className=\"divider\" />;\n})\n\nfunction positionEditorElement(editor: HTMLDivElement, rect: DOMRect | undefined) {\n    if (!rect) {\n        editor.style.opacity = \"0\";\n        editor.style.top = \"-1000px\";\n        editor.style.left = \"-1000px\";\n    } else {\n        editor.style.opacity = \"1\";\n        editor.style.top = `${rect.top + rect.height + window.pageYOffset + 10}px`;\n        editor.style.left = `${rect.left + window.pageXOffset - editor.offsetWidth / 2 + rect.width / 2\n            }px`;\n    }\n}\n\nconst FloatingLinkEditor = memo(({ editor }: { editor: LexicalEditor }) => {\n    const editorRef: MutableRefObject<HTMLDivElement | null> = useRef(null);\n    const inputRef: MutableRefObject<HTMLInputElement | null> = useRef(null);\n    const mouseDownRef = useRef(false);\n    const [linkUrl, setLinkUrl] = useState(\"\");\n    const [isEditMode, setEditMode] = useState(false);\n    const [lastSelection, setLastSelection] = useState<RangeSelection | GridSelection | NodeSelection | null>(null);\n\n    const updateLinkEditor = useCallback(() => {\n        const selection = $getSelection();\n        if ($isRangeSelection(selection)) {\n            const node = getSelectedNode(selection);\n            const parent = node.getParent();\n            if ($isLinkNode(parent)) {\n                setLinkUrl(parent.getURL());\n            } else if ($isLinkNode(node)) {\n                setLinkUrl(node.getURL());\n            } else {\n                setLinkUrl(\"\");\n            }\n        }\n        const editorElem = editorRef.current;\n        const nativeSelection = window.getSelection();\n        const activeElement = document.activeElement;\n\n        if (editorElem === null) {\n            return;\n        }\n\n        const rootElement = editor.getRootElement();\n        if (\n            selection !== null &&\n            !nativeSelection?.isCollapsed &&\n            rootElement !== null &&\n            rootElement.contains(nativeSelection?.anchorNode as (Node | null))\n        ) {\n            const domRange = nativeSelection?.getRangeAt(0);\n            let rect;\n            if (nativeSelection?.anchorNode === rootElement) {\n                let inner = rootElement;\n                while (inner.firstElementChild != null) {\n                    inner = inner.firstElementChild as HTMLElement;\n                }\n                rect = inner.getBoundingClientRect();\n            } else {\n                rect = domRange?.getBoundingClientRect();\n            }\n\n            if (!mouseDownRef.current) {\n                positionEditorElement(editorElem, rect);\n            }\n            setLastSelection(selection);\n        } else if (!activeElement || activeElement.className !== \"link-input\") {\n            positionEditorElement(editorElem, undefined);\n            setLastSelection(null);\n            setEditMode(false);\n            setLinkUrl(\"\");\n        }\n\n        return true;\n    }, [editor]);\n\n    useEffect(() => {\n        return mergeRegister(\n            editor.registerUpdateListener(({ editorState }) => {\n                editorState.read(() => {\n                    updateLinkEditor();\n                });\n            }),\n\n            editor.registerCommand(\n                SELECTION_CHANGE_COMMAND,\n                () => {\n                    updateLinkEditor();\n                    return true;\n                },\n                LowPriority\n            )\n        );\n    }, [editor, updateLinkEditor]);\n\n    useEffect(() => {\n        editor.getEditorState().read(() => {\n            updateLinkEditor();\n        });\n    }, [editor, updateLinkEditor]);\n\n    useEffect(() => {\n        if (isEditMode && inputRef.current) {\n            inputRef.current.focus();\n        }\n    }, [isEditMode]);\n\n    const safeLink = createElement(\"a\", { href: linkUrl, target: \"_blank\", rel: \"noopener noreferrer\" }, linkUrl);\n\n    return (\n        <div ref={editorRef} className=\"link-editor\">\n            {isEditMode ? (\n                <input\n                    ref={inputRef}\n                    className=\"link-input\"\n                    value={linkUrl}\n                    onChange={(event) => {\n                        setLinkUrl(event.target.value);\n                    }}\n                    onKeyDown={(event) => {\n                        if (event.key === \"Enter\") {\n                            event.preventDefault();\n                            if (lastSelection !== null) {\n                                if (linkUrl !== \"\") {\n                                    editor.dispatchCommand(TOGGLE_LINK_COMMAND, linkUrl);\n                                }\n                                setEditMode(false);\n                            }\n                        } else if (event.key === \"Escape\") {\n                            event.preventDefault();\n                            setEditMode(false);\n                        }\n                    }}\n                />\n            ) : (\n                <>\n                    <div className=\"link-input\">\n                        {safeLink}\n                        <div\n                            className=\"link-edit\"\n                            role=\"button\"\n                            tabIndex={0}\n                            onMouseDown={(event) => event.preventDefault()}\n                            onClick={() => {\n                                setEditMode(true);\n                            }}\n                        />\n                    </div>\n                </>\n            )}\n        </div>\n    );\n})\n\nconst Select = memo(({ onChange, className, options, value }: { onChange: ChangeEventHandler<HTMLSelectElement>, className: string, options: string[], value: string | ReadonlyArray<string> | number }) => {\n    return (\n        <select className={className} onChange={onChange} value={value}>\n            <option hidden={true} value=\"\" />\n            {options.map((option) => (\n                <option key={option} value={option}>\n                    {option}\n                </option>\n            ))}\n        </select>\n    );\n})\n\nfunction getSelectedNode(selection: RangeSelection | GridSelection) {\n    const anchor = selection.anchor;\n    const focus = selection.focus;\n    const anchorNode = selection.anchor.getNode();\n    const focusNode = selection.focus.getNode();\n    if (anchorNode === focusNode) {\n        return anchorNode;\n    }\n    const isBackward = selection.isBackward();\n    if (isBackward) {\n        return $isAtNodeEnd(focus) ? anchorNode : focusNode;\n    } else {\n        return $isAtNodeEnd(anchor) ? focusNode : anchorNode;\n    }\n}\n\nconst BlockOptionsDropdownList = memo(({\n    editor,\n    blockType,\n    toolbarRef,\n    setShowBlockOptionsDropDown\n}: { editor: LexicalEditor, blockType: BlockType, toolbarRef: MutableRefObject<HTMLDivElement | null>, setShowBlockOptionsDropDown: Dispatch<SetStateAction<boolean>> }) => {\n    const dropDownRef: MutableRefObject<HTMLDivElement | null> = useRef(null);\n\n    useEffect(() => {\n        const dropDown = dropDownRef.current;\n        const toolbar = toolbarRef.current;\n\n        if (dropDown !== null && toolbar !== null) {\n            const handle = (event: MouseEvent) => {\n                const target = event.target;\n\n                if (!dropDown.contains(target as Node) && !toolbar.contains(target as Node)) {\n                    setShowBlockOptionsDropDown(false);\n                }\n            };\n            document.addEventListener(\"click\", handle);\n\n            return () => {\n                document.removeEventListener(\"click\", handle);\n            };\n        }\n    }, [dropDownRef, setShowBlockOptionsDropDown, toolbarRef]);\n\n    const formatParagraph = () => {\n        if (blockType !== \"paragraph\") {\n            editor.update(() => {\n                const selection = $getSelection();\n\n                if ($isRangeSelection(selection)) {\n                    $wrapNodes(selection, () => $createParagraphNode());\n                }\n            });\n        }\n        setShowBlockOptionsDropDown(false);\n    };\n\n    const formatLargeHeading = () => {\n        if (blockType !== \"h1\") {\n            editor.update(() => {\n                const selection = $getSelection();\n\n                if ($isRangeSelection(selection)) {\n                    $wrapNodes(selection, () => $createHeadingNode(\"h1\"));\n                }\n            });\n        }\n        setShowBlockOptionsDropDown(false);\n    };\n\n    const formatSmallHeading = () => {\n        if (blockType !== \"h2\") {\n            editor.update(() => {\n                const selection = $getSelection();\n\n                if ($isRangeSelection(selection)) {\n                    $wrapNodes(selection, () => $createHeadingNode(\"h2\"));\n                }\n            });\n        }\n        setShowBlockOptionsDropDown(false);\n    };\n\n    const formatBulletList = () => {\n        if (blockType !== \"ul\") {\n            editor.dispatchCommand(INSERT_UNORDERED_LIST_COMMAND, undefined);\n        } else {\n            editor.dispatchCommand(REMOVE_LIST_COMMAND, undefined);\n        }\n        setShowBlockOptionsDropDown(false);\n    };\n\n    const formatNumberedList = () => {\n        if (blockType !== \"ol\") {\n            editor.dispatchCommand(INSERT_ORDERED_LIST_COMMAND, undefined);\n        } else {\n            editor.dispatchCommand(REMOVE_LIST_COMMAND, undefined);\n        }\n        setShowBlockOptionsDropDown(false);\n    };\n\n    const formatQuote = () => {\n        if (blockType !== \"quote\") {\n            editor.update(() => {\n                const selection = $getSelection();\n\n                if ($isRangeSelection(selection)) {\n                    $wrapNodes(selection, () => $createQuoteNode());\n                }\n            });\n        }\n        setShowBlockOptionsDropDown(false);\n    };\n\n    const formatCode = () => {\n        if (blockType !== \"code\") {\n            editor.update(() => {\n                const selection = $getSelection();\n\n                if ($isRangeSelection(selection)) {\n                    $wrapNodes(selection, () => $createCodeNode());\n                }\n            });\n        }\n        setShowBlockOptionsDropDown(false);\n    };\n\n    return (\n        <div className=\"dropdown\" ref={dropDownRef}>\n            <button className=\"item\" onClick={formatParagraph}>\n                <Text className=\"icon\" size={20} />\n                <span className=\"text\">Normal</span>\n                {blockType === \"paragraph\" && <span className=\"active\" />}\n            </button>\n            <button className=\"item\" onClick={formatLargeHeading}>\n                <Heading1 className=\"icon\" size={20} />\n                <span className=\"text\">Large Heading</span>\n                {blockType === \"h1\" && <span className=\"active\" />}\n            </button>\n            <button className=\"item\" onClick={formatSmallHeading}>\n                <Heading2 className=\"icon\" size={20} />\n                <span className=\"text\">Small Heading</span>\n                {blockType === \"h2\" && <span className=\"active\" />}\n            </button>\n            <button className=\"item\" onClick={formatBulletList}>\n                <List className=\"icon\" size={20} />\n                <span className=\"text\">Bullet List</span>\n                {blockType === \"ul\" && <span className=\"active\" />}\n            </button>\n            <button className=\"item\" onClick={formatNumberedList}>\n                <ListOrdered className=\"icon\" size={20} />\n                <span className=\"text\">Numbered List</span>\n                {blockType === \"ol\" && <span className=\"active\" />}\n            </button>\n            <button className=\"item\" onClick={formatQuote}>\n                <Quote className=\"icon\" size={20} />\n                <span className=\"text\">Quote</span>\n                {blockType === \"quote\" && <span className=\"active\" />}\n            </button>\n            <button className=\"item\" onClick={formatCode}>\n                <Code className=\"icon\" size={20} />\n                <span className=\"text\">Code Block</span>\n                {blockType === \"code\" && <span className=\"active\" />}\n            </button>\n        </div>\n    );\n})\n\nconst ToolbarPlugin = memo(() => {\n    const [editor] = useLexicalComposerContext();\n    const toolbarRef = useRef(null);\n    const [canUndo, setCanUndo] = useState(false);\n    const [canRedo, setCanRedo] = useState(false);\n    const [blockType, setBlockType] = useState<BlockType>(\"paragraph\");\n    const [selectedElementKey, setSelectedElementKey] = useState(null);\n    const [showBlockOptionsDropDown, setShowBlockOptionsDropDown] = useState(\n        false\n    );\n    const [codeLanguage, setCodeLanguage] = useState(\"\");\n    const [_isRTL, setIsRTL] = useState(false);\n    const [isLink, setIsLink] = useState(false);\n    const [isBold, setIsBold] = useState(false);\n    const [isItalic, setIsItalic] = useState(false);\n    const [isUnderline, setIsUnderline] = useState(false);\n    const [isStrikethrough, setIsStrikethrough] = useState(false);\n    const [isCode, setIsCode] = useState(false);\n\n    const updateToolbar = useCallback(() => {\n        const selection = $getSelection();\n        if ($isRangeSelection(selection)) {\n            const anchorNode = selection.anchor.getNode();\n            const element =\n                anchorNode.getKey() === \"root\"\n                    ? anchorNode\n                    : anchorNode.getTopLevelElementOrThrow();\n            const elementKey = element.getKey();\n            const elementDOM = editor.getElementByKey(elementKey);\n            if (elementDOM !== null) {\n                setSelectedElementKey(elementKey);\n                if ($isListNode(element)) {\n                    const parentList = $getNearestNodeOfType(anchorNode, ListNode);\n                    const type = parentList ? parentList.getTag() : element.getTag();\n                    setBlockType(type);\n                } else {\n                    const type = $isHeadingNode(element)\n                        ? element.getTag()\n                        : element.getType();\n                    setBlockType(type);\n                    if ($isCodeNode(element)) {\n                        setCodeLanguage(element.getLanguage() || getDefaultCodeLanguage());\n                    }\n                }\n            }\n            // Update text format\n            setIsBold(selection.hasFormat(\"bold\"));\n            setIsItalic(selection.hasFormat(\"italic\"));\n            setIsUnderline(selection.hasFormat(\"underline\"));\n            setIsStrikethrough(selection.hasFormat(\"strikethrough\"));\n            setIsCode(selection.hasFormat(\"code\"));\n            setIsRTL($isParentElementRTL(selection));\n\n            // Update links\n            const node = getSelectedNode(selection);\n            const parent = node.getParent();\n            if ($isLinkNode(parent) || $isLinkNode(node)) {\n                setIsLink(true);\n            } else {\n                setIsLink(false);\n            }\n        }\n    }, [editor]);\n\n    useEffect(() => {\n        return mergeRegister(\n            editor.registerUpdateListener(({ editorState }) => {\n                editorState.read(() => {\n                    updateToolbar();\n                });\n            }),\n            editor.registerCommand(\n                SELECTION_CHANGE_COMMAND,\n                (_payload, _newEditor) => {\n                    updateToolbar();\n                    return false;\n                },\n                LowPriority\n            ),\n            editor.registerCommand(\n                CAN_UNDO_COMMAND,\n                (payload) => {\n                    setCanUndo(payload);\n                    return false;\n                },\n                LowPriority\n            ),\n            editor.registerCommand(\n                CAN_REDO_COMMAND,\n                (payload) => {\n                    setCanRedo(payload);\n                    return false;\n                },\n                LowPriority\n            )\n        );\n    }, [editor, updateToolbar]);\n\n    const codeLanguges = useMemo(() => getCodeLanguages(), []);\n    const onCodeLanguageSelect = useCallback(\n        (e: ChangeEvent<HTMLSelectElement>) => {\n            editor.update(() => {\n                if (selectedElementKey !== null) {\n                    const node = $getNodeByKey(selectedElementKey);\n                    if ($isCodeNode(node)) {\n                        node.setLanguage(e.target.value);\n                    }\n                }\n            });\n        },\n        [editor, selectedElementKey]\n    );\n\n    const insertLink = useCallback(() => {\n        if (!isLink) {\n            editor.dispatchCommand(TOGGLE_LINK_COMMAND, \"https://\");\n        } else {\n            editor.dispatchCommand(TOGGLE_LINK_COMMAND, null);\n        }\n    }, [editor, isLink]);\n\n    const [portalContainer, setPortalContainer] = useState<HTMLDivElement | null>(null);\n    useEffect(() => {\n        const container = document.getElementsByClassName(\"editor-container\")[0];\n        const portalContainer = document.createElement('div');\n        container.prepend(portalContainer)\n        setPortalContainer(portalContainer)\n        return () => {\n            container.removeChild(portalContainer)\n        }\n    }, [])\n\n    return (\n        <div className=\"toolbar\" ref={toolbarRef}>\n            <button\n                disabled={!canUndo}\n                onClick={() => {\n                    editor.dispatchCommand(UNDO_COMMAND, undefined);\n                }}\n                className=\"toolbar-item spaced\"\n                aria-label=\"Undo\"\n            >\n                <Undo className=\"format\" size={20} />\n            </button>\n            <button\n                disabled={!canRedo}\n                onClick={() => {\n                    editor.dispatchCommand(REDO_COMMAND, undefined);\n                }}\n                className=\"toolbar-item\"\n                aria-label=\"Redo\"\n            >\n                <Redo className=\"format\" size={20} />\n            </button>\n            <Divider />\n            {supportedBlockTypes.has(blockType) && (\n                <>\n                    <button\n                        className=\"toolbar-item block-controls\"\n                        onClick={() =>\n                            setShowBlockOptionsDropDown(!showBlockOptionsDropDown)\n                        }\n                        aria-label=\"Formatting Options\"\n                    >\n                        {\n                            blockType === \"h1\" ?\n                                <Heading1 className=\"icon\" size={20} /> :\n                                blockType === \"h2\" ?\n                                    <Heading2 className=\"icon\" size={20} /> :\n                                    blockType === \"h3\" ?\n                                        <Heading3 className=\"icon\" size={20} /> :\n                                        blockType === \"h4\" ?\n                                            <Heading4 className=\"icon\" size={20} /> :\n                                            blockType === \"h5\" ?\n                                                <Heading5 className=\"icon\" size={20} /> :\n                                                blockType === \"code\" ?\n                                                    <Code className=\"icon\" size={20} /> :\n                                                    blockType === \"paragraph\" ?\n                                                        <Text className=\"icon\" size={20} /> :\n                                                        blockType === \"ol\" ?\n                                                            <ListOrdered className=\"icon\" size={20} /> :\n                                                            blockType === \"ul\" ?\n                                                                <List className=\"icon\" size={20} /> :\n                                                                blockType === \"quote\" ?\n                                                                    <Quote className=\"icon\" size={20} /> :\n                                                                    <></>\n                        }\n                        <span className=\"text\">{blockTypeToBlockName[blockType]}</span>\n                        <ChevronDown size={20} />\n                    </button>\n                    {showBlockOptionsDropDown &&\n                        createPortal(\n                            <BlockOptionsDropdownList\n                                editor={editor}\n                                blockType={blockType}\n                                toolbarRef={toolbarRef}\n                                setShowBlockOptionsDropDown={setShowBlockOptionsDropDown}\n                            />,\n                            portalContainer!!\n                        )}\n                    <Divider />\n                </>\n            )}\n            {blockType === \"code\" ? (\n                <>\n                    <Select\n                        className=\"toolbar-item code-language\"\n                        onChange={onCodeLanguageSelect}\n                        options={codeLanguges}\n                        value={codeLanguage}\n                    />\n                    <i className=\"chevron-down inside\" />\n                </>\n            ) : (\n                <>\n                    <button\n                        onClick={() => {\n                            editor.dispatchCommand(FORMAT_TEXT_COMMAND, \"bold\");\n                        }}\n                        className={\"toolbar-item spaced \" + (isBold ? \"active\" : \"\")}\n                        aria-label=\"Format Bold\"\n                    >\n                        <Bold className=\"format\" size={20} />\n                    </button>\n                    <button\n                        onClick={() => {\n                            editor.dispatchCommand(FORMAT_TEXT_COMMAND, \"italic\");\n                        }}\n                        className={\"toolbar-item spaced \" + (isItalic ? \"active\" : \"\")}\n                        aria-label=\"Format Italics\"\n                    >\n                        <Italic className=\"format\" size={20} />\n                    </button>\n                    <button\n                        onClick={() => {\n                            editor.dispatchCommand(FORMAT_TEXT_COMMAND, \"underline\");\n                        }}\n                        className={\"toolbar-item spaced \" + (isUnderline ? \"active\" : \"\")}\n                        aria-label=\"Format Underline\"\n                    >\n                        <Underline className=\"format\" size={20} />\n                    </button>\n                    <button\n                        onClick={() => {\n                            editor.dispatchCommand(FORMAT_TEXT_COMMAND, \"strikethrough\");\n                        }}\n                        className={\n                            \"toolbar-item spaced \" + (isStrikethrough ? \"active\" : \"\")\n                        }\n                        aria-label=\"Format Strikethrough\"\n                    >\n                        <Strikethrough className=\"format\" size={20} />\n                    </button>\n                    <button\n                        onClick={() => {\n                            editor.dispatchCommand(FORMAT_TEXT_COMMAND, \"code\");\n                        }}\n                        className={\"toolbar-item spaced \" + (isCode ? \"active\" : \"\")}\n                        aria-label=\"Insert Code\"\n                    >\n                        <Code className=\"format\" size={20} />\n                    </button>\n                    <button\n                        onClick={insertLink}\n                        className={\"toolbar-item spaced \" + (isLink ? \"active\" : \"\")}\n                        aria-label=\"Insert Link\"\n                    >\n                        <Link className=\"format\" size={20} />\n                    </button>\n                    {isLink &&\n                        createPortal(<FloatingLinkEditor editor={editor} />, document.body)}\n                    {\" \"}\n                </>\n            )}\n        </div>\n    );\n})\n\nexport default ToolbarPlugin;","import { registerCodeHighlighting } from \"@lexical/code\";\nimport { useLexicalComposerContext } from \"@lexical/react/LexicalComposerContext\";\nimport { useEffect } from \"react\";\n\nexport default function CodeHighlightPlugin() {\n    const [editor] = useLexicalComposerContext();\n    useEffect(() => {\n        return registerCodeHighlighting(editor);\n    }, [editor]);\n    return null;\n}\n","const editorTheme = {\n    ltr: \"ltr\",\n    rtl: \"rtl\",\n    placeholder: \"editor-placeholder\",\n    paragraph: \"editor-paragraph\",\n    quote: \"editor-quote\",\n    heading: {\n        h1: \"editor-heading-h1\",\n        h2: \"editor-heading-h2\",\n        h3: \"editor-heading-h3\",\n        h4: \"editor-heading-h4\",\n        h5: \"editor-heading-h5\"\n    },\n    list: {\n        nested: {\n            listitem: \"editor-nested-listitem\"\n        },\n        ol: \"editor-list-ol\",\n        ul: \"editor-list-ul\",\n        listitem: \"editor-listitem\"\n    },\n    image: \"editor-image\",\n    link: \"editor-link\",\n    text: {\n        bold: \"editor-text-bold\",\n        italic: \"editor-text-italic\",\n        overflowed: \"editor-text-overflowed\",\n        hashtag: \"editor-text-hashtag\",\n        underline: \"editor-text-underline\",\n        strikethrough: \"editor-text-strikethrough\",\n        underlineStrikethrough: \"editor-text-underlineStrikethrough\",\n        code: \"editor-text-code\"\n    },\n    code: \"editor-code\",\n    codeHighlight: {\n        atrule: \"editor-tokenAttr\",\n        attr: \"editor-tokenAttr\",\n        boolean: \"editor-tokenProperty\",\n        builtin: \"editor-tokenSelector\",\n        cdata: \"editor-tokenComment\",\n        char: \"editor-tokenSelector\",\n        class: \"editor-tokenFunction\",\n        \"class-name\": \"editor-tokenFunction\",\n        comment: \"editor-tokenComment\",\n        constant: \"editor-tokenProperty\",\n        deleted: \"editor-tokenProperty\",\n        doctype: \"editor-tokenComment\",\n        entity: \"editor-tokenOperator\",\n        function: \"editor-tokenFunction\",\n        important: \"editor-tokenVariable\",\n        inserted: \"editor-tokenSelector\",\n        keyword: \"editor-tokenAttr\",\n        namespace: \"editor-tokenVariable\",\n        number: \"editor-tokenProperty\",\n        operator: \"editor-tokenOperator\",\n        prolog: \"editor-tokenComment\",\n        property: \"editor-tokenProperty\",\n        punctuation: \"editor-tokenPunctuation\",\n        regex: \"editor-tokenVariable\",\n        selector: \"editor-tokenSelector\",\n        string: \"editor-tokenSelector\",\n        symbol: \"editor-tokenProperty\",\n        tag: \"editor-tokenProperty\",\n        url: \"editor-tokenOperator\",\n        variable: \"editor-tokenVariable\"\n    }\n};\n\nexport default editorTheme;\n","import { EditorState, LexicalEditor } from 'lexical';\n\nimport { InitialConfigType, LexicalComposer } from '@lexical/react/LexicalComposer';\nimport { RichTextPlugin } from '@lexical/react/LexicalRichTextPlugin';\nimport { ContentEditable } from '@lexical/react/LexicalContentEditable';\nimport { HistoryPlugin } from '@lexical/react/LexicalHistoryPlugin';\nimport { OnChangePlugin } from '@lexical/react/LexicalOnChangePlugin';\nimport LexicalErrorBoundary from '@lexical/react/LexicalErrorBoundary';\nimport { LinkPlugin } from '@lexical/react/LexicalLinkPlugin';\nimport { HeadingNode, QuoteNode } from \"@lexical/rich-text\";\nimport { TableCellNode, TableNode, TableRowNode } from \"@lexical/table\";\nimport { ListItemNode, ListNode } from \"@lexical/list\";\nimport { CodeHighlightNode, CodeNode } from \"@lexical/code\";\nimport { AutoLinkNode, LinkNode } from \"@lexical/link\";\nimport { MarkdownShortcutPlugin } from \"@lexical/react/LexicalMarkdownShortcutPlugin\";\nimport { TRANSFORMERS } from \"@lexical/markdown\";\n\nimport AutoLinkPlugin from \"./plugins/AutoLinkPlugin\";\nimport ToolbarPlugin from \"./plugins/ToolbarPlugin\";\nimport CodeHighlightPlugin from './plugins/CodeHighlightPlugin';\nimport EditorTheme from './theme';\n\nimport './input.scss';\nimport { FC, memo } from 'react';\n\ntype ChatInputProps = {\n    /**\n     * The Namespace\n     */\n    namespace: string\n    /**\n     * Handler for the onChange event\n     */\n    onChange: (editorState: EditorState, editor: LexicalEditor, tags: Set<string>) => void;\n    /**\n     * Handler for the onError event\n     */\n    onError: (error: Error, editor: LexicalEditor) => void;\n};\n\nfunction Placeholder() {\n    return <div className=\"editor-placeholder\" id=\"editor-placeholder\">Enter message...</div>;\n}\n\nconst ChatInput: FC<ChatInputProps> = memo(({ namespace, onChange, onError }: ChatInputProps) => {\n    const initialConfig: InitialConfigType = {\n        namespace: namespace,\n        theme: EditorTheme,\n        onError,\n        nodes: [\n            HeadingNode,\n            ListNode,\n            ListItemNode,\n            QuoteNode,\n            CodeNode,\n            CodeHighlightNode,\n            TableNode,\n            TableCellNode,\n            TableRowNode,\n            AutoLinkNode,\n            LinkNode\n        ]\n    }\n    return (\n        <LexicalComposer initialConfig={initialConfig}>\n            <div className=\"editor-container flex-1\">\n                <ToolbarPlugin />\n                <div className=\"editor-inner\">\n                    <RichTextPlugin\n                        contentEditable={<ContentEditable className=\"editor-input\" ariaLabelledBy='editor-placeholder' />}\n                        placeholder={<Placeholder />}\n                        ErrorBoundary={LexicalErrorBoundary}\n                    />\n                    <OnChangePlugin onChange={onChange} />\n                    <HistoryPlugin />\n                    <LinkPlugin />\n                    <CodeHighlightPlugin />\n                    <AutoLinkPlugin />\n                    <MarkdownShortcutPlugin transformers={TRANSFORMERS} />\n                </div>\n            </div>\n        </LexicalComposer>\n    );\n})\n\nexport default ChatInput;","export interface ILoginFlow {\n    type: string;\n}\nexport interface ILoginFlows {\n    flows: ILoginFlow[];\n}\n\nexport interface IErrorResp {\n    errcode: string;\n    error?: string;\n}\n\nexport interface IRateLimitError extends IErrorResp {\n    retry_after_ms: number;\n}\n\nexport interface ILoginResponse {\n    access_token: string;\n    device_id: string;\n    home_server?: string;\n    user_id: string;\n    expires_in_ms?: number;\n    refresh_token?: string;\n    well_known?: IWellKnown\n}\n\nexport interface ILoginParams {\n    address?: string;\n    device_id?: string;\n    identifier?: {\n        type: \"m.id.user\" | \"m.id.thirdparty\" | \"m.id.phone\";\n        user?: string;\n        medium?: string;\n        address?: string;\n        country?: string;\n        phone?: string;\n    };\n    initial_device_display_name?: string;\n    password?: string;\n    user?: string;\n    refresh_token?: string;\n    token?: string;\n    type: \"m.login.password\" | \"m.login.token\";\n}\n\nexport interface IWellKnown {\n    \"m.homeserver\": {\n        base_url: string;\n    }\n    \"m.identity_server\"?: {\n        base_url: string;\n    }\n    \"org.matrix.msc3575.proxy\"?: {\n        url: string;\n    }\n}\n\nexport interface IAccountData {\n    events?: any[];\n}\n\nexport interface IClientEventWithoutRoomId {\n    content: any;\n    event_id: string;\n    origin_server_ts: number;\n    sender: string;\n    // FIXME: Is this really meant to be optional?\n    state_key?: string;\n    type: string;\n    unsigned?: {\n        age?: number;\n        prev_content?: any;\n        redacted_because?: IClientEventWithoutRoomId;\n        transaction_id?: string;\n    }\n}\n\nexport interface ITimeline {\n    events: IClientEventWithoutRoomId[];\n    limited: boolean;\n    prev_batch: string;\n}\n\nexport interface IProfileInfo {\n    avatar_url?: string;\n    displayname?: string;\n}\n\n// Old sync\nexport interface ISyncResponse {\n    account_data?: IAccountData;\n    device_lists?: {\n        changed?: string[];\n        left?: string[];\n    };\n    device_one_time_keys_count?: {\n        [key: string]: number;\n    };\n    next_batch: string;\n    presence?: {\n        events?: any[];\n    };\n    rooms?: {\n        invite?: {\n            [key: string]: {\n                invite_state?: {\n                    events?: {\n                        content: any;\n                        sender: string;\n                        state_key: string;\n                        type: string;\n                        // Future proofing\n                        [key: string]: any;\n                    }[];\n                };\n            };\n        };\n        join?: {\n            [key: string]: {\n                account_data?: IAccountData;\n                ephemeral?: {\n                    events?: any[];\n                };\n                state?: {\n                    events: IClientEventWithoutRoomId[];\n                }\n                summary?: {\n                    \"m.heroes\": string[];\n                    \"m.joined_member_count\": number;\n                    \"m.invited_member_count\": number;\n                };\n                timeline?: ITimeline;\n                unread_notifications?: {\n                    highlight_count: number;\n                    notification_count: number;\n                };\n                unread_thread_notifications?: {\n                    [key: string]: {\n                        highlight_count: number;\n                        notification_count: number;\n                    };\n                };\n            };\n        };\n        leave?: {\n            [key: string]: {\n                state?: {\n                    events: IClientEventWithoutRoomId[];\n                };\n                account_data?: IAccountData;\n                timeline?: ITimeline;\n            };\n        };\n        knock?: {\n            [key: string]: {\n                knock_state?: {\n                    events?: {\n                        content: any;\n                        sender: string;\n                        state_key: string;\n                        type: string;\n                    }[];\n                };\n            };\n        };\n    };\n    to_device?: {\n        events?: any[];\n    };\n}\n\n// Sliding sync\nexport interface ISlidingSyncResp {\n    lists?: {\n        [key: string]: List;\n    };\n    rooms?: {\n        [key: string]: RoomJson;\n    };\n    extensions?: Extensions;\n    pos: string;\n    txn_id: string;\n}\n\nexport interface Extensions {\n    e2ee?: E2EEExtension;\n    to_device?: ToDeviceExtension;\n}\n\nexport interface E2EEExtension {\n    device_one_time_keys_count?: {\n        [key: string]: number;\n    };\n    device_lists?: {\n        changed?: string[];\n        left?: string[];\n    };\n    device_unused_fallback_key_types?: string[];\n}\n\nexport interface ToDeviceExtension {\n    next_batch: string;\n    events?: any[];\n}\n\nexport interface List {\n    ops?: (SYNC_OP | INSERT_OP | INVALIDATE_OP | DELETE_OP)[];\n    count: number;\n}\n\nexport function isSyncOp(op: any): op is SYNC_OP {\n    return op.op === \"SYNC\";\n}\n\nexport function isInsertOp(op: any): op is INSERT_OP {\n    return op.op === \"INSERT\";\n}\n\nexport function isInvalidateOp(op: any): op is INVALIDATE_OP {\n    return op.op === \"INVALIDATE\";\n}\n\nexport function isDeleteOp(op: any): op is DELETE_OP {\n    return op.op === \"DELETE\";\n}\n\nexport interface DELETE_OP {\n    op: string;\n    index: number;\n}\n\nexport interface INVALIDATE_OP {\n    op: string;\n    range: number[];\n}\n\nexport interface INSERT_OP {\n    op: string;\n    index: number;\n    room_id: string;\n}\n\nexport interface SYNC_OP {\n    op: string;\n    range: number[];\n    room_ids: string[];\n}\n\nexport interface RoomJson {\n    name?: string,\n    // List of events\n    timeline?: IRoomEvent[],\n    required_state?: IRoomStateEvent[],\n    notification_count: number,\n    highlight_count: number,\n    initial: boolean,\n    joined_count: number,\n    invited_count: number,\n    prev_batch: string,\n    is_dm?: boolean,\n}\n\nexport interface IRoomEvent<Content = any> {\n    content: Content;\n    event_id: string;\n    origin_server_ts: number;\n    sender: string;\n    type: string;\n    unsigned?: any;\n    [key: string]: any;\n}\n\nexport interface IRoomMessageContent<MsgType = any> {\n    body: string;\n    msgtype: MsgType;\n}\n\nexport interface IRoomMessageTextContent extends IRoomMessageContent<\"m.text\"> {\n    format?: string;\n    formatted_body?: string;\n}\n\nexport interface IRoomMessageEvent<Content = any> extends IRoomEvent<Content> { }\n\nexport interface IRoomMessageTextEvent extends IRoomMessageEvent<IRoomMessageTextContent> { }\n\nexport function isRoomMessageTextEvent(event: IRoomEvent): event is IRoomMessageTextEvent {\n    return event.type === \"m.room.message\" && event.content.msgtype === \"m.text\";\n}\n\nexport function isRoomMessageEvent(event: IRoomEvent): event is IRoomMessageEvent {\n    return event.type === \"m.room.message\";\n}\n\nexport interface IRoomStateEvent<Content = any> extends IRoomEvent<Content> {\n    state_key: string;\n}\n\nexport function isRoomStateEvent(event: IRoomEvent): event is IRoomStateEvent {\n    return event.state_key !== undefined;\n}\n\nexport interface IRoomMemberContent {\n    avatar_url?: string;\n    displayname?: string;\n    membership: \"invite\" | \"join\" | \"knock\" | \"leave\" | \"ban\";\n    is_direct?: boolean;\n}\n\nexport interface IRoomMemberEvent extends IRoomStateEvent<IRoomMemberContent> { }\n\nexport function isRoomMemberEvent(event: IRoomEvent): event is IRoomMemberEvent {\n    return event.type === \"m.room.member\";\n}\n\nexport interface IRoomCreateContent {\n    creator: string;\n    \"m.federate\"?: boolean;\n    predecessor?: {\n        room_id: string;\n        event_id: string;\n    };\n    room_version?: string;\n    type?: string;\n}\n\nexport interface IRoomCreateEvent extends IRoomStateEvent<IRoomCreateContent> { }\n\nexport function isRoomCreateEvent(event: IRoomEvent): event is IRoomCreateEvent {\n    return event.type === \"m.room.create\";\n}\n\nexport interface IThumbnailInfo {\n    h: number;\n    mimetype: string;\n    size: number;\n    w: number;\n}\n\nexport interface IImageInfo {\n    h: number;\n    mimetype: string;\n    size: number;\n    thumbnail_info?: IThumbnailInfo;\n    thumbnail_url?: string;\n    w: number;\n}\n\nexport interface IRoomAvatarContent {\n    info: IImageInfo;\n    url?: string;\n}\n\nexport interface IRoomAvatarEvent extends IRoomStateEvent<IRoomAvatarContent> { }\n\nexport function isRoomAvatarEvent(event: IRoomEvent): event is IRoomAvatarEvent {\n    return event.type === \"m.room.avatar\";\n}\n\nexport interface ISpaceChildContent {\n    via: string[];\n    order?: string;\n    suggested?: boolean;\n}\n\nexport interface ISpaceChildEvent extends IRoomStateEvent<ISpaceChildContent> { }\n\nexport function isSpaceChildEvent(event: IRoomEvent): event is ISpaceChildEvent {\n    return event.type === \"m.space.child\";\n}\n\nexport interface ISpaceParentContent {\n    via: string[];\n    canonical?: boolean;\n}\n\nexport interface ISpaceParentEvent extends IRoomStateEvent<ISpaceParentContent> { }\n\nexport function isSpaceParentEvent(event: IRoomEvent): event is ISpaceParentEvent {\n    return event.type === \"m.space.parent\";\n}\n\nexport interface IRoomTopicContent {\n    topic: string;\n}\n\nexport interface IRoomTopicEvent extends IRoomStateEvent<IRoomTopicContent> { }\n\nexport function isRoomTopicEvent(event: IRoomEvent): event is IRoomTopicEvent {\n    return event.type === \"m.room.topic\";\n}\n","import { IRoomEvent, IRoomStateEvent, isRoomAvatarEvent, isRoomCreateEvent, isRoomTopicEvent, isSpaceChildEvent, isSpaceParentEvent } from \"./api/apiTypes\";\n\nexport class Room {\n    private events: IRoomEvent[] = [];\n    private stateEvents: IRoomStateEvent[] = [];\n    private name?: string;\n\n    private notification_count: number = 0;\n    private notification_highlight_count: number = 0;\n    private joined_count: number = 0;\n    private invited_count: number = 0;\n    private is_dm: boolean = false;\n\n    public windowPos: {\n        [list: string]: number\n    } = {}\n\n\n    constructor(public roomID: string, private hostname: string) { }\n\n    public addEvents(events: IRoomEvent[]) {\n        // if the event id is already known then we update the event instead of pushing it on to the Array\n        events.forEach((newEvent) => {\n            const index = this.events.findIndex((oldEvent) => oldEvent.event_id === newEvent.event_id);\n            if (index !== -1) {\n                this.events[index] = newEvent;\n            } else {\n                this.events.push(newEvent);\n            }\n        });\n    }\n\n    public addStateEvents(state: IRoomStateEvent[]) {\n        // if the state event id is already known then we update the event instead of pushing it on to the Array\n        state.forEach((newEvent) => {\n            const index = this.stateEvents.findIndex((oldEvent) => oldEvent.event_id === newEvent.event_id);\n            if (index !== -1) {\n                this.stateEvents[index] = newEvent;\n            } else {\n                this.stateEvents.push(newEvent);\n            }\n        });\n    }\n\n    public getStateEvents(): IRoomStateEvent[] {\n        return this.stateEvents;\n    }\n\n    public getAvatarURL(): string | undefined {\n        let avatarURL: string | undefined = undefined;\n        this.stateEvents.forEach((event) => {\n            if (isRoomAvatarEvent(event)) {\n                const rawAvatarURL = event.content.url;\n                if (rawAvatarURL?.startsWith(\"mxc://\")) {\n                    avatarURL = `${this.hostname}/_matrix/media/r0/download/${rawAvatarURL.substring(6)}`;\n                }\n            }\n        });\n        return avatarURL;\n    }\n\n    public isSpace(): boolean {\n        let isSpace: boolean = false;\n        this.stateEvents.forEach((event) => {\n            if (isRoomCreateEvent(event)) {\n                isSpace = event.content.type === \"m.space\";\n            }\n        });\n        return isSpace;\n    }\n\n    public setName(name: string) {\n        this.name = name;\n    }\n\n    public getName(): string {\n        if (!this.name) {\n            return this.roomID;\n        }\n        return this.name;\n    }\n\n    public getTopic(): string | undefined {\n        let topic: string | undefined = undefined;\n        this.stateEvents.forEach((event) => {\n            if (isRoomTopicEvent(event)) {\n                topic = event.content.topic;\n            }\n        });\n        return topic;\n    }\n\n    public setNotificationCount(count: number) {\n        this.notification_count = count;\n    }\n\n    public getNotificationCount(): number {\n        return this.notification_count;\n    }\n\n    public setNotificationHighlightCount(count: number) {\n        this.notification_highlight_count = count;\n    }\n\n    public getNotificationHighlightCount(): number {\n        return this.notification_highlight_count;\n    }\n\n    public setJoinedCount(count: number) {\n        this.joined_count = count;\n    }\n\n    public getJoinedCount(): number {\n        return this.joined_count;\n    }\n\n    public setInvitedCount(count: number) {\n        this.invited_count = count;\n    }\n\n    public getInvitedCount(): number {\n        return this.invited_count;\n    }\n\n    public getSpaceChildrenIDs(): string[] {\n        const children: string[] = [];\n        this.stateEvents.forEach((event) => {\n            if (isSpaceChildEvent(event)) {\n                children.push(event.state_key);\n            }\n        });\n        return children;\n    }\n\n    public getSpaceParentIDs(): { roomID: string, canonical: boolean }[] {\n        const parents: { roomID: string, canonical: boolean }[] = [];\n        this.stateEvents.forEach((event) => {\n            if (isSpaceParentEvent(event)) {\n                parents.push({ roomID: event.state_key, canonical: event.content.canonical || false });\n            }\n        });\n        return parents;\n    }\n\n    public setDM(isDM: boolean) {\n        this.is_dm = isDM;\n    }\n\n    public isDM(): boolean {\n        return this.is_dm;\n    }\n\n    public isOnline(): boolean {\n        // TODO: Implement this\n        return false;\n    }\n\n    public getEvents(): IRoomEvent[] {\n        return this.events;\n    }\n\n    public getMemberName(userID: string): string {\n        let name: string = userID;\n        this.stateEvents.forEach((event) => {\n            if (event.type === \"m.room.member\") {\n                if (event.state_key === userID && event.content.membership == \"join\") {\n                    name = event.content.displayname;\n                }\n            }\n        });\n        return name;\n    }\n\n    public getMemberAvatar(userID: string): string | undefined {\n        let avatarURL: string | undefined = undefined;\n        this.stateEvents.forEach((event) => {\n            if (event.type === \"m.room.member\") {\n                if (event.state_key === userID && event.content.membership == \"join\") {\n                    const rawAvatarURL = event.content.avatar_url;\n                    if (rawAvatarURL?.startsWith(\"mxc://\")) {\n                        avatarURL = `${this.hostname}/_matrix/media/r0/download/${rawAvatarURL.substring(6)}`;\n                    }\n                }\n            }\n        });\n        return avatarURL;\n    }\n\n    public isEncrypted(): boolean {\n        let isEncrypted: boolean = false;\n        this.stateEvents.forEach((event) => {\n            if (event.type === \"m.room.encryption\" && event.content.algorithm === \"m.megolm.v1.aes-sha2\" && event.state_key === \"\") {\n                isEncrypted = true;\n            }\n        });\n        return isEncrypted;\n    }\n}","import {\n    createContext,\n    useContext,\n    useEffect,\n    useState\n} from \"react\";\nimport {\n    IErrorResp,\n    ILoginFlows,\n    ILoginResponse,\n    IProfileInfo,\n    IRateLimitError,\n    IRoomEvent,\n    IRoomStateEvent,\n    ISlidingSyncResp,\n    IWellKnown,\n    isDeleteOp,\n    isInsertOp,\n    isInvalidateOp,\n    isRoomStateEvent,\n    isSyncOp\n} from \"./api/apiTypes\";\nimport { Room } from \"./room\";\nimport EventEmitter from \"events\";\nimport {\n    DBSchema,\n    IDBPDatabase,\n    openDB\n} from \"idb\";\nimport { DeviceId, DeviceLists, KeysBackupRequest, KeysUploadRequest, OlmMachine, RequestType, RoomMessageRequest, SignatureUploadRequest, UserId } from \"@matrix-org/matrix-sdk-crypto-js\";\nimport { KeysQueryRequest } from \"@matrix-org/matrix-sdk-crypto-js\";\nimport { KeysClaimRequest } from \"@matrix-org/matrix-sdk-crypto-js\";\nimport { ToDeviceRequest } from \"@matrix-org/matrix-sdk-crypto-js\";\n\nexport interface MatrixClientEvents {\n    // Used to notify about changes to the room list\n    'rooms': (rooms: Set<Room>) => void;\n    //'delete': (changedCount: number) => void;\n}\n\nexport declare interface MatrixClient {\n    on<U extends keyof MatrixClientEvents>(\n        event: U, listener: MatrixClientEvents[U]\n    ): this;\n\n    emit<U extends keyof MatrixClientEvents>(\n        event: U, ...args: Parameters<MatrixClientEvents[U]>\n    ): boolean;\n}\n\ninterface MatrixDB extends DBSchema {\n    rooms: {\n        // Same as roomToRoom map\n        key: string;\n        value: {\n            windowPos: {\n                [list: string]: number;\n            };\n            roomID: string;\n            name: string;\n            notification_count: number;\n            highlight_count: number;\n            joined_count: number;\n            invited_count: number;\n            events?: IRoomEvent[];\n            stateEvents?: IRoomStateEvent[];\n            avatarUrl?: string;\n            isSpace: boolean;\n            isDM?: boolean;\n        };\n    };\n    loginInfo: {\n        // login info\n        value: {\n            userId: string;\n            device_id?: string;\n            hostname?: string;\n            slidingSyncHostname?: string;\n            access_token?: string;\n            displayName?: string;\n            avatarUrl?: string;\n        };\n        // User ID\n        key: string;\n    };\n    syncInfo: {\n        // sync info\n        value: {\n            userId: string;\n            syncPos?: string;\n            initialSync: boolean;\n            lastRanges?: { [key: string]: number[][] }; // [start, end]\n            lastTxnID?: string;\n            to_device_since?: string;\n        };\n        // User ID\n        key: string;\n    }\n}\n\nexport class MatrixClient extends EventEmitter {\n    private static _instance: MatrixClient;\n    private access_token?: string;\n    private device_id?: string;\n    public mxid?: string;\n    // Hostname including \"https://\"\n    private hostname?: string;\n    private slidingSyncHostname?: string;\n    private syncing = false;\n    private roomsInView: string[] = [];\n    // TODO: Use to filter rooms by spaces visible. Eventually even make lists per space dynamically and use that to filter\n    private spaceOpen: string[] = [];\n    private rooms: Set<Room> = new Set();\n    private syncPos?: string;\n    private initialSync = true;\n    private database?: IDBPDatabase<MatrixDB>;\n    private profileInfo?: IProfileInfo;\n    private lastRanges?: { [key: string]: number[][] };\n    private lastTxnID?: string;\n    private to_device_since?: string;\n    public olmMachine?: OlmMachine;\n\n    public get isLoggedIn(): boolean {\n        return this.access_token !== undefined;\n    }\n\n    public static async Instance() {\n        let instance = this._instance;\n        // Load from database if not done\n        if (!instance) {\n            instance = (this._instance = new this());\n            if (!instance.database) {\n                await instance.createDatabase();\n            }\n            const tx = instance.database?.transaction('loginInfo', 'readonly');\n            // We dont know the mxid so we just get all and use the first. In theory this allows for multiple accounts\n            const loginInfo = await tx?.store.getAll();\n            await tx?.done;\n            if (loginInfo && loginInfo.length > 0) {\n                instance.mxid = loginInfo[0].userId;\n                instance.hostname = loginInfo[0].hostname;\n                instance.slidingSyncHostname = loginInfo[0].slidingSyncHostname;\n                instance.access_token = loginInfo[0].access_token;\n                instance.device_id = loginInfo[0].device_id;\n                instance.profileInfo = {\n                    avatar_url: loginInfo[0].avatarUrl,\n                    displayname: loginInfo[0].displayName,\n                };\n                instance.olmMachine = await OlmMachine.initialize(new UserId(instance.mxid), new DeviceId(instance.device_id!), \"cetirizine-crypto\");\n\n                // Load sync info\n                const syncTx = instance.database?.transaction('syncInfo', 'readonly');\n                const syncInfo = await syncTx?.store.get(instance.mxid!);\n                await syncTx?.done;\n\n                if (syncInfo) {\n                    instance.syncPos = syncInfo.syncPos;\n                    instance.initialSync = syncInfo.initialSync;\n                    instance.lastRanges = syncInfo.lastRanges;\n                    instance.lastTxnID = syncInfo.lastTxnID;\n                    console.log(\"to_device_since:\", syncInfo.to_device_since)\n                    instance.to_device_since = syncInfo.to_device_since;\n                }\n\n                // Load rooms\n                const roomTx = instance.database?.transaction('rooms', 'readonly');\n                const rooms = await roomTx?.store.getAll();\n                await roomTx?.done;\n\n                if (rooms) {\n                    instance.rooms = new Set(rooms.map(room => {\n                        const roomObj = new Room(room.roomID, instance.hostname!);\n                        roomObj.windowPos = room.windowPos;\n                        roomObj.setInvitedCount(room.invited_count);\n                        roomObj.setJoinedCount(room.joined_count);\n                        roomObj.setNotificationCount(room.notification_count);\n                        roomObj.setNotificationHighlightCount(room.highlight_count);\n                        roomObj.setName(room.name);\n                        if (room.events) {\n                            roomObj.addEvents(room.events);\n                        }\n                        if (room.stateEvents) {\n                            roomObj.addStateEvents(room.stateEvents);\n                        }\n                        if (room.isDM) {\n                            roomObj.setDM(room.isDM);\n                        }\n                        return roomObj;\n                    }))\n                    instance.emit(\"rooms\", instance.rooms);\n                }\n            }\n        }\n\n\n        return instance;\n    }\n\n    private async createDatabase() {\n        this.database = await openDB<MatrixDB>(\"matrix\", 4, {\n            upgrade(db, oldVersion) {\n                if (oldVersion < 1) {\n                    if (db.objectStoreNames.contains(\"rooms\")) {\n                        db.deleteObjectStore(\"rooms\");\n                    }\n                    //if (db.objectStoreNames.contains(\"loginInfo\")) {\n                    //    db.deleteObjectStore(\"loginInfo\");\n                    //}\n                    if (db.objectStoreNames.contains(\"syncInfo\")) {\n                        db.deleteObjectStore(\"syncInfo\");\n                    }\n                    db.createObjectStore('rooms', { keyPath: 'roomID' });\n                    db.createObjectStore('loginInfo', { keyPath: 'userId' });\n                    db.createObjectStore('syncInfo', { keyPath: 'userId' });\n                }\n            }\n        });\n    }\n\n    private async setHostname(hostname: string) {\n        if (!hostname.startsWith(\"https://\")) {\n            throw Error(\"Hostname must start with 'https://'\");\n        }\n        if (!this.database) {\n            await this.createDatabase();\n        }\n\n        // Write to database\n        const tx = this.database?.transaction('loginInfo', 'readwrite');\n        await tx?.store.put({\n            userId: this.mxid!,\n            hostname: hostname,\n            slidingSyncHostname: this.slidingSyncHostname,\n            access_token: this.access_token,\n            device_id: this.device_id,\n        });\n        await tx?.done\n\n        // Set in memory\n        this.hostname = hostname;\n\n    }\n\n    public async startSync() {\n        if (!this.isLoggedIn) {\n            throw Error(\"Not logged in\");\n        }\n        if (!this.database) {\n            await this.createDatabase();\n        }\n        if (this.syncing) {\n            return;\n        }\n        this.syncing = true;\n        while (this.syncing) {\n            try {\n                await this.sync();\n            } catch (e) {\n                console.error(e);\n                return;\n            }\n        }\n    }\n\n    public stopSync() {\n        this.syncing = false;\n    }\n\n    private isIndexInRange(index: number, ranges: number[][]): boolean {\n        for (const r of ranges) {\n            if (r[0] < index && index <= r[1]) {\n                return true\n            }\n        }\n        return false\n    }\n\n    private shiftRight(listKey: string, ranges: number[][], hi: number, low: number) {\n        //     l   h\n        // 0,1,2,3,4 <- before\n        // 0,1,2,2,3 <- after, hi is deleted and low is duplicated\n        for (let i = hi - 1; i > low - 1; i--) {\n            if (this.isIndexInRange(i, ranges)) {\n                const roomObj = [...this.rooms].find(room => room.windowPos[listKey] === i + 1);\n                if (roomObj) {\n                    roomObj.windowPos[listKey] = (i);\n                }\n            }\n        }\n    }\n\n    private shiftLeft(listKey: string, ranges: number[][], hi: number, low: number) {\n        //     l   h\n        // 0,1,2,3,4 <- before\n        // 0,1,3,4,4 <- after, low is deleted and hi is duplicated\n        for (let i = low + 1; i < hi + 1; i++) {\n            if (this.isIndexInRange(i, ranges)) {\n                const roomObj = [...this.rooms].find(room => room.windowPos[listKey] === i - 1);\n                if (roomObj) {\n                    roomObj.windowPos[listKey] = (i);\n                }\n            }\n        }\n\n    }\n\n    private async removeEntry(listKey: string, ranges: number[][], index: number) {\n        // work out the max index\n        let max = -1;\n        const indexes = [...this.rooms].map(room => room.windowPos[listKey]);\n        for (const n in indexes) {\n            if (Number(n) > max) {\n                max = Number(n);\n            }\n        }\n        const roomObj = [...this.rooms].find(room => room.windowPos[listKey] === index);\n        if (roomObj) {\n            const tx = this.database?.transaction('rooms', 'readwrite');\n            await tx?.store.delete(roomObj.roomID);\n            await tx?.done;\n            this.rooms.delete(roomObj)\n        }\n        if (max < 0 || index > max) {\n            return;\n        }\n        // Everything higher than the gap needs to be shifted left.\n        this.shiftLeft(listKey, ranges, max, index);\n    }\n\n    private addEntry(listKey: string, ranges: number[][], index: number): void {\n        // work out the max index\n        let max = -1;\n        const indexes = [...this.rooms].map(room => room.windowPos[listKey]);\n        for (const n in indexes) {\n            if (Number(n) > max) {\n                max = Number(n);\n            }\n        }\n        if (max < 0 || index > max) {\n            return;\n        }\n        // Everything higher than the gap needs to be shifted right, +1 so we don't delete the highest element\n        this.shiftRight(listKey, ranges, max + 1, index);\n    }\n\n    private async sendIdentifyAndOneTimeKeys() {\n        if (!this.isLoggedIn) {\n            throw Error(\"Not logged in\");\n        }\n        if (!this.slidingSyncHostname) {\n            throw Error(\"Hostname must be set first\");\n        }\n        if (!this.olmMachine) {\n            throw Error(\"Olm machine must be set first\");\n        }\n\n        const outgoing_requests = await this.olmMachine.outgoingRequests();\n\n        for (const request of outgoing_requests) {\n            // Check which type the request is\n            if (request.type === RequestType.KeysUpload) {\n                // Send the key\n                const request_typed = request as KeysUploadRequest;\n                const response = await fetch(\n                    `${this.hostname}/_matrix/client/v3/keys/upload`,\n                    {\n                        method: \"POST\",\n                        headers: {\n                            \"Content-Type\": \"application/json\",\n                            \"Authorization\": `Bearer ${this.access_token}`\n                        },\n                        body: request_typed.body\n                    }\n                )\n                if (!response.ok) {\n                    console.error(\"Failed to upload keys\", response);\n                }\n                this.olmMachine.markRequestAsSent(request_typed.id!, request_typed.type, await response.text());\n            } else if (request.type === RequestType.KeysQuery) {\n                const request_typed = request as KeysQueryRequest;\n                const response = await fetch(\n                    `${this.hostname}/_matrix/client/v3/keys/query`,\n                    {\n                        method: \"POST\",\n                        headers: {\n                            \"Content-Type\": \"application/json\",\n                            \"Authorization\": `Bearer ${this.access_token}`\n                        },\n                        body: request_typed.body\n                    }\n                )\n                if (!response.ok) {\n                    console.error(\"Failed to query keys\", response);\n                }\n                this.olmMachine.markRequestAsSent(request_typed.id!, request_typed.type, await response.text());\n            } else if (request.type === RequestType.KeysClaim) {\n                const request_typed = request as KeysClaimRequest;\n                const response = await fetch(\n                    `${this.hostname}/_matrix/client/v3/keys/claim`,\n                    {\n                        method: \"POST\",\n                        headers: {\n                            \"Content-Type\": \"application/json\",\n                            \"Authorization\": `Bearer ${this.access_token}`\n                        },\n                        body: request_typed.body\n                    }\n                )\n                if (!response.ok) {\n                    console.error(\"Failed to claim keys\", response);\n                }\n                this.olmMachine.markRequestAsSent(request_typed.id!, request_typed.type, await response.text());\n            } else if (request.type === RequestType.ToDevice) {\n                const request_typed = request as ToDeviceRequest;\n                const response = await fetch(\n                    `${this.hostname}/_matrix/client/v3/sendToDevice/${request_typed.event_type}/${request_typed.txn_id}`,\n                    {\n                        method: \"PUT\",\n                        headers: {\n                            \"Content-Type\": \"application/json\",\n                            \"Authorization\": `Bearer ${this.access_token}`\n                        },\n                        body: request_typed.body\n                    }\n                )\n                if (!response.ok) {\n                    console.error(\"Failed to send to device\", response);\n                }\n                this.olmMachine.markRequestAsSent(request_typed.id!, request_typed.type, await response.text());\n            } else if (request.type === RequestType.SignatureUpload) {\n                const request_typed = request as SignatureUploadRequest;\n                const response = await fetch(\n                    `${this.hostname}/_matrix/client/v3/keys/signatures/upload`,\n                    {\n                        method: \"POST\",\n                        headers: {\n                            \"Content-Type\": \"application/json\",\n                            \"Authorization\": `Bearer ${this.access_token}`\n                        },\n                        body: request_typed.body\n                    }\n                )\n                if (!response.ok) {\n                    console.error(\"Failed to upload signatures\", response);\n                }\n                this.olmMachine.markRequestAsSent(request_typed.id!, request_typed.type, await response.text());\n            } else if (request.type === RequestType.RoomMessage) {\n                const request_typed = request as RoomMessageRequest;\n                const response = await fetch(\n                    `${this.hostname}/_matrix/client/v3/rooms/${request_typed.room_id}/send/${request_typed.event_type}/${request_typed.txn_id}`,\n                    {\n                        method: \"PUT\",\n                        headers: {\n                            \"Content-Type\": \"application/json\",\n                            \"Authorization\": `Bearer ${this.access_token}`\n                        },\n                        body: request_typed.body\n                    }\n                )\n                if (!response.ok) {\n                    console.error(\"Failed to send message\", response);\n                }\n                this.olmMachine.markRequestAsSent(request_typed.id!, request_typed.type, await response.text());\n            } else if (request.type === RequestType.KeysBackup) {\n                const request_typed = request as KeysBackupRequest;\n                const response = await fetch(\n                    `${this.hostname}/_matrix/client/v3/room_keys/keys`,\n                    {\n                        method: \"PUT\",\n                        headers: {\n                            \"Content-Type\": \"application/json\",\n                            \"Authorization\": `Bearer ${this.access_token}`\n                        },\n                        body: request_typed.body\n                    }\n                )\n                if (!response.ok) {\n                    console.error(\"Failed to backup keys\", response);\n                }\n                this.olmMachine.markRequestAsSent(request_typed.id!, request_typed.type, await response.text());\n            }\n        }\n    }\n\n    private async sync() {\n        if (!this.isLoggedIn) {\n            throw Error(\"Not logged in\");\n        }\n        if (!this.slidingSyncHostname) {\n            throw Error(\"Hostname must be set first\");\n        }\n\n        await this.sendIdentifyAndOneTimeKeys();\n\n        // This is the initial sync case for each list\n        let lists_ranges: {\n            \"overview\": number[][];\n            [key: string]: number[][];\n        } = {\n            \"overview\": [[0, 10]],\n            // Needed for calcs\n            \"spaces\": [[0, Number.MAX_SAFE_INTEGER]]\n        };\n        let timeline_limit = 1;\n        if (!this.initialSync) {\n            for (const list in lists_ranges) {\n                // Set higher timeline limit for subsequent syncs\n                timeline_limit = 10;\n                // Calculate overlap between this.roomsInView and this.roomToRoomID and then\n                // calculate the ranges for each list\n                const rawRangeInView = new Set([...this.rooms]\n                    .filter(room => this.roomsInView.includes(room.roomID))\n                    .map(room => room.windowPos[list]).sort())\n\n\n                if (rawRangeInView.size === 0) {\n                    // If there are no rooms in view, we can skip this list\n                    continue;\n                }\n\n                // Increment range by 1 to make sure we always get a little more than we need\n                // [1,2,3,4,7,8,9,10,11] -> [2,3,4,5,8,9,10,11,12]\n                rawRangeInView.add([...rawRangeInView][rawRangeInView.size - 1] + 1);\n\n\n                // Turn an input like [1,2,3,4,7,8,9,10,11] to [[1,4], [7,11]]\n                const rangesInView = [...rawRangeInView].reduce((acc, cur, i, arr) => {\n                    if (i === 0) {\n                        // [1,2,3,4] -> [[1,1]]\n                        acc.push([cur, cur]);\n                        return acc;\n                    }\n                    // Cur = 2, arr = [1,2,3,4], arr[i - 1] + 1 = 2 then\n                    if (cur === arr[i - 1] + 1) {\n                        // [1,2,3,4,7] -> [[1,2]]\n                        acc[acc.length - 1][1] = cur;\n                        return acc;\n                    }\n                    // Else [1,2,3,4,7] -> [[1,2], [7,7]]\n                    acc.push([cur, cur]);\n                    return acc;\n                }, [] as [number, number][]);\n\n                // Sort by the first element of each range and add to the object\n                const sorted = rangesInView.sort((a, b) => a[0] - b[0]);\n\n                // Deduplicate ranges\n                const deduped = sorted.reduce((acc, cur, i, arr) => {\n                    if (i === 0) {\n                        acc.push(cur);\n                        return acc;\n                    }\n                    if (cur[0] === arr[i - 1][0] && cur[1] === arr[i - 1][1]) {\n                        return acc;\n                    }\n                    acc.push(cur);\n                    return acc;\n                }, [] as [number, number][]);\n\n                lists_ranges[list] = deduped;\n            }\n        }\n\n\n        if (this.lastRanges && Object.entries(lists_ranges).toString() !== Object.entries(this.lastRanges).toString()) {\n            console.log(\"Ranges changed, resetting sync txn_id\", lists_ranges)\n            this.lastRanges = lists_ranges;\n            this.lastTxnID = Date.now().toString();\n        }\n\n        if (!this.lastRanges) {\n            console.log(lists_ranges)\n            this.lastRanges = lists_ranges;\n            this.lastTxnID = Date.now().toString();\n        }\n\n\n        let url = `${this.slidingSyncHostname}/_matrix/client/unstable/org.matrix.msc3575/sync?timeout=30000`;\n        if (this.syncPos) {\n            url = `${this.slidingSyncHostname}/_matrix/client/unstable/org.matrix.msc3575/sync?timeout=30000&pos=${this.syncPos}`\n        }\n\n        console.log(\"to_device_since:\", this.to_device_since)\n        const resp = await fetch(url, {\n            method: \"POST\",\n            headers: {\n                \"Authorization\": `Bearer ${this.access_token}`\n            },\n            body: JSON.stringify({\n                // allows clients to know what request params reached the server,\n                // functionally similar to txn IDs on /send for events.\n                // TODO: check resp\n                txn_id: this.lastTxnID,\n\n                // a delta token to remember information between sessions.\n                // See \"Bandwidth optimisations for persistent clients\" for more information.\n                // TODO: This isnt implemented anywhere yet\n                //delta_token: \"opaque-server-provided-string\",\n\n                // Sliding Window API\n                lists: {\n                    // TODO: We need a list that fetches all spaces\n                    \"spaces\": {\n                        slow_get_all_rooms: true,\n                        sort: [\"by_name\"],\n                        required_state: [\n                            // needed to build sections\n                            [\"m.space.child\", \"*\"],\n                            [\"m.space.parent\", \"*\"],\n                            [\"m.room.create\", \"\"],\n                            // Room Avatar\n                            [\"m.room.avatar\", \"*\"],\n                            // Room Topic\n                            [\"m.room.topic\", \"*\"],\n                            // Request only the m.room.member events required to render events in the timeline.\n                            // The \"$LAZY\" value is a special sentinel value meaning \"lazy loading\" and is only valid for\n                            // the \"m.room.member\" event type. For more information on the semantics, see \"Lazy-Loading Room Members\".\n                            [\"m.room.member\", \"$LAZY\"],\n                        ],\n                        timeline_limit: timeline_limit,\n                        filters: {\n                            room_types: [\"m.space\"]\n                        }\n                    },\n                    \"overview\": {\n                        ranges: this.lastRanges[\"overview\"],\n                        sort: [\"by_notification_level\", \"by_recency\", \"by_name\"],\n                        required_state: [\n                            // needed to build sections\n                            [\"m.space.child\", \"*\"],\n                            [\"m.space.parent\", \"*\"],\n                            [\"m.room.create\", \"\"],\n                            // Room Avatar\n                            [\"m.room.avatar\", \"*\"],\n                            // Room Topic\n                            [\"m.room.topic\", \"*\"],\n                            // Request only the m.room.member events required to render events in the timeline.\n                            // The \"$LAZY\" value is a special sentinel value meaning \"lazy loading\" and is only valid for\n                            // the \"m.room.member\" event type. For more information on the semantics, see \"Lazy-Loading Room Members\".\n                            [\"m.room.member\", \"$LAZY\"],\n                        ],\n                        timeline_limit: timeline_limit,\n                        filters: {}\n                    },\n                },\n                bump_event_types: [\"m.room.message\", \"m.room.encrypted\"],\n\n                extensions: {\n                    e2ee: {\n                        enabled: true,\n                    },\n                    to_device: {\n                        enabled: true,\n                        // TODO: if not initial sync add since token\n                        since: this.to_device_since || null\n                    }\n                }\n            })\n        });\n        if (!resp.ok) {\n            if (resp.status === 400) {\n                if ((await resp.json()).errcode === \"M_UNKNOWN_POS\") {\n                    this.syncPos = undefined;\n                    const syncInfoTX = this.database?.transaction('syncInfo', 'readwrite');\n                    await syncInfoTX?.store.put({\n                        userId: this.mxid!,\n                        syncPos: this.syncPos,\n                        initialSync: this.initialSync,\n                        lastRanges: this.lastRanges,\n                        lastTxnID: this.lastTxnID,\n                    });\n                    await syncInfoTX?.done;\n                }\n            }\n            console.error(resp);\n            console.error(\"Error syncing. See console for error.\");\n        }\n        const json = await resp.json() as ISlidingSyncResp;\n        this.syncPos = json.pos;\n\n        if (json.extensions?.to_device) {\n            console.log(\"Processing to_device events\")\n            await this.olmMachine?.receiveSyncChanges(\n                JSON.stringify(json.extensions.to_device.events || []),\n                new DeviceLists(\n                    json.extensions.e2ee?.device_lists?.changed?.map(\n                        user_id => new UserId(user_id)\n                    ),\n                    json.extensions.e2ee?.device_lists?.left?.map(\n                        user_id => new UserId(user_id)\n                    )\n                ),\n                new Map(Object.entries(json.extensions.e2ee?.device_one_time_keys_count || [])),\n                new Set(json.extensions.e2ee?.device_unused_fallback_key_types)\n            );\n            this.to_device_since = json.extensions.to_device.next_batch;\n        }\n\n        await this.sendIdentifyAndOneTimeKeys();\n\n\n        const syncInfoTX = this.database?.transaction('syncInfo', 'readwrite');\n        await syncInfoTX?.store.put({\n            userId: this.mxid!,\n            syncPos: this.syncPos,\n            initialSync: this.initialSync,\n            lastRanges: this.lastRanges,\n            lastTxnID: this.lastTxnID,\n            to_device_since: this.to_device_since,\n        });\n        await syncInfoTX?.done;\n\n        let gapIndex = -1;\n        for (const listKey in json.lists) {\n            const list = json.lists[listKey];\n            if (list.ops) {\n                for (const op of list.ops) {\n                    if (isSyncOp(op)) {\n                        const tx = this.database?.transaction('rooms', 'readwrite');\n                        for (let i = op.range[0]; i <= op.range[1]; i++) {\n                            const roomID = op.room_ids[i - op.range[0]];\n                            if (!roomID) {\n                                break; // we are at the end of list\n                            }\n\n                            // Check if we already know this room and skip if we do. This is needed since we have 2 lists.\n                            // The db would already do this but the obj list doesn't (even though its a Set. Thats a mystery yet to solve)\n                            const roomObj = [...this.rooms].find(room => room.roomID === roomID);\n                            if (roomObj) {\n                                roomObj.windowPos[listKey] = i;\n                                continue;\n                            }\n\n                            const newRoom = new Room(roomID, this.hostname!);\n                            // We start to remember the Room now.\n                            newRoom.setName(roomID);\n                            newRoom.windowPos[listKey] = i;\n\n                            this.rooms.add(newRoom);\n                            await tx?.store.put({\n                                windowPos: newRoom.windowPos,\n                                roomID: newRoom.roomID,\n                                name: newRoom.getName(),\n                                notification_count: newRoom.getNotificationCount(),\n                                highlight_count: newRoom.getNotificationHighlightCount(),\n                                joined_count: newRoom.getJoinedCount(),\n                                invited_count: newRoom.getInvitedCount(),\n                                avatarUrl: newRoom.getAvatarURL(),\n                                isSpace: newRoom.isSpace(),\n                                isDM: newRoom.isDM(),\n                                stateEvents: newRoom.getStateEvents(),\n                                events: newRoom.getEvents(),\n                            });\n                        }\n                        await tx?.done;\n                    } else if (isInsertOp(op)) {\n                        console.log(\"Got INSERT OP\", op);\n                        const roomObj = [...this.rooms].find(room => room.windowPos[listKey] === op.index);\n                        if (roomObj) {\n                            if (gapIndex < 0) {\n                                // we haven't been told where to shift from, so make way for a new room entry.\n                                this.addEntry(listKey, this.lastRanges[listKey], op.index);\n                            } else if (gapIndex > op.index) {\n                                // the gap is further down the list, shift every element to the right\n                                // starting at the gap so we can just shift each element in turn:\n                                // [A,B,C,_] gapIndex=3, op.index=0\n                                // [A,B,C,C] i=3\n                                // [A,B,B,C] i=2\n                                // [A,A,B,C] i=1\n                                // Terminate. We'll assign into op.index next.\n                                this.shiftRight(listKey, this.lastRanges[listKey], gapIndex, op.index);\n                            } else if (gapIndex < op.index) {\n                                // the gap is further up the list, shift every element to the left\n                                // starting at the gap so we can just shift each element in turn\n                                this.shiftLeft(listKey, this.lastRanges[listKey], op.index, gapIndex);\n                            }\n                        }\n                        gapIndex = -1;\n                        const tx = this.database?.transaction('rooms', 'readwrite');\n                        // We start to remember the Room now.\n                        const foundRoom = [...this.rooms].find(room => room.roomID === op.room_id);\n                        if (foundRoom) {\n                            foundRoom.windowPos[listKey] = op.index;\n                            await tx?.store.put({\n                                windowPos: foundRoom.windowPos,\n                                roomID: foundRoom.roomID,\n                                name: foundRoom.getName(),\n                                notification_count: foundRoom.getNotificationCount(),\n                                highlight_count: foundRoom.getNotificationHighlightCount(),\n                                joined_count: foundRoom.getJoinedCount(),\n                                invited_count: foundRoom.getInvitedCount(),\n                                avatarUrl: foundRoom.getAvatarURL(),\n                                isSpace: foundRoom.isSpace(),\n                                isDM: foundRoom.isDM(),\n                                stateEvents: foundRoom.getStateEvents(),\n                                events: foundRoom.getEvents(),\n                            });\n                        } else {\n                            const roomFromDB = await tx?.store.get(op.room_id);\n                            let newRoom = new Room(op.room_id, this.hostname!);\n                            newRoom.setName(op.room_id);\n                            newRoom.windowPos[listKey] = op.index;\n                            if (roomFromDB) {\n                                console.warn(\"Room in db but not in obj list.\", op.room_id, \"Updating obj list.\");\n                                newRoom = new Room(op.room_id, this.hostname!)\n                                newRoom.setName(roomFromDB.name);\n                                newRoom.setNotificationCount(roomFromDB.notification_count);\n                                newRoom.setNotificationHighlightCount(roomFromDB.highlight_count);\n                                newRoom.setJoinedCount(roomFromDB.joined_count);\n                                newRoom.setInvitedCount(roomFromDB.invited_count);\n                                newRoom.setDM(roomFromDB.isDM || false);\n                            }\n                            this.rooms.add(newRoom);\n                            await tx?.store.put({\n                                windowPos: newRoom.windowPos,\n                                roomID: newRoom.roomID,\n                                name: newRoom.getName(),\n                                notification_count: newRoom.getNotificationCount(),\n                                highlight_count: newRoom.getNotificationHighlightCount(),\n                                joined_count: newRoom.getJoinedCount(),\n                                invited_count: newRoom.getInvitedCount(),\n                                avatarUrl: newRoom.getAvatarURL(),\n                                isSpace: newRoom.isSpace(),\n                                isDM: newRoom.isDM(),\n                                stateEvents: newRoom.getStateEvents(),\n                                events: newRoom.getEvents(),\n                            });\n                        }\n\n                        const roomIDs2 = [...this.rooms].map(room => room.roomID);\n                        // Check if we generated any duplicates and log them.\n                        const duplicates = roomIDs2.filter((item, index) => roomIDs2.indexOf(item) != index);\n                        if (duplicates.length > 0) {\n                            console.error(\"Duplicates found\", duplicates);\n                        }\n                        await tx?.done;\n                    } else if (isDeleteOp(op)) {\n                        console.log(\"Got DELETE OP\", op);\n\n                        if (gapIndex !== -1) {\n                            // we already have a DELETE operation to process, so process it.\n                            await this.removeEntry(listKey, this.lastRanges[listKey], gapIndex);\n                        }\n                        gapIndex = op.index;\n                    } else if (isInvalidateOp(op)) {\n                        const tx = this.database?.transaction('rooms', 'readwrite');\n                        for (let i = op.range[0]; i <= op.range[1]; i++) {\n                            // We shall first forget about these and \"startover\"\n                            const roomObj = [...this.rooms].find(room => room.windowPos[listKey] === i);\n                            if (roomObj) {\n                                await tx?.store.delete(roomObj.roomID);\n                                this.rooms.delete(roomObj)\n                            }\n                        }\n                        await tx?.done;\n                    }\n                }\n                if (gapIndex !== -1) {\n                    // we already have a DELETE operation to process, so process it\n                    // Everything higher than the gap needs to be shifted left.\n                    await this.removeEntry(listKey, this.lastRanges[listKey], gapIndex);\n                }\n            }\n        }\n        const tx = this.database?.transaction('rooms', 'readwrite');\n        for (const roomID in json.rooms) {\n            const room = json.rooms[roomID];\n            const name = room.name;\n            const notification_count = room.notification_count;\n            const notification_highlight_count = room.highlight_count;\n            const joined_count = room.joined_count;\n            const invited_count = room.invited_count;\n            const events = room.timeline;\n            const state_events = events?.filter(event => isRoomStateEvent(event)).map(event => event as IRoomStateEvent);\n            const normal_events = events?.filter(event => !isRoomStateEvent(event)).map(event => event as IRoomEvent);\n            const required_state = room.required_state;\n            const is_dm = room.is_dm;\n\n            let roomObj = [...this.rooms].find(room => room.roomID === roomID);\n            if (!roomObj) {\n                // Warn, check in the db and if that fails, create a new one.\n                console.warn(\"Could not find roomObj for roomID:\", roomID);\n                const roomFromDB = await tx?.store.get(roomID);\n                if (roomFromDB) {\n                    console.warn(\"Room in db but not in obj list.\", roomID, \"Updating obj list.\");\n\n                    roomObj = new Room(roomID, this.hostname!);\n                    roomObj.setName(roomFromDB.name);\n                    roomObj.setNotificationCount(roomFromDB.notification_count);\n                    roomObj.setNotificationHighlightCount(roomFromDB.highlight_count);\n                    roomObj.setJoinedCount(roomFromDB.joined_count);\n                    roomObj.setInvitedCount(roomFromDB.invited_count);\n                    roomObj.setDM(roomFromDB.isDM || false);\n                    if (roomFromDB.events) {\n                        roomObj.addEvents(roomFromDB.events);\n                    }\n                    if (roomFromDB.stateEvents) {\n                        roomObj.addStateEvents(roomFromDB.stateEvents);\n                    }\n                    roomObj.windowPos = roomFromDB.windowPos;\n                } else {\n                    console.warn(\"Could not find room in db. Creating new one.\");\n                    roomObj = new Room(roomID, this.hostname!);\n                    this.rooms.add(roomObj);\n                }\n            }\n\n            if (name) {\n                roomObj.setName(name);\n            }\n            roomObj.setNotificationCount(notification_count);\n            roomObj.setNotificationHighlightCount(notification_highlight_count);\n            roomObj.setJoinedCount(joined_count);\n            roomObj.setInvitedCount(invited_count);\n            if (normal_events) {\n                roomObj.addEvents(normal_events);\n            }\n            if (required_state) {\n                roomObj.addStateEvents(required_state);\n            }\n            if (state_events) {\n                roomObj.addStateEvents(state_events);\n            }\n            if (required_state || state_events) {\n                if (roomObj.isEncrypted()) {\n                    const joinEvents = [...(required_state || []), ...(state_events || [])]\n                        .filter(event => event.type === \"m.room.member\" && event.content.membership === \"join\");\n                    const memberIds = joinEvents.map(event => new UserId(event.state_key));\n                    await this.olmMachine?.updateTrackedUsers(memberIds);\n                }\n            }\n            if (is_dm) {\n                roomObj.setDM(is_dm);\n            }\n\n            // Write to database\n            await tx?.store.put({\n                windowPos: roomObj.windowPos,\n                roomID: roomObj.roomID,\n                name: roomObj.getName(),\n                notification_count: roomObj.getNotificationCount(),\n                highlight_count: roomObj.getNotificationHighlightCount(),\n                joined_count: roomObj.getJoinedCount(),\n                invited_count: roomObj.getInvitedCount(),\n                events: roomObj.getEvents(),\n                stateEvents: roomObj.getStateEvents(),\n                avatarUrl: roomObj.getAvatarURL(),\n                isSpace: roomObj.isSpace(),\n                isDM: roomObj.isDM(),\n            });\n        }\n        await tx?.done\n\n        if (this.initialSync) {\n            this.initialSync = false;\n            console.log(\"initialSyncComplete\");\n        }\n        if (json.rooms && Object.keys(json.rooms).length > 0) {\n            this.emit(\"rooms\", this.rooms);\n        }\n    }\n\n    /**\n     * addInViewRoom\n     * \n     * Tells the sync that a room with a certain roomID is inView.\n     */\n    public addInViewRoom(roomID: string) {\n        this.roomsInView.push(roomID);\n    }\n\n    /**\n     * removeInViewRoom\n     * \n     * Tells the sync that a room isn't in the room anymore\n     */\n    public removeInViewRoom(roomID: string) {\n        this.roomsInView = this.roomsInView.filter(room => room !== roomID);\n    }\n\n    public addSpaceOpen(roomID: string) {\n        this.spaceOpen.push(roomID);\n    }\n\n    public removeSpaceOpen(roomID: string) {\n        this.spaceOpen = this.spaceOpen.filter(room => room !== roomID);\n    }\n\n    public getRooms(): Set<Room> {\n        return this.rooms;\n    }\n\n    private getSpaces(): Room[] {\n        return [...this.rooms].filter(room => room.isSpace()).sort((a: Room, b: Room) => {\n            if (a.getName() < b.getName()) {\n                return -1;\n            }\n            if (a.getName() > b.getName()) {\n                return 1;\n            }\n            return 0;\n        });\n    }\n\n    public getSpacesWithRooms(): Set<{\n        spaceRoom: Room, children: Set<Room>\n    }> {\n        const spaces = this.getSpaces();\n        const result: Set<{\n            spaceRoom: Room, children: Set<Room>\n        }> = new Set();\n        // Find children of spaces\n        for (const space of spaces) {\n            const childrenIDs = space.getSpaceChildrenIDs();\n\n            const children = new Set([...this.getRooms()].filter(room => childrenIDs.includes(room.roomID)));\n\n            result.add({\n                spaceRoom: space,\n                children: children,\n            });\n        }\n        // Find spaces of parents\n        // Check parents of each room and if we have a parent make sure to add it to the result unless already added\n        for (const room of this.getRooms()) {\n            const parents = room.getSpaceParentIDs();\n            for (const parent of parents) {\n                const parentObj = [...this.getRooms()].find(room => room.roomID === parent.roomID);\n                if (!parentObj) {\n                    continue;\n                }\n                const alreadyAddedSpace = [...result].find(space => space.spaceRoom.roomID === parentObj.roomID);\n                if (alreadyAddedSpace) {\n                    // Check if room in children\n                    if (![...alreadyAddedSpace.children].find(child => child.roomID === room.roomID)) {\n                        alreadyAddedSpace.children.add(room);\n                    }\n                    continue;\n                }\n                // If space not added yet, add it\n                result.add({\n                    spaceRoom: parentObj,\n                    children: new Set([room]),\n                });\n            }\n        }\n\n        return result;\n    }\n\n    private async getLoginFlows(): Promise<ILoginFlows> {\n        if (!this.hostname) {\n            throw Error(\"Hostname must be set first\");\n        }\n        const resp = await fetch(`${this.hostname}/_matrix/client/v3/login`);\n        if (!resp.ok) {\n            console.error(resp);\n            throw Error(\"Error requesting login flows. See console for error.\");\n        }\n        const json = await resp.json() as ILoginFlows;\n        return json;\n    }\n\n    private async getWellKnown(): Promise<IWellKnown> {\n        if (!this.hostname) {\n            throw Error(\"Hostname must be set first\");\n        }\n        const resp = await fetch(`${this.hostname}/.well-known/matrix/client`);\n        if (!resp.ok) {\n            console.error(resp);\n            throw Error(\"Error requesting login flows. See console for error.\");\n        }\n        const json = await resp.json() as IWellKnown;\n        return json;\n    }\n\n    public async passwordLogin(username: string, password: string, triesLeft = 5) {\n        if (!this.database) {\n            await this.createDatabase();\n        }\n        if (!username) {\n            throw Error(\"Username must be set\");\n        }\n        if (!password) {\n            throw Error(\"Password must be set\");\n        }\n        this.mxid = username;\n        await this.setHostname(`https://${username.split(':')[1]}`);\n\n        try {\n            const well_known = await this.getWellKnown();\n            if (well_known[\"m.homeserver\"]?.base_url) {\n                await this.setHostname(well_known[\"m.homeserver\"].base_url);\n            }\n            if (well_known[\"org.matrix.msc3575.proxy\"]?.url) {\n                // Write to database\n                const tx = this.database?.transaction('loginInfo', 'readwrite');\n                await tx?.store.put({\n                    userId: this.mxid!,\n                    hostname: this.hostname,\n                    slidingSyncHostname: well_known[\"org.matrix.msc3575.proxy\"].url,\n                    access_token: this.access_token,\n                    device_id: this.device_id,\n                });\n                await tx?.done\n\n                // Set the sliding sync proxy\n                this.slidingSyncHostname = well_known[\"org.matrix.msc3575.proxy\"].url;\n            } else {\n                throw Error(\"No sliding sync proxy found\");\n            }\n        } catch (e: any) {\n            console.warn(`No well-known found for ${this.hostname}:\\n${e}`);\n        }\n\n        const loginFlows = await this.getLoginFlows();\n        if ((loginFlows.flows.filter((flow) => flow.type === 'm.login.password')?.length || 0) == 0) {\n            throw Error(\"Password login is not supported by this homeserver\");\n        }\n\n        const resp = await fetch(`${this.hostname}/_matrix/client/r0/login`, {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify({\n                type: \"m.login.password\",\n                identifier: {\n                    type: 'm.id.user',\n                    user: username,\n                },\n                user: username,\n                password: password\n            })\n        });\n        if (!resp.ok) {\n            console.error(resp);\n            throw Error(\"Error logging in. See console for error.\");\n        }\n        const json = await resp.json();\n        if (isErrorResp(json)) {\n            throw Error(`Error logging in: ${json.errcode}: ${json.error}`);\n        }\n        if (isRateLimitError(json)) {\n            console.error(`Rate limited. Retrying in ${json.retry_after_ms}ms. ${triesLeft} tries left.`);\n            await this.passwordLogin(username, password, triesLeft - 1);\n        }\n        if (isLoginResponse(json)) {\n            // Write to database\n            const tx = this.database?.transaction('loginInfo', 'readwrite');\n            await tx?.store.put({\n                userId: json.user_id!,\n                hostname: this.hostname,\n                slidingSyncHostname: this.slidingSyncHostname,\n                access_token: json.access_token,\n                device_id: json.device_id,\n            });\n            await tx?.done\n            this.access_token = json.access_token;\n            this.device_id = json.device_id;\n            this.mxid = json.user_id;\n\n            this.olmMachine = await OlmMachine.initialize(new UserId(this.mxid), new DeviceId(this.device_id!), \"cetirizine-crypto\");\n        }\n    }\n\n    public async fetchProfileInfo(userId: string): Promise<IProfileInfo> {\n        if (this.profileInfo) {\n            return this.profileInfo;\n        }\n        if (!this.hostname) {\n            throw Error(\"Hostname must be set first\");\n        }\n        if (!this.database) {\n            await this.createDatabase();\n        }\n        if (!this.access_token) {\n            throw Error(\"Access token must be set first\");\n        }\n        const resp = await fetch(`${this.hostname}/_matrix/client/r0/profile/${userId}`, {\n            headers: {\n                \"Authorization\": `Bearer ${this.access_token}`\n            }\n        });\n        if (!resp.ok) {\n            if (resp.status === 404 || resp.status === 403) {\n                return {} as IProfileInfo;\n            }\n            console.error(resp);\n            throw Error(\"Error fetching profile info. See console for error.\");\n        }\n        const json = await resp.json() as IProfileInfo;\n        json.avatar_url = json.avatar_url?.replace(\"mxc://\", `${this.hostname}/_matrix/media/r0/download/`);\n        this.profileInfo = json;\n        const tx = this.database?.transaction('loginInfo', 'readwrite');\n        await tx?.store.put({\n            userId: this.mxid!,\n            device_id: this.device_id!,\n            hostname: this.hostname,\n            slidingSyncHostname: this.slidingSyncHostname,\n            access_token: this.access_token,\n            displayName: json.displayname,\n            avatarUrl: json.avatar_url,\n        });\n        await tx?.done\n\n        return json;\n    }\n}\n\nfunction isRateLimitError(arg: any): arg is IRateLimitError {\n    return arg.retry_after_ms !== undefined;\n}\n\nfunction isLoginResponse(arg: any): arg is ILoginResponse {\n    return arg.access_token !== undefined;\n}\n\nfunction isErrorResp(arg: any): arg is IErrorResp {\n    return arg.errcode !== undefined;\n}\n\nexport const defaultMatrixClient: MatrixClient = await MatrixClient.Instance();\nexport const MatrixContext = createContext<MatrixClient>(defaultMatrixClient);\n\n// List of rooms\nexport function useRooms() {\n    const client = useContext(MatrixContext);\n    const [rooms, setRooms] = useState<Set<Room>>(client.getRooms());\n\n    useEffect(() => {\n        // Listen for room updates\n        const listenForRooms = (rooms: Set<Room>) => {\n            setRooms(rooms);\n        };\n        client.on(\"rooms\", listenForRooms);\n        // This is a no-op if there is already a sync\n        client.startSync();\n        return () => {\n            client.removeListener(\"rooms\", listenForRooms);\n        }\n    }, [])\n    return rooms;\n}\n\nexport function useRoom(roomID?: string): Room | undefined {\n    const client = useContext(MatrixContext);\n    return [...client.getRooms()].find(room => room.roomID === roomID);\n}\n\nexport function useSpaces() {\n    const client = useContext(MatrixContext);\n    const [spacesWithRooms, setSpacesWithRooms] = useState<Set<{\n        spaceRoom: Room, children: Set<Room>\n    }>>(client.getSpacesWithRooms());\n\n    useEffect(() => {\n        // Listen for room updates\n        const listenForRooms = (_rooms: Set<Room>) => {\n            setSpacesWithRooms(client.getSpacesWithRooms());\n        };\n        client.on(\"rooms\", listenForRooms);\n        // This is a no-op if there is already a sync\n        client.startSync();\n        return () => {\n            client.removeListener(\"rooms\", listenForRooms);\n        }\n    }, [])\n    return spacesWithRooms;\n}\n\n\nexport function useProfile() {\n    const client = useContext(MatrixContext);\n    const [profile, setProfile] = useState<IProfileInfo>({\n        displayname: client.mxid || \"Unknown\",\n    });\n\n    useEffect(() => {\n        client.fetchProfileInfo(client.mxid!).then((profile) => {\n            if (!profile.displayname) {\n                profile.displayname = client.mxid || \"Unknown\";\n            }\n            setProfile(profile);\n        })\n    }, [])\n    return profile;\n}","import { useInView } from \"react-intersection-observer\";\nimport Avatar from \"../../avatar/avatar\";\nimport { FC, memo, useContext } from \"react\";\nimport { MatrixContext } from \"../../../app/sdk/client\";\n\ntype RoomListItemProps = {\n    /**\n     * Room id\n     */\n    roomId: string\n    /**\n     * The URL of the Avatar image\n     */\n    avatarUrl?: string\n    /**\n     * The displayname of the room list item\n     */\n    displayname: string\n    /**\n     * Wether it is a DM or not\n     */\n    dm: boolean\n    /**\n     * Wether the user is online. Only used if dm is true.\n     */\n    online: boolean\n    /**\n     * Wether the current room is selected\n     */\n    active: boolean\n    /**\n     * The onClick handler\n     */\n    onClick: () => void;\n    /**\n     * If room is hidden\n     */\n    hidden: boolean\n};\n\nconst RoomListItem: FC<RoomListItemProps> = memo(({ roomId, avatarUrl, displayname, dm = false, online = false, active = false, onClick, hidden }: RoomListItemProps) => {\n    const matrixClient = useContext(MatrixContext);\n    const { ref, inView } = useInView({\n        triggerOnce: true,\n        rootMargin: '200px 0px',\n        skip: hidden,\n        onChange(inView) {\n            if (inView) {\n                matrixClient.addInViewRoom(roomId)\n            } else {\n                matrixClient.removeInViewRoom(roomId)\n            }\n        },\n    });\n    return (\n        <div ref={ref} onClick={onClick} className=\"w-full cursor-pointer\">\n            {\n                inView && (active ? (\n                    <div className=\"flex flex-row gap-2 p-1 bg-gray-300 hover:bg-gray-400 rounded-lg duration-200 ease-in-out items-center\">\n                        <Avatar avatarUrl={avatarUrl} displayname={displayname} dm={dm} online={online} />\n                        <span title={displayname} className='text-slate-900 font-normal text-base max-w-[32ch] overflow-hidden text-ellipsis w-full whitespace-nowrap'>{displayname}</span>\n                    </div>\n                ) : (\n                    <div className=\"flex flex-row gap-2 p-1 hover:bg-gray-300 rounded-lg duration-200 ease-in-out items-center\">\n                        <Avatar avatarUrl={avatarUrl} displayname={displayname} dm={dm} online={online} />\n                        <span title={displayname} className='text-slate-900 font-normal text-base max-w-[32ch] overflow-hidden text-ellipsis w-full whitespace-nowrap'>{displayname}</span>\n                    </div>\n                ))\n            }\n        </div>\n    );\n})\n\nexport default RoomListItem","import { FC, memo, useContext, useState } from \"react\";\nimport RoomListItem from \"./roomListItem/roomListItem\";\nimport { ChevronDown, ChevronRight } from \"lucide-react\";\nimport './roomList.scss';\nimport { useNavigate } from \"react-router-dom\";\nimport { MatrixContext } from \"../../app/sdk/client\";\n\ntype Room = {\n    /**\n     * The URL of the Avatar image\n     */\n    avatarUrl?: string\n    /**\n     * The displayname of the room list item\n     */\n    displayname: string\n    /**\n     * Wether it is a DM or not\n     */\n    dm: boolean\n    /**\n     * Wether the user is online. Only used if dm is true.\n     */\n    online: boolean\n    /**\n     * The roomid of the Room\n     */\n    roomID: string\n};\n\nexport type Section = {\n    /**\n     * Section Name. Can be a Space or a Tag\n     */\n    sectionName: string\n    /**\n     * The Rooms within the Section\n     */\n    rooms: Room[]\n    /**\n     * The Subsections of the Section\n     */\n    subsections: Section[]\n    /**\n     * The roomid of the Space\n     */\n    roomID: string\n}\n\ntype RoomListProps = {\n    /**\n     * The Sections available\n     */\n    sections: Section[]\n    /**\n     * Rooms outside of any Sections\n     */\n    rooms: Room[]\n};\n\ntype RoomListRoomsProps = {\n    /**\n     * The roomid of the Space\n     */\n    sectionID: string\n    /**\n     * Rooms\n     */\n    rooms: Room[]\n    /**\n     * The onClick handler\n     */\n    onClick: (roomID: string) => void;\n    /**\n     * The activeRoom\n     */\n    activeRoom?: string;\n    /**\n     * If rooms are hidden\n     */\n    hidden: boolean\n};\n\nconst RoomListRooms: FC<RoomListRoomsProps> = memo(({ sectionID, rooms, onClick, activeRoom, hidden }: RoomListRoomsProps) => {\n    // Get room ids of rooms\n    const roomsRendered = rooms.map(room => {\n        return (\n            <RoomListItem\n                roomId={room.roomID}\n                hidden={hidden}\n                key={`${room.roomID}+${sectionID}`}\n                avatarUrl={room.avatarUrl}\n                displayname={room.displayname}\n                dm={room.dm}\n                online={room.online}\n                active={room.roomID === activeRoom}\n                onClick={() => { onClick(room.roomID) }}\n            />\n        );\n    });\n    return (\n        <>\n            {roomsRendered}\n        </>\n    );\n})\n\nconst RoomSection: FC<{ section: Section, onRoomClick: (roomID: string) => void, activeRoom: string | undefined }> = memo(({ section, onRoomClick, activeRoom }: { section: Section, onRoomClick: (roomID: string) => void, activeRoom: string | undefined }) => {\n    const [hidden, setHidden] = useState<boolean>(true);\n    const matrixClient = useContext(MatrixContext);\n    if (hidden) {\n        matrixClient.removeSpaceOpen(section.roomID);\n    } else {\n        matrixClient.addSpaceOpen(section.roomID);\n    }\n    return (\n        <div key={section.roomID} className=\"flex flex-col gap-1 pl-4 select-none\">\n            <div className=\"flex flex-row gap-2 py-1 items-center justify-start cursor-pointer h-8 text-slate-600\" onClick={() => setHidden(prev => !prev)}>\n                {hidden ? <ChevronRight size={14} /> : <ChevronDown size={14} />}\n                <span className='font-normal text-base capitalize max-w-[32ch] overflow-hidden text-ellipsis w-full whitespace-nowrap'>{section.sectionName}</span>\n            </div >\n            {!hidden && (<RoomListRooms\n                hidden={hidden}\n                sectionID={section.roomID}\n                rooms={section.rooms}\n                onClick={onRoomClick}\n                activeRoom={activeRoom}\n            />)}\n            {!hidden && (\n                section.subsections.map(section => {\n                    return (\n                        <RoomSection\n                            key={section.roomID}\n                            section={section}\n                            onRoomClick={onRoomClick}\n                            activeRoom={activeRoom}\n                        />\n                    );\n                })\n            )}\n        </div>\n    );\n})\n\nconst RoomList: FC<RoomListProps> = memo(({ sections, rooms }: RoomListProps) => {\n    const [activeRoom, setActiveRoom] = useState<string | undefined>(undefined);\n    const navigate = useNavigate();\n\n    return (\n        <div className=\"flex flex-col gap-1 flex-1 p-2 min-w-[30ch] overflow-y-auto overflow-x-hidden scrollbarSmall max-w-[33ch]\">\n            {\n                sections.map(section => {\n                    return (\n                        <RoomSection\n                            key={section.roomID}\n                            section={section}\n                            onRoomClick={(roomID: string) => {\n                                setActiveRoom(roomID);\n                                navigate(`/${encodeURIComponent(roomID)}`);\n                            }}\n                            activeRoom={activeRoom}\n                        />\n                    );\n                })\n            }\n            <RoomSection\n                section={{\n                    sectionName: \"Others\",\n                    roomID: \"other\",\n                    subsections: [],\n                    rooms: rooms\n                }}\n                onRoomClick={(roomID: string) => {\n                    setActiveRoom(roomID);\n                    navigate(`/${encodeURIComponent(roomID)}`);\n                }}\n                activeRoom={activeRoom}\n            />\n\n        </div>\n    );\n})\n\nexport default RoomList","import { Meta } from \"@storybook/addon-docs\";\n\n<Meta title=\"Introduction/Welcome\" />\n\n# About Cetirizine\n\nWelcome to the Cetirizine Design System!\n\nThis storybook design system describes in depth the components used within the\nCetirizine Matrix Client.\n\nThe Design heavily leans on the Tailwindcss Design System. However there are speciic\ncomponents for some things and Pages are also documented.\n","import { memo, useContext, useState } from 'react';\nimport Button from '../button/button';\nimport Header from '../header/header';\nimport Input from '../input/basic/input';\nimport { Navigate } from 'react-router-dom';\nimport { MatrixContext } from '../../app/sdk/client';\n\nconst Login = memo(() => {\n    const matrixClient = useContext(MatrixContext);\n    const [loginPending, setLoginPending] = useState(false);\n    const [loginError, setLoginError] = useState('');\n    const [username, setUsername] = useState('');\n    const [password, setPassword] = useState('');\n    if (matrixClient.isLoggedIn) {\n        return <Navigate to=\"/\" />;\n    }\n    const startLogin = async () => {\n        try {\n            setLoginPending(true);\n            await matrixClient.passwordLogin(username, password);\n        } catch (e: any) {\n            setLoginError(e.toString());\n        }\n        setLoginPending(false);\n    }\n    return (\n        <form className=\"flex flex-col rounded-md shadow p-4 bg-white gap-2 min-w-[30rem]\" onSubmit={(e) => {\n            e.preventDefault();\n            startLogin();\n        }}>\n            <Header>Login</Header>\n            {loginError ? <h2 className='text-red-500 font-normal text-sm'>{loginError}</h2> : <div className='min-h-[1.25rem]'></div>}\n            <Input\n                readonly={loginPending}\n                value={username}\n                placeholder=\"Username\"\n                onChange={e => setUsername(e.target.value)}\n            />\n            <Input\n                readonly={loginPending}\n                value={password}\n                password={true}\n                placeholder=\"Password\"\n                onChange={e => setPassword(e.target.value)}\n            />\n            <Button\n                readonly={loginPending}\n                style=\"primary\"\n                type=\"submit\"\n            >\n                Login\n            </Button>\n        </form>\n    );\n})\n\nexport default Login;","import './LoginPage.scss';\nimport Login from '../components/login/login';\nimport { memo } from 'react';\n\nconst LoginPage = memo(() => {\n    return (\n        <div className=\"flex flex-col items-center justify-center min-h-screen bg-img\">\n            <Login />\n        </div>\n    );\n})\n\nexport default LoginPage;\n","import { memo } from \"react\";\nimport { IRoomEvent, isRoomMessageTextEvent } from \"../../app/sdk/api/apiTypes\";\nimport { FC } from \"react\";\nimport Avatar from \"../avatar/avatar\";\nimport { useRoom } from \"../../app/sdk/client\";\nimport Linkify from \"linkify-react\";\nimport DOMPurify from \"dompurify\";\n\ntype MessageEventProps = {\n    /**\n     * The event to render\n     */\n    event: IRoomEvent;\n    /**\n     * The roomID of the event to display\n     */\n    roomID?: string;\n    /**\n     * If the previous event was sent by the same user\n     */\n    hasPreviousEvent?: boolean;\n    /**\n     * Reactions to the event\n     */\n    reactions?: IRoomEvent[];\n};\n\nconst linkifyOptions = {\n    defaultProtocol: \"https\",\n    rel: \"noopener\",\n    target: \"_blank\",\n    className: \"text-blue-500 hover:text-blue-700 active:text-blue-700 visited:text-blue-500\"\n}\n\nconst MessageEvent: FC<MessageEventProps> = memo(({ event, roomID, hasPreviousEvent }) => {\n    const room = useRoom(roomID);\n\n    const renderCorrectMessage = (event: IRoomEvent) => {\n        if (isRoomMessageTextEvent(event)) {\n            if (event.content.format === \"org.matrix.custom.html\") {\n                const sanitized = DOMPurify.sanitize(event.content.formatted_body!, {\n                    ADD_TAGS: [\n                        \"font\",\n                        \"del\",\n                        \"h1\",\n                        \"h2\",\n                        \"h3\",\n                        \"h4\",\n                        \"h5\",\n                        \"h6\",\n                        \"blockquote\",\n                        \"p\",\n                        \"a\",\n                        \"ul\",\n                        \"ol\",\n                        \"sup\",\n                        \"sub\",\n                        \"li\",\n                        \"b\",\n                        \"i\",\n                        \"u\",\n                        \"strong\",\n                        \"em\",\n                        \"strike\",\n                        \"code\",\n                        \"hr\",\n                        \"br\",\n                        \"div\",\n                        \"table\",\n                        \"thead\",\n                        \"tbody\",\n                        \"tr\",\n                        \"th\",\n                        \"td\",\n                        \"caption\",\n                        \"pre\",\n                        \"span\",\n                        \"img\",\n                        \"details\",\n                        \"summary\"\n                    ]\n                })\n                // TODO: sanitize the attributes allowed by matrix spec\n\n                return (\n                    <div className={!hasPreviousEvent ? \"flex flex-row gap-4 p-2 pb-1 hover:bg-gray-200 rounded-md duration-200 ease-in-out items-start\" : \"flex flex-row p-2 pb-1 pt-0 hover:bg-gray-200 rounded-md duration-200 ease-in-out\"}>\n                        {!hasPreviousEvent && <Avatar\n                            displayname={room?.getMemberName(event.sender) || \"\"}\n                            avatarUrl={room?.getMemberAvatar(event.sender)}\n                            online={room?.isOnline() || false}\n                            dm={room?.isDM() || false}\n                        />}\n                        <div className={!hasPreviousEvent ? \"flex flex-col gap-1\" : \"ml-[3.7rem]\"}>\n                            {!hasPreviousEvent && <h2 className=\"text-sm font-medium text-red-500 whitespace-normal\">{room?.getMemberName(event.sender)}</h2>}\n                            {/* TODO: Fixme */}\n                            <p className=\"whitespace-normal text-black text-base font-normal\" dangerouslySetInnerHTML={{ __html: sanitized }}></p>\n                        </div>\n                    </div>\n                )\n            } else {\n                return (\n                    <div className={!hasPreviousEvent ? \"flex flex-row gap-4 p-2 pb-1 hover:bg-gray-200 rounded-md duration-200 ease-in-out items-start\" : \"flex flex-row p-2 pb-1 pt-0 hover:bg-gray-200 rounded-md duration-200 ease-in-out\"}>\n                        {!hasPreviousEvent && <Avatar\n                            displayname={room?.getMemberName(event.sender) || \"\"}\n                            avatarUrl={room?.getMemberAvatar(event.sender)}\n                            online={room?.isOnline() || false}\n                            dm={room?.isDM() || false}\n                        />}\n                        <div className={!hasPreviousEvent ? \"flex flex-col gap-1\" : \"ml-[3.7rem]\"}>\n                            {!hasPreviousEvent && <h2 className=\"text-sm font-medium text-red-500 whitespace-normal\">{room?.getMemberName(event.sender)}</h2>}\n                            <Linkify options={linkifyOptions} as='p' className=\"whitespace-normal text-black text-base font-normal\">{event.content.body}</Linkify>\n                        </div>\n                    </div>\n                )\n            }\n        } else {\n            return (\n                <p className=\"ml-[4.3rem] whitespace-normal text-black text-base font-normal\">{event.content.body}</p>\n            )\n        }\n    }\n\n    return renderCorrectMessage(event);\n});\n\nexport default MessageEvent;","import { memo } from \"react\";\nimport { IRoomEvent } from \"../../app/sdk/api/apiTypes\";\nimport { FC } from \"react\";\n\ntype UnknownEventProps = {\n    /**\n     * The event to render\n     */\n    event: IRoomEvent;\n};\n\nconst UnknownEvent: FC<UnknownEventProps> = memo(({ event }) => {\n    return <p className=\"whitespace-break-spaces\">{JSON.stringify(event, null, 4)}</p>;\n});\n\nexport default UnknownEvent;","import { memo } from \"react\";\nimport { IRoomMemberEvent } from \"../../app/sdk/api/apiTypes\";\nimport { FC } from \"react\";\n\ntype MemberEventProps = {\n    /**\n     * The event to render\n     */\n    event: IRoomMemberEvent;\n};\n\nconst MemberEvent: FC<MemberEventProps> = memo(({ event }) => {\n    const renderCorrectMessage = (event: IRoomMemberEvent) => {\n        // TODO: Make sure we render avatar and name changes correctly\n\n        return <p className=\"p-2 hover:bg-gray-200 rounded-md duration-200 ease-in-out\">\n            {\n                event.content.displayname ?\n                    event.content.displayname :\n                    event.state_key\n            } {\n                event.content.membership === \"join\" ?\n                    \"joined the room\" :\n                    (\n                        event.content.membership === \"leave\" ?\n                            // TODO: Handle kick\n                            \"left the room\" :\n                            (\n                                event.content.membership === \"ban\" ?\n                                    \"was banned from the room by \" + event.sender :\n                                    (\n                                        event.content.membership === \"invite\" ?\n                                            \"was invited to the room by \" + event.sender :\n                                            (\n                                                event.content.membership === \"knock\" ?\n                                                    \"knocked on the room\" :\n                                                    \"changed their membership status to \" + event.content.membership\n                                            )\n                                    )\n                            )\n                    )\n            }\n        </p>\n    }\n\n    return renderCorrectMessage(event);\n});\n\nexport default MemberEvent;","import { Send, Settings } from 'lucide-react';\nimport Avatar from '../components/avatar/avatar';\nimport ChatInput from '../components/input/chat/input';\nimport RoomList, { Section } from '../components/roomList/roomList';\nimport './MainPage.scss';\nimport { useProfile, useRoom, useRooms, useSpaces } from '../app/sdk/client';\nimport { Room } from '../app/sdk/room';\nimport { FC, memo, useContext, useEffect, useRef, useState } from 'react';\nimport { MatrixContext } from '../app/sdk/client';\nimport { useLocation, useParams } from 'react-router-dom';\nimport { $generateHtmlFromNodes } from '@lexical/html';\nimport { $convertToMarkdownString, TRANSFORMERS } from '@lexical/markdown';\nimport MessageEvent from '../components/events/messageEvent';\nimport UnknownEvent from '../components/events/unknownEvent';\nimport MemberEvent from '../components/events/memberEvent';\nimport { IRoomEvent, IRoomMemberEvent } from '../app/sdk/api/apiTypes';\nimport Linkify from 'linkify-react';\nimport { RoomId } from '@matrix-org/matrix-sdk-crypto-js';\n\ntype ChatViewProps = {\n    /**\n     * The roomID of the room to display\n     * If the roomID is empty, the ChatView will be empty\n     * If the roomID is invalid, the ChatView will be empty\n     * If the roomID is valid, the ChatView will display the room\n     * If the roomID is valid, but the room is not joined, the ChatView will display a placeholder\n     * If the roomID is valid, but the room is not loaded, the ChatView will display a placeholder\n     */\n    roomID?: string\n    /**\n     * Ref of the Scroll Container\n     */\n    scrollRef: React.RefObject<HTMLDivElement>\n};\n\nconst ChatView: FC<ChatViewProps> = memo(({ roomID, scrollRef }) => {\n    const room = useRoom(decodeURIComponent(roomID || \"\"));\n    const client = useContext(MatrixContext);\n    const events = room?.getEvents();\n    const { pathname } = useLocation();\n    const [renderedEvents, setRenderedEvents] = useState<JSX.Element[]>([]);\n\n    // Map events to components but also tell components if the previous event was from the same sender and which type it was\n    const renderEvents = (events: IRoomEvent[]) => {\n        const dedupedEvents = events?.filter((event, index, self) => {\n            return self.findIndex(e => e.event_id === event.event_id) === index;\n        });\n\n\n        Promise.all(dedupedEvents?.filter(event => event.type !== \"m.reaction\").map(async (event, index) => {\n            const previousEvent = dedupedEvents?.filter(event => event.type !== \"m.reaction\")[index - 1];\n            const previousEventIsFromSameSender = previousEvent?.sender === event.sender;\n            let previousEventType = previousEvent?.type;\n\n            // Make a list of events which are reactions for the current event we want to render\n            const reactions = dedupedEvents?.filter((e) => {\n                return e.type === \"m.reaction\" && e.content[\"m.relates_to\"].event_id === event.event_id;\n            });\n\n            // Decrypt the event if it is encrypte\n            if (event.type === \"m.room.encrypted\") {\n                try {\n                    const decrypted_event = await client.olmMachine?.decryptRoomEvent(JSON.stringify(event), new RoomId(roomID || \"\"));\n                    if (decrypted_event) {\n                        event = JSON.parse(decrypted_event.event) as IRoomEvent;\n                        previousEventType = event.type;\n                    } else {\n                        return (<p>Unable to decrypt event</p>)\n                    }\n                } catch (e: any) {\n                    console.error(e);\n                }\n            }\n\n            return renderEvent(event, previousEventIsFromSameSender, previousEventType, reactions);\n        })).then((renderedEvents) => {\n            setRenderedEvents(renderedEvents);\n        });\n    }\n\n    useEffect(() => {\n        if (events) {\n            renderEvents(events);\n        }\n    }, [events]);\n\n\n    useEffect(() => {\n        scrollRef.current?.scrollTo(0, scrollRef.current?.scrollHeight);\n    }, [pathname]);\n\n    // Render events based on the event type and content\n    const renderEvent = (event: IRoomEvent, previousEventIsFromSameSender: boolean, previousEventType: string, reactions: IRoomEvent[]) => {\n        switch (event.type) {\n            case \"m.room.message\":\n                return <MessageEvent reactions={reactions} event={event} roomID={roomID} key={event.event_id} hasPreviousEvent={previousEventIsFromSameSender && previousEventType === \"m.room.message\"} />\n            case \"m.room.member\":\n                return <MemberEvent event={event as IRoomMemberEvent} key={event.event_id} />\n            case \"m.room.redaction\":\n                return <></>;\n            default:\n                return <UnknownEvent event={event} key={event.event_id} />\n        }\n    }\n\n    return <div className='max-w-[130ch] flex flex-col'>{renderedEvents}</div>;\n});\n\n\nconst MainPage = memo(() => {\n    const profile = useProfile();\n    const spacesWithRooms = useSpaces();\n    const rooms = useRooms();\n    const client = useContext(MatrixContext);\n    let params = useParams();\n    const room = useRoom(decodeURIComponent(params.roomIdOrAlias || \"\"));\n\n    const [_htmlMessage, setHtmlMessage] = useState<string>(\"\");\n    const [_plainMessage, setPlainMessage] = useState<string>(\"\");\n    const scrollRef = useRef<HTMLDivElement>(null);\n\n    // Filter toplevel spaces.\n    // A toplevel space is a space that is not a child of another space.\n    // We can not rely only on the parent. We need to check in both directions.\n    const toplevelSpaces = [...spacesWithRooms].filter(({ spaceRoom }) => {\n        const not_a_child = ![...spacesWithRooms].some(({ children: otherChildren }) => {\n            return [...otherChildren].some(room => room.roomID === spaceRoom.roomID);\n        });\n        // Also check if there are no parents set\n        const no_parents = spaceRoom.getSpaceParentIDs().length === 0;\n        return not_a_child && no_parents;\n    });\n\n    // Filter rooms which are not part of any space and are not a space.\n    // A room is not part of any space if it is not a child of any space.\n    // A room is not a space if it has not any space as parent.\n    const leftOverRooms = [...rooms].filter(room => {\n        const not_a_child = ![...spacesWithRooms].some(({ children }) => {\n            return [...children].some(otherRoom => otherRoom.roomID === room.roomID);\n        });\n        const no_parents = room.getSpaceParentIDs().length === 0;\n        const not_a_space = !room.isSpace();\n        return not_a_child && no_parents && not_a_space;\n    });\n\n    // Generate a list of sections.\n    // Each section apart from special toplevel ones is a space.\n    // Each space has a list of rooms and subsections.\n    // Each subsection has a list of rooms and subsections.\n    // Subsections can nest infinitely.\n    // Rooms are always within a section.\n    // A section represents a space.\n    // If a room is not within a space it is in the toplevel section \"Other\" which is at the end of the list.\n    // The toplevel section \"Other\" is always present.\n    // The toplevel section \"Other\" is always the last section.\n    const sections = toplevelSpaces.map(space => {\n        const rooms = [...space.children].filter(room => !room.isSpace()).map(room => {\n            return {\n                roomID: room.roomID,\n                displayname: room.getName(),\n                avatarUrl: room.getAvatarURL(),\n                dm: room.isDM(),\n                online: room.isOnline(),\n            }\n        });\n\n        const generateSubsections = (subspace: Room): Section | undefined => {\n            const subspaceMeta = [...spacesWithRooms].find(space => space.spaceRoom.roomID === subspace.roomID);\n            if (subspaceMeta) {\n                const rooms = [...subspaceMeta?.children].map(room => {\n                    return {\n                        roomID: room.roomID,\n                        displayname: room.getName(),\n                        avatarUrl: room.getAvatarURL(),\n                        dm: room.isDM(),\n                        online: room.isOnline(),\n                    }\n                });\n\n                return {\n                    sectionName: subspace.getName(),\n                    rooms: rooms,\n                    roomID: subspace.roomID,\n                    subsections: [...subspaceMeta?.children]\n                        .filter(room => room.isSpace()).map(generateSubsections)\n                        .filter(section => section !== undefined) as Section[],\n                }\n            }\n        }\n\n        // Its a little weird sicne there are no children attached to the room object. Only to spacesWithRooms.\n        // Each subsection can have further subsections and rooms.\n        return {\n            sectionName: space.spaceRoom.getName(),\n            rooms: rooms,\n            roomID: space.spaceRoom.roomID,\n            subsections: [...space.children]\n                .filter(room => room.isSpace())\n                .map(generateSubsections),\n        } as Section;\n    });\n\n    // Add the toplevel section \"Other\" to the end of the list.\n    const otherRooms = leftOverRooms.filter(room => !room.isSpace()).map(room => {\n        return {\n            roomID: room.roomID,\n            displayname: room.getName(),\n            avatarUrl: room.getAvatarURL(),\n            dm: room.isDM(),\n            online: room.isOnline(),\n        }\n    });\n\n    // Check and print if otherRooms has duplicates.\n    const otherRoomsIDs = otherRooms.map(room => room.roomID);\n    const otherRoomsDuplicates = otherRoomsIDs.filter((id, index) => otherRoomsIDs.indexOf(id) !== index);\n    if (otherRoomsDuplicates.length > 0) {\n        console.error('otherRooms has duplicates', otherRoomsDuplicates);\n    }\n\n    const linkifyOptions = {\n        defaultProtocol: \"https\",\n        rel: \"noopener\",\n        target: \"_blank\",\n        className: \"text-blue-500 hover:text-blue-700 active:text-blue-700 visited:text-blue-500\"\n    }\n\n    return <div className='flex flex-row gap-2 min-h-screen h-screen'>\n        <div className='flex flex-col bg-gradient-to-br from-slate-100 via-gray-200 to-orange-200 border-r-[1px] border-slate-300'>\n            <div className='flex flex-row gap-2 m-2 p-1 items-center border-b-2'>\n                <Avatar displayname={profile.displayname || client.mxid!} avatarUrl={profile?.avatar_url} dm={false} online={false} />\n                <div className='flex flex-row justify-between items-center w-full'>\n                    <span className='text-base font-semibold'>{profile?.displayname}</span>\n                    <Settings size={28} stroke='unset' className='stroke-slate-600 rounded-full hover:bg-slate-300 p-1 cursor-pointer' />\n                </div>\n            </div>\n            <RoomList sections={sections} rooms={otherRooms} />\n        </div>\n        {\n            room && <div className='flex-1 flex flex-col'>\n                <div className='pb-2 flex flex-row items-center border-b-2 mt-4 ml-2'>\n                    <Avatar displayname={room.getName()} avatarUrl={room.getAvatarURL()} dm={room.isDM()} online={room.isOnline()} />\n                    <div className='flex flex-row items-center'>\n                        <h1 className='text-black font-semibold text-lg flex-shrink-0'>{room.getName()}</h1>\n                        <Linkify options={linkifyOptions} as='p' className=\"ml-4 text-slate-700 font-normal text-base\">{room.getTopic()}</Linkify>\n                    </div>\n                </div>\n                <div ref={scrollRef} className='overflow-y-auto overflow-x-hidden scrollbarSmall mr-2 my-1 flex-1 w-full flex flex-col-reverse'>\n                    <ChatView roomID={params.roomIdOrAlias} scrollRef={scrollRef} />\n                </div>\n                <div className='flex flex-row items-end'>\n                    <ChatInput namespace='Editor' onChange={(editorState, editor) => {\n                        // Convert editor state to both html and markdown.\n                        // If there is no formatting then just use the plain text.\n                        editorState.read(() => {\n                            const html = $generateHtmlFromNodes(editor);\n                            // TODO: Make sure that we strip any non matrix stuff\n                            setHtmlMessage(html);\n                            console.log(html);\n                            const markdown = $convertToMarkdownString(TRANSFORMERS);\n                            setPlainMessage(markdown);\n                            console.log(markdown);\n                        });\n                        // TODO: we need some send button\n                    }} onError={(e) => console.error(e)} />\n                    <Send size={45} stroke='unset' className='stroke-slate-600 rounded m-4 hover:bg-slate-300 hover:stroke-slate-500 p-2 cursor-pointer' onClick={() => {\n                        // TODO: Sanitize the html and send message to room\n                        // TODO: encrypt if room is encrypted\n                    }} />\n                </div>\n            </div>\n        }\n    </div >\n})\n\nexport default MainPage;","import * as story_0 from '/@fs//home/runner/work/cetirizine/cetirizine/src/components/avatar/avatar.stories.tsx'\nimport * as story_1 from '/@fs//home/runner/work/cetirizine/cetirizine/src/components/button/button.stories.tsx'\nimport * as story_2 from '/@fs//home/runner/work/cetirizine/cetirizine/src/components/header/header.stories.tsx'\nimport * as story_3 from '/@fs//home/runner/work/cetirizine/cetirizine/src/components/input/basic/input.stories.tsx'\nimport * as story_4 from '/@fs//home/runner/work/cetirizine/cetirizine/src/components/input/chat/input.stories.tsx'\nimport * as story_5 from '/@fs//home/runner/work/cetirizine/cetirizine/src/components/roomList/roomList.stories.tsx'\nimport * as story_6 from '/@fs//home/runner/work/cetirizine/cetirizine/src/components/roomList/roomListItem/roomListItem.stories.tsx'\nimport * as story_7 from '/@fs//home/runner/work/cetirizine/cetirizine/src/documentation/Welcome.stories.mdx'\nimport * as story_8 from '/@fs//home/runner/work/cetirizine/cetirizine/src/pages/LoginPage.stories.tsx'\nimport * as story_9 from '/@fs//home/runner/work/cetirizine/cetirizine/src/pages/MainPage.stories.tsx'\n\n    function loadable(key) {\n      return {\"/home/runner/work/cetirizine/cetirizine/src/components/avatar/avatar.stories.tsx\": story_0,\"/home/runner/work/cetirizine/cetirizine/src/components/button/button.stories.tsx\": story_1,\"/home/runner/work/cetirizine/cetirizine/src/components/header/header.stories.tsx\": story_2,\"/home/runner/work/cetirizine/cetirizine/src/components/input/basic/input.stories.tsx\": story_3,\"/home/runner/work/cetirizine/cetirizine/src/components/input/chat/input.stories.tsx\": story_4,\"/home/runner/work/cetirizine/cetirizine/src/components/roomList/roomList.stories.tsx\": story_5,\"/home/runner/work/cetirizine/cetirizine/src/components/roomList/roomListItem/roomListItem.stories.tsx\": story_6,\"/home/runner/work/cetirizine/cetirizine/src/documentation/Welcome.stories.mdx\": story_7,\"/home/runner/work/cetirizine/cetirizine/src/pages/LoginPage.stories.tsx\": story_8,\"/home/runner/work/cetirizine/cetirizine/src/pages/MainPage.stories.tsx\": story_9}[key];\n    }\n    \n    Object.assign(loadable, {\n      keys: () => ([\"/home/runner/work/cetirizine/cetirizine/src/components/avatar/avatar.stories.tsx\",\"/home/runner/work/cetirizine/cetirizine/src/components/button/button.stories.tsx\",\"/home/runner/work/cetirizine/cetirizine/src/components/header/header.stories.tsx\",\"/home/runner/work/cetirizine/cetirizine/src/components/input/basic/input.stories.tsx\",\"/home/runner/work/cetirizine/cetirizine/src/components/input/chat/input.stories.tsx\",\"/home/runner/work/cetirizine/cetirizine/src/components/roomList/roomList.stories.tsx\",\"/home/runner/work/cetirizine/cetirizine/src/components/roomList/roomListItem/roomListItem.stories.tsx\",\"/home/runner/work/cetirizine/cetirizine/src/documentation/Welcome.stories.mdx\",\"/home/runner/work/cetirizine/cetirizine/src/pages/LoginPage.stories.tsx\",\"/home/runner/work/cetirizine/cetirizine/src/pages/MainPage.stories.tsx\"]),\n      resolve: (key) => ({\"/home/runner/work/cetirizine/cetirizine/src/components/avatar/avatar.stories.tsx\":\"./src/components/avatar/avatar.stories.tsx\",\"/home/runner/work/cetirizine/cetirizine/src/components/button/button.stories.tsx\":\"./src/components/button/button.stories.tsx\",\"/home/runner/work/cetirizine/cetirizine/src/components/header/header.stories.tsx\":\"./src/components/header/header.stories.tsx\",\"/home/runner/work/cetirizine/cetirizine/src/components/input/basic/input.stories.tsx\":\"./src/components/input/basic/input.stories.tsx\",\"/home/runner/work/cetirizine/cetirizine/src/components/input/chat/input.stories.tsx\":\"./src/components/input/chat/input.stories.tsx\",\"/home/runner/work/cetirizine/cetirizine/src/components/roomList/roomList.stories.tsx\":\"./src/components/roomList/roomList.stories.tsx\",\"/home/runner/work/cetirizine/cetirizine/src/components/roomList/roomListItem/roomListItem.stories.tsx\":\"./src/components/roomList/roomListItem/roomListItem.stories.tsx\",\"/home/runner/work/cetirizine/cetirizine/src/documentation/Welcome.stories.mdx\":\"./src/documentation/Welcome.stories.mdx\",\"/home/runner/work/cetirizine/cetirizine/src/pages/LoginPage.stories.tsx\":\"./src/pages/LoginPage.stories.tsx\",\"/home/runner/work/cetirizine/cetirizine/src/pages/MainPage.stories.tsx\":\"./src/pages/MainPage.stories.tsx\"}[key])\n    });\n\n    export function configStories(configure) {\n      configure(loadable, { hot: import.meta.hot }, false);\n    }","// Ensure that the client API is initialized by the framework before any other iframe code\n    // is loaded. That way our client-apis can assume the existence of the API+store\n    import { configure } from '/home/runner/work/cetirizine/cetirizine/node_modules/@storybook/react';\n\n    import { logger } from '@storybook/client-logger';\n    import * as previewApi from \"@storybook/preview-api\";\n    import * as config_0 from '@storybook/react/preview'\nimport * as config_1 from '@storybook/addon-links/preview'\nimport * as config_2 from '@storybook/addon-essentials/docs/preview'\nimport * as config_3 from '@storybook/addon-essentials/actions/preview'\nimport * as config_4 from '@storybook/addon-essentials/backgrounds/preview'\nimport * as config_5 from '@storybook/addon-essentials/measure/preview'\nimport * as config_6 from '@storybook/addon-essentials/outline/preview'\nimport * as config_7 from '@storybook/addon-essentials/highlight/preview'\nimport * as config_8 from '@storybook/addon-interactions/preview'\nimport * as config_9 from '@storybook/addon-a11y/preview'\nimport * as config_10 from '@storybook/addon-styling/preview'\n\n    import * as preview from '/virtual:/@storybook/builder-vite/preview-entry.js';\n    import { configStories } from '/virtual:/@storybook/builder-vite/storybook-stories.js';\n\n    const {\n      addDecorator,\n      addParameters,\n      addLoader,\n      addArgs,\n      addArgTypes,\n      addStepRunner,\n      addArgTypesEnhancer,\n      addArgsEnhancer,\n      setGlobalRender,\n    } = previewApi;\n\n    const configs = [config_0,config_1,config_2,config_3,config_4,config_5,config_6,config_7,config_8,config_9,config_10,preview.default].filter(Boolean)\n\n    configs.map(config => config.default ? config.default : config).forEach(config => {\n      Object.keys(config).forEach((key) => {\n        const value = config[key];\n        switch (key) {\n          case 'args': {\n            return addArgs(value);\n          }\n          case 'argTypes': {\n            return addArgTypes(value);\n          }\n          case 'decorators': {\n            return value.forEach((decorator) => addDecorator(decorator, false));\n          }\n          case 'loaders': {\n            return value.forEach((loader) => addLoader(loader, false));\n          }\n          case 'parameters': {\n            return addParameters({ ...value }, false);\n          }\n          case 'argTypesEnhancers': {\n            return value.forEach((enhancer) => addArgTypesEnhancer(enhancer));\n          }\n          case 'argsEnhancers': {\n            return value.forEach((enhancer) => addArgsEnhancer(enhancer))\n          }\n          case 'render': {\n            return setGlobalRender(value)\n          }\n          case 'globals':\n          case 'globalTypes': {\n            const v = {};\n            v[key] = value;\n            return addParameters(v, false);\n          }\n          case 'decorateStory':\n          case 'applyDecorators':\n          case 'renderToDOM': // deprecated\n          case 'renderToCanvas': {\n            return null; // This key is not handled directly in v6 mode.\n          }\n          case 'runStep': {\n            return addStepRunner(value);\n          }\n          default: {\n            // eslint-disable-next-line prefer-template\n            return console.log(key + ' was not supported :( !');\n          }\n        }\n      });\n    })\n    \n    /* TODO: not quite sure what to do with this, to fix HMR\n    if (import.meta.hot) {\n        import.meta.hot.accept();    \n    }\n    */\n\n    configStories(configure);"],"names":["preview","withThemeByDataAttribute","Story","jsx","Avatar","memo","avatarUrl","displayname","dm","online","jsxs","Fragment","Button","type","style","onClick","children","readonly","Header","Input","placeholder","password","autoFocus","value","onChange","URL_MATCHER","EMAIL_MATCHER","MATCHERS","text","match","PlaygroundAutoLinkPlugin","AutoLinkPlugin","LowPriority","supportedBlockTypes","blockTypeToBlockName","Divider","positionEditorElement","editor","rect","FloatingLinkEditor","editorRef","useRef","inputRef","mouseDownRef","linkUrl","setLinkUrl","useState","isEditMode","setEditMode","lastSelection","setLastSelection","updateLinkEditor","useCallback","selection","$getSelection","$isRangeSelection","node","getSelectedNode","parent","$isLinkNode","editorElem","nativeSelection","activeElement","rootElement","domRange","inner","useEffect","mergeRegister","editorState","SELECTION_CHANGE_COMMAND","safeLink","createElement","event","TOGGLE_LINK_COMMAND","Select","className","options","option","anchor","focus","anchorNode","focusNode","$isAtNodeEnd","BlockOptionsDropdownList","blockType","toolbarRef","setShowBlockOptionsDropDown","dropDownRef","dropDown","toolbar","handle","target","formatParagraph","$wrapNodes","$createParagraphNode","formatLargeHeading","$createHeadingNode","formatSmallHeading","formatBulletList","INSERT_UNORDERED_LIST_COMMAND","REMOVE_LIST_COMMAND","formatNumberedList","INSERT_ORDERED_LIST_COMMAND","formatQuote","$createQuoteNode","formatCode","$createCodeNode","Text","Heading1","Heading2","List","ListOrdered","Quote","Code","ToolbarPlugin","useLexicalComposerContext","canUndo","setCanUndo","canRedo","setCanRedo","setBlockType","selectedElementKey","setSelectedElementKey","showBlockOptionsDropDown","codeLanguage","setCodeLanguage","_isRTL","setIsRTL","isLink","setIsLink","isBold","setIsBold","isItalic","setIsItalic","isUnderline","setIsUnderline","isStrikethrough","setIsStrikethrough","isCode","setIsCode","updateToolbar","element","elementKey","$isListNode","parentList","$getNearestNodeOfType","ListNode","$isHeadingNode","$isCodeNode","getDefaultCodeLanguage","$isParentElementRTL","_payload","_newEditor","CAN_UNDO_COMMAND","payload","CAN_REDO_COMMAND","codeLanguges","useMemo","getCodeLanguages","onCodeLanguageSelect","e","$getNodeByKey","insertLink","portalContainer","setPortalContainer","container","UNDO_COMMAND","Undo","REDO_COMMAND","Redo","Heading3","Heading4","Heading5","ChevronDown","createPortal","FORMAT_TEXT_COMMAND","Bold","Italic","Underline","Strikethrough","Link","CodeHighlightPlugin","registerCodeHighlighting","editorTheme","Placeholder","ChatInput","namespace","onError","initialConfig","EditorTheme","HeadingNode","ListItemNode","QuoteNode","CodeNode","CodeHighlightNode","TableNode","TableCellNode","TableRowNode","AutoLinkNode","LinkNode","LexicalComposer","RichTextPlugin","ContentEditable","LexicalErrorBoundary","OnChangePlugin","HistoryPlugin","LinkPlugin","MarkdownShortcutPlugin","TRANSFORMERS","isSyncOp","op","isInsertOp","isInvalidateOp","isDeleteOp","isRoomMessageTextEvent","isRoomStateEvent","isRoomCreateEvent","isRoomAvatarEvent","isSpaceChildEvent","isSpaceParentEvent","isRoomTopicEvent","Room","roomID","hostname","events","newEvent","index","oldEvent","state","avatarURL","rawAvatarURL","isSpace","name","topic","count","parents","isDM","userID","isEncrypted","MatrixClient","EventEmitter","instance","tx","loginInfo","OlmMachine","UserId","DeviceId","syncTx","syncInfo","roomTx","rooms","room","roomObj","openDB","db","oldVersion","ranges","r","listKey","hi","low","i","max","indexes","n","outgoing_requests","request","RequestType","request_typed","response","lists_ranges","timeline_limit","list","rawRangeInView","deduped","acc","cur","arr","a","url","resp","syncInfoTX","json","DeviceLists","user_id","gapIndex","newRoom","foundRoom","roomFromDB","roomIDs2","duplicates","item","notification_count","notification_highlight_count","joined_count","invited_count","state_events","normal_events","required_state","is_dm","memberIds","b","spaces","result","space","childrenIDs","parentObj","alreadyAddedSpace","child","username","triesLeft","well_known","flow","isErrorResp","isRateLimitError","isLoginResponse","userId","arg","defaultMatrixClient","MatrixContext","createContext","useRooms","client","useContext","setRooms","listenForRooms","useRoom","useSpaces","spacesWithRooms","setSpacesWithRooms","_rooms","useProfile","profile","setProfile","RoomListItem","roomId","active","hidden","matrixClient","ref","inView","useInView","RoomListRooms","sectionID","activeRoom","roomsRendered","RoomSection","section","onRoomClick","setHidden","prev","ChevronRight","RoomList","sections","setActiveRoom","navigate","useNavigate","MDXContent","props","MDXLayout","_provideComponents","_jsx","_createMdxContent","_components","_jsxs","_Fragment","Meta","__page","componentMeta","__namedExportsOrder","Login","loginPending","setLoginPending","loginError","setLoginError","setUsername","setPassword","Navigate","startLogin","LoginPage","linkifyOptions","MessageEvent","hasPreviousEvent","sanitized","DOMPurify","Linkify","UnknownEvent","MemberEvent","ChatView","scrollRef","pathname","useLocation","renderedEvents","setRenderedEvents","renderEvents","dedupedEvents","self","previousEvent","previousEventIsFromSameSender","previousEventType","reactions","decrypted_event","RoomId","renderEvent","MainPage","params","useParams","_htmlMessage","setHtmlMessage","_plainMessage","setPlainMessage","toplevelSpaces","spaceRoom","not_a_child","otherChildren","no_parents","leftOverRooms","otherRoom","not_a_space","generateSubsections","subspace","subspaceMeta","otherRooms","otherRoomsIDs","otherRoomsDuplicates","id","Settings","html","$generateHtmlFromNodes","markdown","$convertToMarkdownString","Send","loadable","key","story_0","story_1","story_2","story_3","story_4","story_5","story_6","story_7","story_8","story_9","configStories","configure","previewApi","addDecorator","addParameters","addLoader","addArgs","addArgTypes","addStepRunner","addArgTypesEnhancer","addArgsEnhancer","setGlobalRender","configs","config_0","config_1","config_2","config_3","config_4","config_5","config_6","config_7","config_8","config_9","config_10","preview.default","config","decorator","loader","enhancer","v"],"mappings":"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"}