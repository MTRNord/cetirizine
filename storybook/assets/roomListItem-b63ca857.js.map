{"version":3,"file":"roomListItem-b63ca857.js","sources":["../../../node_modules/react-intersection-observer/react-intersection-observer.modern.mjs","../../../src/components/roomList/roomListItem/roomListItem.tsx"],"sourcesContent":["import * as React from 'react';\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nconst observerMap = new Map();\nconst RootIds = new WeakMap();\nlet rootId = 0;\nlet unsupportedValue = undefined;\n/**\r\n * What should be the default behavior if the IntersectionObserver is unsupported?\r\n * Ideally the polyfill has been loaded, you can have the following happen:\r\n * - `undefined`: Throw an error\r\n * - `true` or `false`: Set the `inView` value to this regardless of intersection state\r\n * **/\n\nfunction defaultFallbackInView(inView) {\n  unsupportedValue = inView;\n}\n/**\r\n * Generate a unique ID for the root element\r\n * @param root\r\n */\n\nfunction getRootId(root) {\n  if (!root) return '0';\n  if (RootIds.has(root)) return RootIds.get(root);\n  rootId += 1;\n  RootIds.set(root, rootId.toString());\n  return RootIds.get(root);\n}\n/**\r\n * Convert the options to a string Id, based on the values.\r\n * Ensures we can reuse the same observer when observing elements with the same options.\r\n * @param options\r\n */\n\n\nfunction optionsToId(options) {\n  return Object.keys(options).sort().filter(key => options[key] !== undefined).map(key => {\n    return `${key}_${key === 'root' ? getRootId(options.root) : options[key]}`;\n  }).toString();\n}\n\nfunction createObserver(options) {\n  // Create a unique ID for this observer instance, based on the root, root margin and threshold.\n  let id = optionsToId(options);\n  let instance = observerMap.get(id);\n\n  if (!instance) {\n    // Create a map of elements this observer is going to observe. Each element has a list of callbacks that should be triggered, once it comes into view.\n    const elements = new Map();\n    let thresholds;\n    const observer = new IntersectionObserver(entries => {\n      entries.forEach(entry => {\n        var _elements$get;\n\n        // While it would be nice if you could just look at isIntersecting to determine if the component is inside the viewport, browsers can't agree on how to use it.\n        // -Firefox ignores `threshold` when considering `isIntersecting`, so it will never be false again if `threshold` is > 0\n        const inView = entry.isIntersecting && thresholds.some(threshold => entry.intersectionRatio >= threshold); // @ts-ignore support IntersectionObserver v2\n\n        if (options.trackVisibility && typeof entry.isVisible === 'undefined') {\n          // The browser doesn't support Intersection Observer v2, falling back to v1 behavior.\n          // @ts-ignore\n          entry.isVisible = inView;\n        }\n\n        (_elements$get = elements.get(entry.target)) == null ? void 0 : _elements$get.forEach(callback => {\n          callback(inView, entry);\n        });\n      });\n    }, options); // Ensure we have a valid thresholds array. If not, use the threshold from the options\n\n    thresholds = observer.thresholds || (Array.isArray(options.threshold) ? options.threshold : [options.threshold || 0]);\n    instance = {\n      id,\n      observer,\n      elements\n    };\n    observerMap.set(id, instance);\n  }\n\n  return instance;\n}\n/**\r\n * @param element - DOM Element to observe\r\n * @param callback - Callback function to trigger when intersection status changes\r\n * @param options - Intersection Observer options\r\n * @param fallbackInView - Fallback inView value.\r\n * @return Function - Cleanup function that should be triggered to unregister the observer\r\n */\n\n\nfunction observe(element, callback, options = {}, fallbackInView = unsupportedValue) {\n  if (typeof window.IntersectionObserver === 'undefined' && fallbackInView !== undefined) {\n    const bounds = element.getBoundingClientRect();\n    callback(fallbackInView, {\n      isIntersecting: fallbackInView,\n      target: element,\n      intersectionRatio: typeof options.threshold === 'number' ? options.threshold : 0,\n      time: 0,\n      boundingClientRect: bounds,\n      intersectionRect: bounds,\n      rootBounds: bounds\n    });\n    return () => {// Nothing to cleanup\n    };\n  } // An observer with the same options can be reused, so lets use this fact\n\n\n  const {\n    id,\n    observer,\n    elements\n  } = createObserver(options); // Register the callback listener for this element\n\n  let callbacks = elements.get(element) || [];\n\n  if (!elements.has(element)) {\n    elements.set(element, callbacks);\n  }\n\n  callbacks.push(callback);\n  observer.observe(element);\n  return function unobserve() {\n    // Remove the callback from the callback list\n    callbacks.splice(callbacks.indexOf(callback), 1);\n\n    if (callbacks.length === 0) {\n      // No more callback exists for element, so destroy it\n      elements.delete(element);\n      observer.unobserve(element);\n    }\n\n    if (elements.size === 0) {\n      // No more elements are being observer by this instance, so destroy it\n      observer.disconnect();\n      observerMap.delete(id);\n    }\n  };\n}\n\nconst _excluded = [\"children\", \"as\", \"triggerOnce\", \"threshold\", \"root\", \"rootMargin\", \"onChange\", \"skip\", \"trackVisibility\", \"delay\", \"initialInView\", \"fallbackInView\"];\n\nfunction isPlainChildren(props) {\n  return typeof props.children !== 'function';\n}\n/**\r\n ## Render props\r\n\n To use the `<InView>` component, you pass it a function. It will be called\r\n whenever the state changes, with the new value of `inView`. In addition to the\r\n `inView` prop, children also receive a `ref` that should be set on the\r\n containing DOM element. This is the element that the IntersectionObserver will\r\n monitor.\r\n\n If you need it, you can also access the\r\n [`IntersectionObserverEntry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry)\r\n on `entry`, giving you access to all the details about the current intersection\r\n state.\r\n\n ```jsx\r\n import { InView } from 'react-intersection-observer';\r\n\n const Component = () => (\r\n <InView>\r\n {({ inView, ref, entry }) => (\r\n      <div ref={ref}>\r\n        <h2>{`Header inside viewport ${inView}.`}</h2>\r\n      </div>\r\n    )}\r\n </InView>\r\n );\r\n\n export default Component;\r\n ```\r\n\n ## Plain children\r\n\n You can pass any element to the `<InView />`, and it will handle creating the\r\n wrapping DOM element. Add a handler to the `onChange` method, and control the\r\n state in your own component. Any extra props you add to `<InView>` will be\r\n passed to the HTML element, allowing you set the `className`, `style`, etc.\r\n\n ```jsx\r\n import { InView } from 'react-intersection-observer';\r\n\n const Component = () => (\r\n <InView as=\"div\" onChange={(inView, entry) => console.log('Inview:', inView)}>\r\n <h2>Plain children are always rendered. Use onChange to monitor state.</h2>\r\n </InView>\r\n );\r\n\n export default Component;\r\n ```\r\n */\n\n\nclass InView extends React.Component {\n  constructor(props) {\n    super(props);\n    this.node = null;\n    this._unobserveCb = null;\n\n    this.handleNode = node => {\n      if (this.node) {\n        // Clear the old observer, before we start observing a new element\n        this.unobserve();\n\n        if (!node && !this.props.triggerOnce && !this.props.skip) {\n          // Reset the state if we get a new node, and we aren't ignoring updates\n          this.setState({\n            inView: !!this.props.initialInView,\n            entry: undefined\n          });\n        }\n      }\n\n      this.node = node ? node : null;\n      this.observeNode();\n    };\n\n    this.handleChange = (inView, entry) => {\n      if (inView && this.props.triggerOnce) {\n        // If `triggerOnce` is true, we should stop observing the element.\n        this.unobserve();\n      }\n\n      if (!isPlainChildren(this.props)) {\n        // Store the current State, so we can pass it to the children in the next render update\n        // There's no reason to update the state for plain children, since it's not used in the rendering.\n        this.setState({\n          inView,\n          entry\n        });\n      }\n\n      if (this.props.onChange) {\n        // If the user is actively listening for onChange, always trigger it\n        this.props.onChange(inView, entry);\n      }\n    };\n\n    this.state = {\n      inView: !!props.initialInView,\n      entry: undefined\n    };\n  }\n\n  componentDidUpdate(prevProps) {\n    // If a IntersectionObserver option changed, reinit the observer\n    if (prevProps.rootMargin !== this.props.rootMargin || prevProps.root !== this.props.root || prevProps.threshold !== this.props.threshold || prevProps.skip !== this.props.skip || prevProps.trackVisibility !== this.props.trackVisibility || prevProps.delay !== this.props.delay) {\n      this.unobserve();\n      this.observeNode();\n    }\n  }\n\n  componentWillUnmount() {\n    this.unobserve();\n    this.node = null;\n  }\n\n  observeNode() {\n    if (!this.node || this.props.skip) return;\n    const {\n      threshold,\n      root,\n      rootMargin,\n      trackVisibility,\n      delay,\n      fallbackInView\n    } = this.props;\n    this._unobserveCb = observe(this.node, this.handleChange, {\n      threshold,\n      root,\n      rootMargin,\n      // @ts-ignore\n      trackVisibility,\n      // @ts-ignore\n      delay\n    }, fallbackInView);\n  }\n\n  unobserve() {\n    if (this._unobserveCb) {\n      this._unobserveCb();\n\n      this._unobserveCb = null;\n    }\n  }\n\n  render() {\n    if (!isPlainChildren(this.props)) {\n      const {\n        inView,\n        entry\n      } = this.state;\n      return this.props.children({\n        inView,\n        entry,\n        ref: this.handleNode\n      });\n    }\n\n    const _this$props = this.props,\n          {\n      children,\n      as\n    } = _this$props,\n          props = _objectWithoutPropertiesLoose(_this$props, _excluded);\n\n    return React.createElement(as || 'div', _extends({\n      ref: this.handleNode\n    }, props), children);\n  }\n\n}\n\n/**\r\n * React Hooks make it easy to monitor the `inView` state of your components. Call\r\n * the `useInView` hook with the (optional) [options](#options) you need. It will\r\n * return an array containing a `ref`, the `inView` status and the current\r\n * [`entry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry).\r\n * Assign the `ref` to the DOM element you want to monitor, and the hook will\r\n * report the status.\r\n *\r\n * @example\r\n * ```jsx\r\n * import React from 'react';\r\n * import { useInView } from 'react-intersection-observer';\r\n *\r\n * const Component = () => {\r\n *   const { ref, inView, entry } = useInView({\r\n *       threshold: 0,\r\n *   });\r\n *\r\n *   return (\r\n *     <div ref={ref}>\r\n *       <h2>{`Header inside viewport ${inView}.`}</h2>\r\n *     </div>\r\n *   );\r\n * };\r\n * ```\r\n */\n\nfunction useInView({\n  threshold,\n  delay,\n  trackVisibility,\n  rootMargin,\n  root,\n  triggerOnce,\n  skip,\n  initialInView,\n  fallbackInView,\n  onChange\n} = {}) {\n  var _state$entry;\n\n  const [ref, setRef] = React.useState(null);\n  const callback = React.useRef();\n  const [state, setState] = React.useState({\n    inView: !!initialInView,\n    entry: undefined\n  }); // Store the onChange callback in a `ref`, so we can access the latest instance\n  // inside the `useEffect`, but without triggering a rerender.\n\n  callback.current = onChange;\n  React.useEffect(() => {\n    // Ensure we have node ref, and that we shouldn't skip observing\n    if (skip || !ref) return;\n    let unobserve;\n    unobserve = observe(ref, (inView, entry) => {\n      setState({\n        inView,\n        entry\n      });\n      if (callback.current) callback.current(inView, entry);\n\n      if (entry.isIntersecting && triggerOnce && unobserve) {\n        // If it should only trigger once, unobserve the element after it's inView\n        unobserve();\n        unobserve = undefined;\n      }\n    }, {\n      root,\n      rootMargin,\n      threshold,\n      // @ts-ignore\n      trackVisibility,\n      // @ts-ignore\n      delay\n    }, fallbackInView);\n    return () => {\n      if (unobserve) {\n        unobserve();\n      }\n    };\n  }, // We break the rule here, because we aren't including the actual `threshold` variable\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  [// If the threshold is an array, convert it to a string, so it won't change between renders.\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  Array.isArray(threshold) ? threshold.toString() : threshold, ref, root, rootMargin, triggerOnce, skip, trackVisibility, fallbackInView, delay]);\n  const entryTarget = (_state$entry = state.entry) == null ? void 0 : _state$entry.target;\n  const previousEntryTarget = React.useRef();\n\n  if (!ref && entryTarget && !triggerOnce && !skip && previousEntryTarget.current !== entryTarget) {\n    // If we don't have a node ref, then reset the state (unless the hook is set to only `triggerOnce` or `skip`)\n    // This ensures we correctly reflect the current state - If you aren't observing anything, then nothing is inView\n    previousEntryTarget.current = entryTarget;\n    setState({\n      inView: !!initialInView,\n      entry: undefined\n    });\n  }\n\n  const result = [setRef, state.inView, state.entry]; // Support object destructuring, by adding the specific values.\n\n  result.ref = result[0];\n  result.inView = result[1];\n  result.entry = result[2];\n  return result;\n}\n\nexport { InView, defaultFallbackInView, observe, useInView };\n//# sourceMappingURL=react-intersection-observer.modern.mjs.map\n","import { useInView } from \"react-intersection-observer\";\nimport Avatar from \"../../avatar/avatar\";\nimport { FC, useContext, useEffect } from \"react\";\nimport { MatrixContext } from \"../../../app/sdk/client\";\n\ntype RoomListItemProps = {\n    /**\n     * Room id\n     */\n    roomId: string\n    /**\n     * The URL of the Avatar image\n     */\n    avatarUrl?: string\n    /**\n     * The displayname of the room list item\n     */\n    displayname: string\n    /**\n     * Wether it is a DM or not\n     */\n    dm: boolean\n    /**\n     * Wether the user is online. Only used if dm is true.\n     */\n    online: boolean\n    /**\n     * Wether the current room is selected\n     */\n    active: boolean\n    /**\n     * The onClick handler\n     */\n    onClick: () => void;\n    /**\n     * If room is hidden\n     */\n    hidden: boolean\n};\n\nconst RoomListItem: FC<RoomListItemProps> = ({ roomId, avatarUrl, displayname, dm = false, online = false, active = false, onClick, hidden }: RoomListItemProps) => {\n    const { ref, inView } = useInView({\n        triggerOnce: true,\n        rootMargin: '200px 0px',\n        skip: hidden,\n    });\n    const matrixClient = useContext(MatrixContext);\n    useEffect(() => {\n        if (inView) {\n            matrixClient.addInViewRoom(roomId)\n        } else {\n            matrixClient.removeInViewRoom(roomId)\n        }\n    }, [inView])\n    return (\n        <div ref={ref} onClick={onClick} className=\"w-full cursor-pointer\">\n            {\n                inView && (active ? (\n                    <div className=\"flex flex-row gap-2 p-1 bg-gray-300 hover:bg-gray-400 rounded-lg duration-200 ease-in-out items-center\">\n                        <Avatar avatarUrl={avatarUrl} displayname={displayname} dm={dm} online={online} />\n                        <span title={displayname} className='text-slate-900 font-normal text-base capitalize max-w-[32ch] overflow-hidden text-ellipsis w-full whitespace-nowrap'>{displayname}</span>\n                    </div>\n                ) : (\n                    <div className=\"flex flex-row gap-2 p-1 hover:bg-gray-300 rounded-lg duration-200 ease-in-out items-center\">\n                        <Avatar avatarUrl={avatarUrl} displayname={displayname} dm={dm} online={online} />\n                        <span title={displayname} className='text-slate-900 font-normal text-base capitalize max-w-[32ch] overflow-hidden text-ellipsis w-full whitespace-nowrap'>{displayname}</span>\n                    </div>\n                ))\n            }\n        </div>\n    );\n}\n\nexport default RoomListItem"],"names":["observerMap","RootIds","rootId","unsupportedValue","getRootId","root","optionsToId","options","key","createObserver","id","instance","elements","thresholds","observer","entries","entry","_elements$get","inView","threshold","callback","observe","element","fallbackInView","bounds","callbacks","useInView","delay","trackVisibility","rootMargin","triggerOnce","skip","initialInView","onChange","_state$entry","ref","setRef","React.useState","React.useRef","state","setState","React.useEffect","unobserve","entryTarget","previousEntryTarget","result","RoomListItem","roomId","avatarUrl","displayname","dm","online","active","onClick","hidden","matrixClient","useContext","MatrixContext","useEffect","jsx","jsxs","Avatar"],"mappings":"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","x_google_ignoreList":[0]}