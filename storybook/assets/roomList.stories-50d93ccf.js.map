{"version":3,"file":"roomList.stories-50d93ccf.js","sources":["../../../node_modules/lucide-react/dist/esm/icons/chevron-right.js","../../../src/components/roomList/roomList.tsx"],"sourcesContent":["/**\n * lucide-react v0.171.0 - ISC\n */\n\nimport createLucideIcon from '../createLucideIcon.js';\n\nconst ChevronRight = createLucideIcon(\"ChevronRight\", [\n  [\"polyline\", { points: \"9 18 15 12 9 6\", key: \"1rtp27\" }]\n]);\n\nexport { ChevronRight as default };\n//# sourceMappingURL=chevron-right.js.map\n","import { FC, useState } from \"react\";\nimport RoomListItem from \"./roomListItem/roomListItem\";\nimport { ChevronDown, ChevronRight } from \"lucide-react\";\n\ntype Room = {\n    /**\n     * The URL of the Avatar image\n     */\n    avatarUrl?: string\n    /**\n     * The displayname of the room list item\n     */\n    displayname: string\n    /**\n     * Wether it is a DM or not\n     */\n    dm: boolean\n    /**\n     * Wether the user is online. Only used if dm is true.\n     */\n    online: boolean\n    /**\n     * The roomid of the Room\n     */\n    roomID: string\n};\n\ntype Section = {\n    /**\n     * Section Name. Can be a Space or a Tag\n     */\n    sectionName: string\n    /**\n     * The Rooms within the Section\n     */\n    rooms: Room[]\n    /**\n     * The Subsections of the Section\n     */\n    subsections: Section[]\n    /**\n     * The roomid of the Space\n     */\n    roomID: string\n}\n\ntype RoomListProps = {\n    /**\n     * The Sections available\n     */\n    sections: Section[]\n    /**\n     * Rooms outside of any Sections\n     */\n    rooms: Room[]\n};\n\ntype RoomListRoomsProps = {\n    /**\n     * The roomid of the Space\n     */\n    sectionID: string\n    /**\n     * Rooms\n     */\n    rooms: Room[]\n    /**\n     * The onClick handler\n     */\n    onClick: (roomID: string) => void;\n    /**\n     * The activeRoom\n     */\n    activeRoom?: string;\n    /**\n     * If rooms are hidden\n     */\n    hidden: boolean\n};\n\nconst RoomListRooms: FC<RoomListRoomsProps> = ({ sectionID, rooms, onClick, activeRoom, hidden }: RoomListRoomsProps) => {\n    const roomsRendered = rooms.map(room => {\n        return (\n            <RoomListItem\n                hidden={hidden}\n                key={room.roomID + sectionID}\n                avatarUrl={room.avatarUrl}\n                displayname={room.displayname}\n                dm={room.dm}\n                online={room.online}\n                active={room.roomID === activeRoom}\n                onClick={() => { onClick(room.roomID) }}\n            />\n        );\n    });\n    return (\n        <>\n            {roomsRendered}\n        </>\n    );\n}\n\nconst RoomSection: FC<{ section: Section, onRoomClick: (roomID: string) => void, activeRoom: string | undefined }> = ({ section, onRoomClick, activeRoom }: { section: Section, onRoomClick: (roomID: string) => void, activeRoom: string | undefined }) => {\n    const [hidden, setHidden] = useState<boolean>(false);\n    return (\n        <div key={section.roomID} className=\"flex flex-col gap-1\">\n            <div className=\"flex flex-row gap-2 p-1 px-2 bg-gray-300 items-center justify-between cursor-pointer\" onClick={() => setHidden(prev => !prev)}>\n                <span className='text-black font-normal text-xl capitalize'>{section.sectionName}</span>\n                {hidden ? <ChevronRight size={20} /> : <ChevronDown size={20} />}\n            </div >\n            {!hidden && (<RoomListRooms\n                hidden={hidden}\n                sectionID={section.roomID}\n                rooms={section.rooms}\n                onClick={onRoomClick}\n                activeRoom={activeRoom}\n            />)}\n            {!hidden && (\n                section.subsections.map(section => {\n                    return (\n                        <RoomSection\n                            key={section.roomID}\n                            section={section}\n                            onRoomClick={onRoomClick}\n                            activeRoom={activeRoom}\n                        />\n                    );\n                })\n            )}\n        </div>\n    );\n}\n\nconst RoomList: FC<RoomListProps> = ({ sections, rooms }: RoomListProps) => {\n    const [activeRoom, setActiveRoom] = useState<string | undefined>(undefined);\n\n    return (\n        <div className=\"flex flex-col gap-1\">\n            {\n                sections.map(section => {\n                    return (\n                        <RoomSection\n                            key={section.roomID}\n                            section={section}\n                            onRoomClick={(roomID: string) => { setActiveRoom(roomID) }}\n                            activeRoom={activeRoom}\n                        />\n                    );\n                })\n            }\n            <RoomSection\n                section={{\n                    sectionName: \"Others\",\n                    roomID: \"other\",\n                    subsections: [],\n                    rooms: rooms\n                }}\n                onRoomClick={(roomID: string) => { setActiveRoom(roomID) }}\n                activeRoom={activeRoom}\n            />\n\n        </div>\n    );\n}\n\nexport default RoomList"],"names":["ChevronRight","createLucideIcon","RoomListRooms","sectionID","rooms","onClick","activeRoom","hidden","roomsRendered","room","jsx","RoomListItem","Fragment","RoomSection","section","onRoomClick","setHidden","useState","jsxs","prev","ChevronDown","section2","RoomList","sections","setActiveRoom","roomID"],"mappings":"uSAMA,MAAMA,EAAeC,EAAiB,eAAgB,CACpD,CAAC,WAAY,CAAE,OAAQ,iBAAkB,IAAK,QAAQ,CAAE,CAC1D,CAAC,ECwEDC,EAAA,CAAA,CAAA,UAAAC,EAAA,MAAAC,EAAA,QAAAC,EAAA,WAAAC,EAAA,OAAAC,KAAA,CACI,MAAAC,EAAAJ,EAAA,IAAAK,GACIC,EAAA,IACIC,EAAC,CAAA,OAAAJ,EACG,UAAAE,EAAA,UAEgB,YAAAA,EAAA,YACE,GAAAA,EAAA,GACT,OAAAA,EAAA,OACI,OAAAA,EAAA,SAAAH,EACW,QAAA,IAAA,CACPD,EAAAI,EAAA,MAAA,CAAmB,CAAE,EAAAA,EAAA,OAAAN,CANnB,CAOvB,EAGR,OAAAO,EAAA,IAAAE,EAAA,SAAA,CAAA,SAAAJ,CAAA,CAAA,CAKJ,EAEAK,EAAA,CAAA,CAAA,QAAAC,EAAA,YAAAC,EAAA,WAAAT,CAAA,IAAA,CACI,KAAA,CAAAC,EAAAS,CAAA,EAAAC,EAAA,SAAA,EAAA,EACA,OAAAC,EAAA,KAAA,MAAA,CAAA,UAAA,sBAAA,SAAA,CAEQA,EAAAA,KAAA,MAAA,CAAA,UAAA,uFAAA,QAAA,IAAAF,EAAAG,GAAA,CAAAA,CAAA,EAAA,SAAA,CACIT,EAAA,IAAA,OAAA,CAAA,UAAA,4CAAA,SAAAI,EAAA,YAAA,EAAiFP,EAAAG,EAAA,IAAAV,EAAA,CAAA,KAAA,EAAA,CAAA,EAAAU,EAAAA,IAAAU,EAAA,CAAA,KAAA,EAAA,CAAA,CACnB,EAAA,EAClE,CAAAb,GAAAG,EAAA,IACaR,EAAC,CAAA,OAAAK,EACV,UAAAO,EAAA,OACmB,MAAAA,EAAA,MACJ,QAAAC,EACN,WAAAT,CACT,CAAA,EACJ,CAAAC,GAAAO,EAAA,YAAA,IAAAO,GAGQX,EAAA,IACIG,EAAC,CAAA,QAAAQ,EAEY,YAAAN,EACT,WAAAT,CACA,EAAAe,EAAA,MAHa,CAIjB,CAEP,GAAAP,EAAA,MAAA,CAIjB,EAEAQ,EAAA,CAAA,CAAA,SAAAC,EAAA,MAAAnB,KAAA,CACI,KAAA,CAAAE,EAAAkB,CAAA,EAAAP,EAAAA,SAAA,MAAA,EAEA,OAAAC,EAAA,KAAA,MAAA,CAAA,UAAA,sBAAA,SAAA,CAGYK,EAAA,IAAAT,GACIJ,EAAA,IACIG,EAAC,CAAA,QAAAC,EAEG,YAAAW,GAAA,CACmCD,EAAAC,CAAA,CAAoB,EAAE,WAAAnB,CACzD,EAAAQ,EAAA,MAHa,CAIjB,EAEPJ,EAAA,IAELG,EAAC,CAAA,QAAA,CACY,YAAA,SACQ,OAAA,QACL,YAAA,CAAA,EACM,MAAAT,CACd,EACJ,YAAAqB,GAAA,CACmCD,EAAAC,CAAA,CAAoB,EAAE,WAAAnB,CACzD,CAAA,CACJ,CAAA,CAAA,CAIZ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","x_google_ignoreList":[0]}